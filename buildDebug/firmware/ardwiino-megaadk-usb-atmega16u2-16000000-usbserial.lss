
/home/sanjay/Code/Ardwiino/buildDebug/firmware/ardwiino-megaadk-usb-atmega16u2-16000000-usbserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000f86  0000101a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000119  00800116  00800116  00001030  2**0
                  ALLOC
  3 .noinit       00000004  0080022f  0080022f  00001030  2**0
                  ALLOC
  4 .comment      00000012  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000002c0  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00005cd8  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001a5a  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000068e3  00000000  00000000  00008a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000838  00000000  00000000  0000f35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00001e9b  00000000  00000000  0000fb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00003b81  00000000  00000000  00011a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000488  00000000  00000000  000155b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
   2:	00 00       	nop
   4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
   6:	00 00       	nop
   8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
   a:	00 00       	nop
   c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
   e:	00 00       	nop
  10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
  12:	00 00       	nop
  14:	8f c0       	rjmp	.+286    	; 0x134 <__bad_interrupt>
  16:	00 00       	nop
  18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
  1e:	00 00       	nop
  20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
  22:	00 00       	nop
  24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
  26:	00 00       	nop
  28:	85 c0       	rjmp	.+266    	; 0x134 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	15 c4       	rjmp	.+2090   	; 0x858 <__vector_11>
  2e:	00 00       	nop
  30:	ba c4       	rjmp	.+2420   	; 0x9a6 <__vector_12>
  32:	00 00       	nop
  34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
  36:	00 00       	nop
  38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
  3e:	00 00       	nop
  40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
  42:	00 00       	nop
  44:	77 c0       	rjmp	.+238    	; 0x134 <__bad_interrupt>
  46:	00 00       	nop
  48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
  4e:	00 00       	nop
  50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
  52:	00 00       	nop
  54:	6f c0       	rjmp	.+222    	; 0x134 <__bad_interrupt>
  56:	00 00       	nop
  58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	c6 c1       	rjmp	.+908    	; 0x3ea <__vector_23>
  5e:	00 00       	nop
  60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
  62:	00 00       	nop
  64:	67 c0       	rjmp	.+206    	; 0x134 <__bad_interrupt>
  66:	00 00       	nop
  68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
  6e:	00 00       	nop
  70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	00 00                                               ..

00000076 <ManufacturerString>:
  76:	32 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     2.A.r.d.u.i.n.o.
  86:	20 00 28 00 77 00 77 00 77 00 2e 00 61 00 72 00      .(.w.w.w...a.r.
  96:	64 00 75 00 69 00 6e 00 6f 00 2e 00 63 00 63 00     d.u.i.n.o...c.c.
  a6:	29 00 00 00                                         )...

000000aa <LanguageString>:
  aa:	04 03 09 04                                         ....

000000ae <ConfigurationDescriptor>:
  ae:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  be:	01 00 05 24 00 01 10 04 24 02 06 05 24 06 00 01     ...$....$...$...
  ce:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  de:	07 05 04 02 40 00 01 07 05 83 02 40 00 01           ....@......@..

000000ec <DeviceDescriptor>:
  ec:	12 01 10 01 02 00 00 08 25 09 3f 00 01 00 01 02     ........%.?.....
  fc:	dc 01                                               ..

000000fe <__ctors_end>:
  fe:	11 24       	eor	r1, r1
 100:	1f be       	out	0x3f, r1	; 63
 102:	cf ef       	ldi	r28, 0xFF	; 255
 104:	d2 e0       	ldi	r29, 0x02	; 2
 106:	de bf       	out	0x3e, r29	; 62
 108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
 10a:	11 e0       	ldi	r17, 0x01	; 1
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b1 e0       	ldi	r27, 0x01	; 1
 110:	e6 e8       	ldi	r30, 0x86	; 134
 112:	ff e0       	ldi	r31, 0x0F	; 15
 114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
 116:	05 90       	lpm	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	a6 31       	cpi	r26, 0x16	; 22
 11c:	b1 07       	cpc	r27, r17
 11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
 120:	22 e0       	ldi	r18, 0x02	; 2
 122:	a6 e1       	ldi	r26, 0x16	; 22
 124:	b1 e0       	ldi	r27, 0x01	; 1
 126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
 128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
 12a:	af 32       	cpi	r26, 0x2F	; 47
 12c:	b2 07       	cpc	r27, r18
 12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
 130:	62 d0       	rcall	.+196    	; 0x1f6 <main>
 132:	1d c7       	rjmp	.+3642   	; 0xf6e <_exit>

00000134 <__bad_interrupt>:
 134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <RingBuffer_Remove>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
 136:	9c 01       	movw	r18, r24
			RingBuff_Data_t Data = *Buffer->Out;
 138:	dc 01       	movw	r26, r24
 13a:	ae 57       	subi	r26, 0x7E	; 126
 13c:	bf 4f       	sbci	r27, 0xFF	; 255
 13e:	ed 91       	ld	r30, X+
 140:	fc 91       	ld	r31, X
 142:	11 97       	sbiw	r26, 0x01	; 1
 144:	81 91       	ld	r24, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 146:	a9 01       	movw	r20, r18
 148:	40 58       	subi	r20, 0x80	; 128
 14a:	5f 4f       	sbci	r21, 0xFF	; 255
 14c:	e4 17       	cp	r30, r20
 14e:	f5 07       	cpc	r31, r21
 150:	61 f0       	breq	.+24     	; 0x16a <RingBuffer_Remove+0x34>
 152:	ed 93       	st	X+, r30
 154:	fc 93       	st	X, r31
			  Buffer->Out = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 156:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 158:	f8 94       	cli
			{
				Buffer->Count--;
 15a:	f9 01       	movw	r30, r18
 15c:	ec 57       	subi	r30, 0x7C	; 124
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	90 81       	ld	r25, Z
 162:	91 50       	subi	r25, 0x01	; 1
 164:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 166:	4f bf       	out	0x3f, r20	; 63
			}
			
			return Data;
		}
 168:	08 95       	ret
			  Buffer->Out = Buffer->Buffer;
 16a:	2d 93       	st	X+, r18
 16c:	3c 93       	st	X, r19
 16e:	f3 cf       	rjmp	.-26     	; 0x156 <RingBuffer_Remove+0x20>

00000170 <RingBuffer_Insert>:
		{
 170:	9c 01       	movw	r18, r24
			*Buffer->In = Data;
 172:	fc 01       	movw	r30, r24
 174:	e0 58       	subi	r30, 0x80	; 128
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	a0 81       	ld	r26, Z
 17a:	b1 81       	ldd	r27, Z+1	; 0x01
 17c:	6c 93       	st	X, r22
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 17e:	a0 81       	ld	r26, Z
 180:	b1 81       	ldd	r27, Z+1	; 0x01
 182:	cd 01       	movw	r24, r26
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	8e 17       	cp	r24, r30
 188:	9f 07       	cpc	r25, r31
 18a:	61 f0       	breq	.+24     	; 0x1a4 <RingBuffer_Insert+0x34>
 18c:	91 83       	std	Z+1, r25	; 0x01
 18e:	80 83       	st	Z, r24
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 190:	9f b7       	in	r25, 0x3f	; 63
    cli();
 192:	f8 94       	cli
				Buffer->Count++;
 194:	f9 01       	movw	r30, r18
 196:	ec 57       	subi	r30, 0x7C	; 124
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	80 81       	ld	r24, Z
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	80 83       	st	Z, r24
    SREG = *__s;
 1a0:	9f bf       	out	0x3f, r25	; 63
		}
 1a2:	08 95       	ret
			  Buffer->In = Buffer->Buffer;
 1a4:	12 96       	adiw	r26, 0x02	; 2
 1a6:	3c 93       	st	X, r19
 1a8:	2e 93       	st	-X, r18
 1aa:	11 97       	sbiw	r26, 0x01	; 1
 1ac:	f1 cf       	rjmp	.-30     	; 0x190 <RingBuffer_Insert+0x20>

000001ae <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1ae:	84 b7       	in	r24, 0x34	; 52
 1b0:	87 7f       	andi	r24, 0xF7	; 247
 1b2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	a8 95       	wdr
 1ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 1be:	88 61       	ori	r24, 0x18	; 24
 1c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 1c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 1c8:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 1ca:	87 e6       	ldi	r24, 0x67	; 103
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
 1d2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 1dc:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 1e0:	88 e1       	ldi	r24, 0x18	; 24
 1e2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
				
				DDRD  |= (1 << 3);
 1e6:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 1e8:	5a 9a       	sbi	0x0b, 2	; 11
	wdt_disable();

	/* Hardware Initialization */
	Serial_Init(9600, false);
	// LEDs_Init();
	USB_Init();
 1ea:	2b d3       	rcall	.+1622   	; 0x842 <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	85 bd       	out	0x25, r24	; 37

	/* Pull target /RESET line high */
	AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
 1f0:	5f 9a       	sbi	0x0b, 7	; 11
	AVR_RESET_LINE_DDR |= AVR_RESET_LINE_MASK;
 1f2:	57 9a       	sbi	0x0a, 7	; 10
}
 1f4:	08 95       	ret

000001f6 <main>:
	if (jmpToBootloader == JUMP)
 1f6:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <jmpToBootloader>
 1fa:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <jmpToBootloader+0x1>
 1fe:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <jmpToBootloader+0x2>
 202:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <jmpToBootloader+0x3>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	90 48       	sbci	r25, 0x80	; 128
 20a:	ad 4a       	sbci	r26, 0xAD	; 173
 20c:	be 4d       	sbci	r27, 0xDE	; 222
 20e:	51 f4       	brne	.+20     	; 0x224 <main+0x2e>
		jmpToBootloader = 0;
 210:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <jmpToBootloader>
 214:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <jmpToBootloader+0x1>
 218:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <jmpToBootloader+0x2>
 21c:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <jmpToBootloader+0x3>
		asm volatile("jmp 0x1000");
 220:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__data_load_end+0x64>
	SetupHardware();
 224:	c4 df       	rcall	.-120    	; 0x1ae <SetupHardware>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 226:	2f b7       	in	r18, 0x3f	; 63
    cli();
 228:	f8 94       	cli
				Buffer->In  = Buffer->Buffer;
 22a:	8e e9       	ldi	r24, 0x9E	; 158
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <USBtoUSART_Buffer+0x81>
 232:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <USBtoUSART_Buffer+0x80>
				Buffer->Out = Buffer->Buffer;
 236:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <USBtoUSART_Buffer+0x83>
 23a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <USBtoUSART_Buffer+0x82>
    SREG = *__s;
 23e:	2f bf       	out	0x3f, r18	; 63
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 240:	2f b7       	in	r18, 0x3f	; 63
    cli();
 242:	f8 94       	cli
				Buffer->In  = Buffer->Buffer;
 244:	89 e1       	ldi	r24, 0x19	; 25
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <USARTtoUSB_Buffer+0x81>
 24c:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <USARTtoUSB_Buffer+0x80>
				Buffer->Out = Buffer->Buffer;
 250:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <USARTtoUSB_Buffer+0x83>
 254:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <USARTtoUSB_Buffer+0x82>
    SREG = *__s;
 258:	2f bf       	out	0x3f, r18	; 63
	sei();
 25a:	78 94       	sei
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 25c:	9f b7       	in	r25, 0x3f	; 63
    cli();
 25e:	f8 94       	cli
				Count = Buffer->Count;
 260:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <USBtoUSART_Buffer+0x84>
    SREG = *__s;
 264:	9f bf       	out	0x3f, r25	; 63
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
 266:	80 38       	cpi	r24, 0x80	; 128
 268:	49 f0       	breq	.+18     	; 0x27c <main+0x86>
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	2d d6       	rcall	.+3162   	; 0xeca <CDC_Device_ReceiveByte>
 270:	bc 01       	movw	r22, r24
			if (!(ReceivedByte < 0))
 272:	97 fd       	sbrc	r25, 7
 274:	03 c0       	rjmp	.+6      	; 0x27c <main+0x86>
				RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
 276:	8e e9       	ldi	r24, 0x9E	; 158
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	7a df       	rcall	.-268    	; 0x170 <RingBuffer_Insert>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 27c:	8f b7       	in	r24, 0x3f	; 63
    cli();
 27e:	f8 94       	cli
				Count = Buffer->Count;
 280:	c0 91 9d 01 	lds	r28, 0x019D	; 0x80019d <USARTtoUSB_Buffer+0x84>
    SREG = *__s;
 284:	8f bf       	out	0x3f, r24	; 63
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > BUFFER_NEARLY_FULL))
 286:	a8 99       	sbic	0x15, 0	; 21
 288:	0e c0       	rjmp	.+28     	; 0x2a6 <main+0xb0>
 28a:	c1 36       	cpi	r28, 0x61	; 97
 28c:	60 f4       	brcc	.+24     	; 0x2a6 <main+0xb0>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 28e:	9f b7       	in	r25, 0x3f	; 63
    cli();
 290:	f8 94       	cli
				Count = Buffer->Count;
 292:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <USBtoUSART_Buffer+0x84>
    SREG = *__s;
 296:	9f bf       	out	0x3f, r25	; 63
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
 298:	81 11       	cpse	r24, r1
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 29a:	11 c0       	rjmp	.+34     	; 0x2be <main+0xc8>
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
 2a0:	05 d6       	rcall	.+3082   	; 0xeac <CDC_Device_USBTask>
 2a2:	fa d4       	rcall	.+2548   	; 0xc98 <USB_USBTask>
	{
 2a4:	db cf       	rjmp	.-74     	; 0x25c <main+0x66>
			while (BufferCount--)
 2a6:	a8 9a       	sbi	0x15, 0	; 21
 2a8:	cc 23       	and	r28, r28
				CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
 2aa:	89 f3       	breq	.-30     	; 0x28e <main+0x98>
 2ac:	89 e1       	ldi	r24, 0x19	; 25
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	42 df       	rcall	.-380    	; 0x136 <RingBuffer_Remove>
 2b2:	68 2f       	mov	r22, r24
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	ab d5       	rcall	.+2902   	; 0xe10 <CDC_Device_SendByte>
 2ba:	c1 50       	subi	r28, 0x01	; 1
			Serial_TxByte(RingBuffer_Remove(&USBtoUSART_Buffer));
 2bc:	f5 cf       	rjmp	.-22     	; 0x2a8 <main+0xb2>
 2be:	8e e9       	ldi	r24, 0x9E	; 158
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	39 df       	rcall	.-398    	; 0x136 <RingBuffer_Remove>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
 2c4:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
 2c8:	95 ff       	sbrs	r25, 5
 2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <main+0xce>
				UDR1 = DataByte;
 2cc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
			}
 2d0:	e5 cf       	rjmp	.-54     	; 0x29c <main+0xa6>

000002d2 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	58 c5       	rjmp	.+2736   	; 0xd88 <CDC_Device_ConfigureEndpoints>

000002d8 <EVENT_USB_Device_UnhandledControlRequest>:
}

/** Event handler for the library USB Unhandled Control Request event. */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	ef c4       	rjmp	.+2526   	; 0xcbc <CDC_Device_ProcessControlRequest>

000002de <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo)
{
 2de:	8f 92       	push	r8
 2e0:	9f 92       	push	r9
 2e2:	af 92       	push	r10
 2e4:	bf 92       	push	r11
 2e6:	ff 92       	push	r15
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <EVENT_CDC_Device_LineEncodingChanged+0x14>
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <EVENT_CDC_Device_LineEncodingChanged+0x16>
 2f4:	0f 92       	push	r0
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	8c 01       	movw	r16, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 2fc:	dc 01       	movw	r26, r24
 2fe:	54 96       	adiw	r26, 0x14	; 20
 300:	8c 91       	ld	r24, X
 302:	90 e3       	ldi	r25, 0x30	; 48
 304:	f9 2e       	mov	r15, r25
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	29 f0       	breq	.+10     	; 0x314 <__stack+0x15>
	{
	case CDC_PARITY_Odd:
		ConfigMask = ((1 << UPM11) | (1 << UPM10));
		break;
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
 30a:	20 e2       	ldi	r18, 0x20	; 32
 30c:	f2 2e       	mov	r15, r18
	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 30e:	82 30       	cpi	r24, 0x02	; 2
 310:	09 f0       	breq	.+2      	; 0x314 <__stack+0x15>
	uint8_t ConfigMask = 0;
 312:	f1 2c       	mov	r15, r1
		break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
 314:	f8 01       	movw	r30, r16
 316:	83 89       	ldd	r24, Z+19	; 0x13
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	11 f4       	brne	.+4      	; 0x320 <__stack+0x21>
		ConfigMask |= (1 << USBS1);
 31c:	68 94       	set
 31e:	f3 f8       	bld	r15, 3

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
 320:	d8 01       	movw	r26, r16
 322:	55 96       	adiw	r26, 0x15	; 21
 324:	8c 91       	ld	r24, X
 326:	87 30       	cpi	r24, 0x07	; 7
 328:	09 f4       	brne	.+2      	; 0x32c <__stack+0x2d>
 32a:	53 c0       	rjmp	.+166    	; 0x3d2 <__stack+0xd3>
 32c:	88 30       	cpi	r24, 0x08	; 8
 32e:	09 f4       	brne	.+2      	; 0x332 <__stack+0x33>
 330:	53 c0       	rjmp	.+166    	; 0x3d8 <__stack+0xd9>
 332:	86 30       	cpi	r24, 0x06	; 6
 334:	11 f4       	brne	.+4      	; 0x33a <__stack+0x3b>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
 336:	68 94       	set
 338:	f1 f8       	bld	r15, 1
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
 33a:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
	UCSR1A = 0;
 33e:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
	UCSR1C = 0;
 342:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
 346:	f8 01       	movw	r30, r16
 348:	27 85       	ldd	r18, Z+15	; 0x0f
 34a:	30 89       	ldd	r19, Z+16	; 0x10
 34c:	41 89       	ldd	r20, Z+17	; 0x11
 34e:	52 89       	ldd	r21, Z+18	; 0x12
 350:	21 15       	cp	r18, r1
 352:	f1 ee       	ldi	r31, 0xE1	; 225
 354:	3f 07       	cpc	r19, r31
 356:	41 05       	cpc	r20, r1
 358:	51 05       	cpc	r21, r1
 35a:	09 f4       	brne	.+2      	; 0x35e <__stack+0x5f>
 35c:	41 c0       	rjmp	.+130    	; 0x3e0 <__stack+0xe1>
				? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
				: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 35e:	49 01       	movw	r8, r18
 360:	5a 01       	movw	r10, r20
 362:	b6 94       	lsr	r11
 364:	a7 94       	ror	r10
 366:	97 94       	ror	r9
 368:	87 94       	ror	r8
 36a:	d5 01       	movw	r26, r10
 36c:	c4 01       	movw	r24, r8
 36e:	80 58       	subi	r24, 0x80	; 128
 370:	9b 47       	sbci	r25, 0x7B	; 123
 372:	a1 4e       	sbci	r26, 0xE1	; 225
 374:	bf 4f       	sbci	r27, 0xFF	; 255
 376:	89 83       	std	Y+1, r24	; 0x01
 378:	9a 83       	std	Y+2, r25	; 0x02
 37a:	ab 83       	std	Y+3, r26	; 0x03
 37c:	bc 83       	std	Y+4, r27	; 0x04
 37e:	bc 01       	movw	r22, r24
 380:	cd 01       	movw	r24, r26
 382:	cd d5       	rcall	.+2970   	; 0xf1e <__udivmodsi4>
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
 384:	21 50       	subi	r18, 0x01	; 1
 386:	31 09       	sbc	r19, r1
 388:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
 38c:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>

	UCSR1C = ConfigMask;
 390:	f0 92 ca 00 	sts	0x00CA, r15	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
 394:	f8 01       	movw	r30, r16
 396:	87 85       	ldd	r24, Z+15	; 0x0f
 398:	90 89       	ldd	r25, Z+16	; 0x10
 39a:	a1 89       	ldd	r26, Z+17	; 0x11
 39c:	b2 89       	ldd	r27, Z+18	; 0x12
 39e:	81 15       	cp	r24, r1
 3a0:	91 4e       	sbci	r25, 0xE1	; 225
 3a2:	a1 05       	cpc	r26, r1
 3a4:	b1 05       	cpc	r27, r1
 3a6:	f9 f0       	breq	.+62     	; 0x3e6 <__stack+0xe7>
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 3ae:	88 e9       	ldi	r24, 0x98	; 152
 3b0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
}
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	ff 90       	pop	r15
 3c8:	bf 90       	pop	r11
 3ca:	af 90       	pop	r10
 3cc:	9f 90       	pop	r9
 3ce:	8f 90       	pop	r8
 3d0:	08 95       	ret
		ConfigMask |= (1 << UCSZ11);
 3d2:	68 94       	set
 3d4:	f2 f8       	bld	r15, 2
		break;
 3d6:	b1 cf       	rjmp	.-158    	; 0x33a <__stack+0x3b>
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
 3d8:	bf 2d       	mov	r27, r15
 3da:	b6 60       	ori	r27, 0x06	; 6
 3dc:	fb 2e       	mov	r15, r27
		break;
 3de:	ad cf       	rjmp	.-166    	; 0x33a <__stack+0x3b>
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
 3e0:	20 e1       	ldi	r18, 0x10	; 16
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	d1 cf       	rjmp	.-94     	; 0x388 <__stack+0x89>
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	e0 cf       	rjmp	.-64     	; 0x3aa <__stack+0xab>

000003ea <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 93       	push	r18
 3f6:	3f 93       	push	r19
 3f8:	4f 93       	push	r20
 3fa:	5f 93       	push	r21
 3fc:	6f 93       	push	r22
 3fe:	7f 93       	push	r23
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	af 93       	push	r26
 406:	bf 93       	push	r27
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 40c:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>

	if (USB_DeviceState == DEVICE_STATE_Configured)
 410:	8e b3       	in	r24, 0x1e	; 30
 412:	84 30       	cpi	r24, 0x04	; 4
 414:	19 f4       	brne	.+6      	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
 416:	89 e1       	ldi	r24, 0x19	; 25
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	aa de       	rcall	.-684    	; 0x170 <RingBuffer_Insert>
}
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	7f 91       	pop	r23
 42a:	6f 91       	pop	r22
 42c:	5f 91       	pop	r21
 42e:	4f 91       	pop	r20
 430:	3f 91       	pop	r19
 432:	2f 91       	pop	r18
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <EVENT_CDC_Device_ControLineStateChanged>:
/** Event handler for the CDC Class driver Host-to-Device Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo)
{
 43e:	fc 01       	movw	r30, r24
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
	if (CurrentDTRState)
 440:	85 85       	ldd	r24, Z+13	; 0x0d
 442:	80 ff       	sbrs	r24, 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <EVENT_CDC_Device_ControLineStateChanged+0xc>
	{
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
 446:	5f 98       	cbi	0x0b, 7	; 11
 448:	08 95       	ret
	}
	else
	{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
 44a:	5f 9a       	sbi	0x0b, 7	; 11
		if (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 1200)
 44c:	87 85       	ldd	r24, Z+15	; 0x0f
 44e:	90 89       	ldd	r25, Z+16	; 0x10
 450:	a1 89       	ldd	r26, Z+17	; 0x11
 452:	b2 89       	ldd	r27, Z+18	; 0x12
 454:	80 3b       	cpi	r24, 0xB0	; 176
 456:	94 40       	sbci	r25, 0x04	; 4
 458:	a1 05       	cpc	r26, r1
 45a:	b1 05       	cpc	r27, r1
 45c:	c1 f4       	brne	.+48     	; 0x48e <EVENT_CDC_Device_ControLineStateChanged+0x50>
		{
			jmpToBootloader = JUMP;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e8       	ldi	r25, 0x80	; 128
 462:	ad ea       	ldi	r26, 0xAD	; 173
 464:	be ed       	ldi	r27, 0xDE	; 222
 466:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <jmpToBootloader>
 46a:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <jmpToBootloader+0x1>
 46e:	a0 93 31 02 	sts	0x0231, r26	; 0x800231 <jmpToBootloader+0x2>
 472:	b0 93 32 02 	sts	0x0232, r27	; 0x800232 <jmpToBootloader+0x3>
			cli();
 476:	f8 94       	cli
		__asm__ __volatile__ (
 478:	88 e1       	ldi	r24, 0x18	; 24
 47a:	98 e0       	ldi	r25, 0x08	; 8
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	a8 95       	wdr
 482:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 486:	0f be       	out	0x3f, r0	; 63
 488:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
			wdt_enable(WDTO_15MS);
			for (;;)
 48c:	ff cf       	rjmp	.-2      	; 0x48c <EVENT_CDC_Device_ControLineStateChanged+0x4e>
			{
			}
		}
	}
}
 48e:	08 95       	ret

00000490 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    void** const DescriptorAddress)
{
 490:	9c 01       	movw	r18, r24
 492:	da 01       	movw	r26, r20
	const uint8_t  DescriptorType   = (wValue >> 8);
 494:	83 2f       	mov	r24, r19
 496:	99 27       	eor	r25, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	91 05       	cpc	r25, r1
 49c:	29 f1       	breq	.+74     	; 0x4e8 <CALLBACK_USB_GetDescriptor+0x58>
 49e:	83 30       	cpi	r24, 0x03	; 3
 4a0:	91 05       	cpc	r25, r1
 4a2:	49 f0       	breq	.+18     	; 0x4b6 <CALLBACK_USB_GetDescriptor+0x26>
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	91 f4       	brne	.+36     	; 0x4cc <CALLBACK_USB_GetDescriptor+0x3c>
 4a8:	82 e1       	ldi	r24, 0x12	; 18
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	2c ee       	ldi	r18, 0xEC	; 236
 4ae:	30 e0       	ldi	r19, 0x00	; 0
			}
			
			break;
	}
	
	*DescriptorAddress = Address;
 4b0:	2d 93       	st	X+, r18
 4b2:	3c 93       	st	X, r19
	return Size;
}
 4b4:	08 95       	ret
			switch (DescriptorNumber)
 4b6:	c9 01       	movw	r24, r18
 4b8:	99 27       	eor	r25, r25
 4ba:	21 30       	cpi	r18, 0x01	; 1
 4bc:	61 f0       	breq	.+24     	; 0x4d6 <CALLBACK_USB_GetDescriptor+0x46>
 4be:	82 30       	cpi	r24, 0x02	; 2
 4c0:	91 05       	cpc	r25, r1
 4c2:	79 f0       	breq	.+30     	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x52>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 4c4:	ea ea       	ldi	r30, 0xAA	; 170
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	89 2b       	or	r24, r25
 4ca:	39 f0       	breq	.+14     	; 0x4da <CALLBACK_USB_GetDescriptor+0x4a>
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	ed cf       	rjmp	.-38     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x20>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 4d6:	e6 e7       	ldi	r30, 0x76	; 118
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	84 91       	lpm	r24, Z
 4dc:	90 e0       	ldi	r25, 0x00	; 0
					Address = (void*)&ManufacturerString;
 4de:	9f 01       	movw	r18, r30
					break;
 4e0:	e7 cf       	rjmp	.-50     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x20>
					Size    = pgm_read_byte(&ProductString.Header.Size);
 4e2:	e4 e7       	ldi	r30, 0x74	; 116
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	f9 cf       	rjmp	.-14     	; 0x4da <CALLBACK_USB_GetDescriptor+0x4a>
			Size    = sizeof(USB_Descriptor_Configuration_t);
 4e8:	8e e3       	ldi	r24, 0x3E	; 62
 4ea:	90 e0       	ldi	r25, 0x00	; 0
			Address = (void*)&ConfigurationDescriptor;
 4ec:	2e ea       	ldi	r18, 0xAE	; 174
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	df cf       	rjmp	.-66     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x20>

000004f2 <Endpoint_BytesToEPSizeMaskDynamic>:
#if !defined(FIXED_CONTROL_ENDPOINT_SIZE)
uint8_t USB_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
 4f2:	ac 01       	movw	r20, r24
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 4f4:	28 e0       	ldi	r18, 0x08	; 8
 4f6:	30 e0       	ldi	r19, 0x00	; 0
				uint8_t  MaskVal    = 0;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
				
				while (CheckBytes < Bytes)
 4fa:	24 17       	cp	r18, r20
 4fc:	35 07       	cpc	r19, r21
 4fe:	18 f0       	brcs	.+6      	; 0x506 <Endpoint_BytesToEPSizeMaskDynamic+0x14>
	return Endpoint_BytesToEPSizeMask(Size);
}
 500:	82 95       	swap	r24
 502:	80 7f       	andi	r24, 0xF0	; 240
 504:	08 95       	ret
				{
					MaskVal++;
 506:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
 508:	22 0f       	add	r18, r18
 50a:	33 1f       	adc	r19, r19
 50c:	f6 cf       	rjmp	.-20     	; 0x4fa <Endpoint_BytesToEPSizeMaskDynamic+0x8>

0000050e <Endpoint_ConfigureEndpoint_Prv>:
					UENUM = EndpointNumber;
 50e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				UECONX |= (1 << EPEN);
 512:	eb ee       	ldi	r30, 0xEB	; 235
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	81 60       	ori	r24, 0x01	; 1
 51a:	80 83       	st	Z, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 51c:	ed ee       	ldi	r30, 0xED	; 237
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	10 82       	st	Z, r1

	UECFG0X = UECFG0XData;
 522:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
	UECFG1X = UECFG1XData;
 526:	40 83       	st	Z, r20
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 528:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>

	return Endpoint_IsConfigured();
}
 52c:	88 1f       	adc	r24, r24
 52e:	88 27       	eor	r24, r24
 530:	88 1f       	adc	r24, r24
 532:	08 95       	ret

00000534 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
 534:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__EEPROM_REGION_LENGTH__+0x7f00f4>

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 538:	80 e0       	ldi	r24, 0x00	; 0
					UENUM = EndpointNumber;
 53a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
 53e:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
		UEINTX  = 0;
 542:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		UECFG1X = 0;
 546:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
				UECONX &= ~(1 << EPEN);
 54a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 54e:	9e 7f       	andi	r25, 0xFE	; 254
 550:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 554:	8f 5f       	subi	r24, 0xFF	; 255
 556:	85 30       	cpi	r24, 0x05	; 5
 558:	81 f7       	brne	.-32     	; 0x53a <Endpoint_ClearEndpoints+0x6>
		Endpoint_DisableEndpoint();
	}
}
 55a:	08 95       	ret

0000055c <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 55c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <USB_ControlRequest>
 560:	87 ff       	sbrs	r24, 7
 562:	11 c0       	rjmp	.+34     	; 0x586 <Endpoint_ClearStatusStage+0x2a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 564:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 568:	82 ff       	sbrs	r24, 2
 56a:	06 c0       	rjmp	.+12     	; 0x578 <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 56c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 570:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 572:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
 576:	03 c0       	rjmp	.+6      	; 0x57e <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 578:	8e b3       	in	r24, 0x1e	; 30
 57a:	81 11       	cpse	r24, r1
 57c:	f3 cf       	rjmp	.-26     	; 0x564 <Endpoint_ClearStatusStage+0x8>
			  return;
		}
		
		Endpoint_ClearIN();
	}
}
 57e:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 580:	8e b3       	in	r24, 0x1e	; 30
 582:	88 23       	and	r24, r24
 584:	e1 f3       	breq	.-8      	; 0x57e <Endpoint_ClearStatusStage+0x22>
				return ((UEINTX & (1 << TXINI))  ? true : false);
 586:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		while (!(Endpoint_IsINReady()))
 58a:	80 ff       	sbrs	r24, 0
 58c:	f9 cf       	rjmp	.-14     	; 0x580 <Endpoint_ClearStatusStage+0x24>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 58e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 592:	8e 77       	andi	r24, 0x7E	; 126
 594:	ee cf       	rjmp	.-36     	; 0x572 <Endpoint_ClearStatusStage+0x16>

00000596 <Endpoint_WaitUntilReady>:

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
 596:	95 e6       	ldi	r25, 0x65	; 101
				return (UECFG0X & ENDPOINT_DIR_IN);
 598:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 59c:	82 2f       	mov	r24, r18
 59e:	81 70       	andi	r24, 0x01	; 1
 5a0:	20 ff       	sbrs	r18, 0
 5a2:	06 c0       	rjmp	.+12     	; 0x5b0 <Endpoint_WaitUntilReady+0x1a>
				return ((UEINTX & (1 << TXINI))  ? true : false);
 5a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		{
			if (Endpoint_IsINReady())
 5a8:	80 ff       	sbrs	r24, 0
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <Endpoint_WaitUntilReady+0x22>
			  return ENDPOINT_READYWAIT_NoError;
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5b0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 5b4:	22 fd       	sbrc	r18, 2
 5b6:	1c c0       	rjmp	.+56     	; 0x5f0 <Endpoint_WaitUntilReady+0x5a>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 5b8:	8e b3       	in	r24, 0x1e	; 30
 5ba:	88 23       	and	r24, r24
 5bc:	a1 f0       	breq	.+40     	; 0x5e6 <Endpoint_WaitUntilReady+0x50>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 5be:	8e b3       	in	r24, 0x1e	; 30
 5c0:	85 30       	cpi	r24, 0x05	; 5
 5c2:	99 f0       	breq	.+38     	; 0x5ea <Endpoint_WaitUntilReady+0x54>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 5c4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 5c8:	85 fd       	sbrc	r24, 5
 5ca:	11 c0       	rjmp	.+34     	; 0x5ee <Endpoint_WaitUntilReady+0x58>
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
 5cc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 5d0:	82 ff       	sbrs	r24, 2
 5d2:	e2 cf       	rjmp	.-60     	; 0x598 <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
 5d4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 5d8:	8b 7f       	andi	r24, 0xFB	; 251
 5da:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>

			if (!(TimeoutMSRem--))
 5de:	91 50       	subi	r25, 0x01	; 1
 5e0:	d9 f6       	brne	.-74     	; 0x598 <Endpoint_WaitUntilReady+0x2>
			  return ENDPOINT_READYWAIT_Timeout;
 5e2:	84 e0       	ldi	r24, 0x04	; 4
 5e4:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 5e6:	82 e0       	ldi	r24, 0x02	; 2
 5e8:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
 5ea:	83 e0       	ldi	r24, 0x03	; 3
 5ec:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
 5f0:	08 95       	ret

000005f2 <Endpoint_Write_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 5f2:	9b 01       	movw	r18, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
 5f4:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <USB_ControlRequest+0x6>
 5f8:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <USB_ControlRequest+0x7>
 5fc:	46 17       	cp	r20, r22
 5fe:	57 07       	cpc	r21, r23
 600:	98 f0       	brcs	.+38     	; 0x628 <Endpoint_Write_Control_Stream_LE+0x36>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 602:	67 2b       	or	r22, r23
 604:	29 f4       	brne	.+10     	; 0x610 <Endpoint_Write_Control_Stream_LE+0x1e>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 606:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 60a:	4e 77       	andi	r20, 0x7E	; 126
 60c:	40 93 e8 00 	sts	0x00E8, r20	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 610:	50 e0       	ldi	r21, 0x00	; 0
	while (Length || LastPacketFull)
 612:	21 15       	cp	r18, r1
 614:	31 05       	cpc	r19, r1
 616:	51 f4       	brne	.+20     	; 0x62c <Endpoint_Write_Control_Stream_LE+0x3a>
 618:	51 11       	cpse	r21, r1
 61a:	08 c0       	rjmp	.+16     	; 0x62c <Endpoint_Write_Control_Stream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 61c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
 620:	82 ff       	sbrs	r24, 2
 622:	30 c0       	rjmp	.+96     	; 0x684 <Endpoint_Write_Control_Stream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	08 95       	ret
 628:	9a 01       	movw	r18, r20
 62a:	f2 cf       	rjmp	.-28     	; 0x610 <Endpoint_Write_Control_Stream_LE+0x1e>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 62c:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsSETUPReceived())
 630:	43 fd       	sbrc	r20, 3
 632:	30 c0       	rjmp	.+96     	; 0x694 <Endpoint_Write_Control_Stream_LE+0xa2>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 634:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsOUTReceived())
 638:	42 fd       	sbrc	r20, 2
 63a:	f0 cf       	rjmp	.-32     	; 0x61c <Endpoint_Write_Control_Stream_LE+0x2a>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 63c:	4e b3       	in	r20, 0x1e	; 30
 63e:	44 23       	and	r20, r20
 640:	59 f1       	breq	.+86     	; 0x698 <Endpoint_Write_Control_Stream_LE+0xa6>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 642:	4e b3       	in	r20, 0x1e	; 30
 644:	45 30       	cpi	r20, 0x05	; 5
 646:	21 f1       	breq	.+72     	; 0x690 <Endpoint_Write_Control_Stream_LE+0x9e>
				return ((UEINTX & (1 << TXINI))  ? true : false);
 648:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
 64c:	40 ff       	sbrs	r20, 0
 64e:	e1 cf       	rjmp	.-62     	; 0x612 <Endpoint_Write_Control_Stream_LE+0x20>
					return UEBCLX;
 650:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 654:	21 15       	cp	r18, r1
 656:	31 05       	cpc	r19, r1
 658:	11 f0       	breq	.+4      	; 0x65e <Endpoint_Write_Control_Stream_LE+0x6c>
 65a:	48 30       	cpi	r20, 0x08	; 8
 65c:	50 f0       	brcs	.+20     	; 0x672 <Endpoint_Write_Control_Stream_LE+0x80>
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 65e:	51 e0       	ldi	r21, 0x01	; 1
 660:	48 30       	cpi	r20, 0x08	; 8
 662:	09 f0       	breq	.+2      	; 0x666 <Endpoint_Write_Control_Stream_LE+0x74>
 664:	50 e0       	ldi	r21, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 666:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 66a:	4e 77       	andi	r20, 0x7E	; 126
 66c:	40 93 e8 00 	sts	0x00E8, r20	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
 670:	d0 cf       	rjmp	.-96     	; 0x612 <Endpoint_Write_Control_Stream_LE+0x20>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 672:	fc 01       	movw	r30, r24
 674:	81 91       	ld	r24, Z+
				UEDATX = Byte;
 676:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Length--;
 67a:	21 50       	subi	r18, 0x01	; 1
 67c:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
 67e:	4f 5f       	subi	r20, 0xFF	; 255
				TEMPLATE_TRANSFER_BYTE(DataStream);
 680:	cf 01       	movw	r24, r30
 682:	e8 cf       	rjmp	.-48     	; 0x654 <Endpoint_Write_Control_Stream_LE+0x62>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 684:	8e b3       	in	r24, 0x1e	; 30
 686:	88 23       	and	r24, r24
 688:	39 f0       	breq	.+14     	; 0x698 <Endpoint_Write_Control_Stream_LE+0xa6>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 68a:	8e b3       	in	r24, 0x1e	; 30
 68c:	85 30       	cpi	r24, 0x05	; 5
 68e:	31 f6       	brne	.-116    	; 0x61c <Endpoint_Write_Control_Stream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 690:	83 e0       	ldi	r24, 0x03	; 3
}
 692:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 698:	82 e0       	ldi	r24, 0x02	; 2
 69a:	08 95       	ret

0000069c <Endpoint_Write_Control_PStream_LE>:
{
 69c:	9b 01       	movw	r18, r22
	if (Length > USB_ControlRequest.wLength)
 69e:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <USB_ControlRequest+0x6>
 6a2:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <USB_ControlRequest+0x7>
 6a6:	46 17       	cp	r20, r22
 6a8:	57 07       	cpc	r21, r23
 6aa:	98 f0       	brcs	.+38     	; 0x6d2 <Endpoint_Write_Control_PStream_LE+0x36>
	else if (!(Length))
 6ac:	67 2b       	or	r22, r23
 6ae:	29 f4       	brne	.+10     	; 0x6ba <Endpoint_Write_Control_PStream_LE+0x1e>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6b0:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 6b4:	4e 77       	andi	r20, 0x7E	; 126
 6b6:	40 93 e8 00 	sts	0x00E8, r20	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 6ba:	50 e0       	ldi	r21, 0x00	; 0
	while (Length || LastPacketFull)
 6bc:	21 15       	cp	r18, r1
 6be:	31 05       	cpc	r19, r1
 6c0:	51 f4       	brne	.+20     	; 0x6d6 <Endpoint_Write_Control_PStream_LE+0x3a>
 6c2:	51 11       	cpse	r21, r1
 6c4:	08 c0       	rjmp	.+16     	; 0x6d6 <Endpoint_Write_Control_PStream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsOUTReceived()))
 6ca:	82 ff       	sbrs	r24, 2
 6cc:	31 c0       	rjmp	.+98     	; 0x730 <Endpoint_Write_Control_PStream_LE+0x94>
	return ENDPOINT_RWCSTREAM_NoError;
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	08 95       	ret
 6d2:	9a 01       	movw	r18, r20
 6d4:	f2 cf       	rjmp	.-28     	; 0x6ba <Endpoint_Write_Control_PStream_LE+0x1e>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6d6:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsSETUPReceived())
 6da:	43 fd       	sbrc	r20, 3
 6dc:	31 c0       	rjmp	.+98     	; 0x740 <Endpoint_Write_Control_PStream_LE+0xa4>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6de:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsOUTReceived())
 6e2:	42 fd       	sbrc	r20, 2
 6e4:	f0 cf       	rjmp	.-32     	; 0x6c6 <Endpoint_Write_Control_PStream_LE+0x2a>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6e6:	4e b3       	in	r20, 0x1e	; 30
 6e8:	44 23       	and	r20, r20
 6ea:	61 f1       	breq	.+88     	; 0x744 <Endpoint_Write_Control_PStream_LE+0xa8>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6ec:	4e b3       	in	r20, 0x1e	; 30
 6ee:	45 30       	cpi	r20, 0x05	; 5
 6f0:	29 f1       	breq	.+74     	; 0x73c <Endpoint_Write_Control_PStream_LE+0xa0>
				return ((UEINTX & (1 << TXINI))  ? true : false);
 6f2:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
 6f6:	40 ff       	sbrs	r20, 0
 6f8:	e1 cf       	rjmp	.-62     	; 0x6bc <Endpoint_Write_Control_PStream_LE+0x20>
					return UEBCLX;
 6fa:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 6fe:	fc 01       	movw	r30, r24
 700:	cf 01       	movw	r24, r30
 702:	21 15       	cp	r18, r1
 704:	31 05       	cpc	r19, r1
 706:	11 f0       	breq	.+4      	; 0x70c <Endpoint_Write_Control_PStream_LE+0x70>
 708:	48 30       	cpi	r20, 0x08	; 8
 70a:	50 f0       	brcs	.+20     	; 0x720 <Endpoint_Write_Control_PStream_LE+0x84>
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 70c:	51 e0       	ldi	r21, 0x01	; 1
 70e:	48 30       	cpi	r20, 0x08	; 8
 710:	09 f0       	breq	.+2      	; 0x714 <Endpoint_Write_Control_PStream_LE+0x78>
 712:	50 e0       	ldi	r21, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 714:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 718:	4e 77       	andi	r20, 0x7E	; 126
 71a:	40 93 e8 00 	sts	0x00E8, r20	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
 71e:	ce cf       	rjmp	.-100    	; 0x6bc <Endpoint_Write_Control_PStream_LE+0x20>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 720:	84 91       	lpm	r24, Z
				UEDATX = Byte;
 722:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Length--;
 726:	21 50       	subi	r18, 0x01	; 1
 728:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
 72a:	4f 5f       	subi	r20, 0xFF	; 255
 72c:	31 96       	adiw	r30, 0x01	; 1
 72e:	e8 cf       	rjmp	.-48     	; 0x700 <Endpoint_Write_Control_PStream_LE+0x64>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 730:	8e b3       	in	r24, 0x1e	; 30
 732:	88 23       	and	r24, r24
 734:	39 f0       	breq	.+14     	; 0x744 <Endpoint_Write_Control_PStream_LE+0xa8>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 736:	8e b3       	in	r24, 0x1e	; 30
 738:	85 30       	cpi	r24, 0x05	; 5
 73a:	29 f6       	brne	.-118    	; 0x6c6 <Endpoint_Write_Control_PStream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 73c:	83 e0       	ldi	r24, 0x03	; 3
}
 73e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	08 95       	ret

00000748 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
 748:	9b 01       	movw	r18, r22
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
 74a:	67 2b       	or	r22, r23
 74c:	29 f4       	brne	.+10     	; 0x758 <Endpoint_Read_Control_Stream_LE+0x10>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 74e:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 752:	4b 77       	andi	r20, 0x7B	; 123
 754:	40 93 e8 00 	sts	0x00E8, r20	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	  Endpoint_ClearOUT();
	
	while (Length)
 758:	21 15       	cp	r18, r1
 75a:	31 05       	cpc	r19, r1
 75c:	31 f4       	brne	.+12     	; 0x76a <Endpoint_Read_Control_Stream_LE+0x22>
				return ((UEINTX & (1 << TXINI))  ? true : false);
 75e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
 762:	80 ff       	sbrs	r24, 0
 764:	24 c0       	rjmp	.+72     	; 0x7ae <Endpoint_Read_Control_Stream_LE+0x66>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	08 95       	ret
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 76a:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsSETUPReceived())
 76e:	43 fd       	sbrc	r20, 3
 770:	26 c0       	rjmp	.+76     	; 0x7be <Endpoint_Read_Control_Stream_LE+0x76>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 772:	4e b3       	in	r20, 0x1e	; 30
 774:	44 23       	and	r20, r20
 776:	29 f1       	breq	.+74     	; 0x7c2 <Endpoint_Read_Control_Stream_LE+0x7a>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 778:	4e b3       	in	r20, 0x1e	; 30
 77a:	45 30       	cpi	r20, 0x05	; 5
 77c:	f1 f0       	breq	.+60     	; 0x7ba <Endpoint_Read_Control_Stream_LE+0x72>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 77e:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsOUTReceived())
 782:	42 ff       	sbrs	r20, 2
 784:	e9 cf       	rjmp	.-46     	; 0x758 <Endpoint_Read_Control_Stream_LE+0x10>
					return UEBCLX;
 786:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 78a:	fc 01       	movw	r30, r24
			while (Length && Endpoint_BytesInEndpoint())
 78c:	41 11       	cpse	r20, r1
 78e:	07 c0       	rjmp	.+14     	; 0x79e <Endpoint_Read_Control_Stream_LE+0x56>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 790:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 794:	8b 77       	andi	r24, 0x7B	; 123
 796:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
 79a:	cf 01       	movw	r24, r30
 79c:	dd cf       	rjmp	.-70     	; 0x758 <Endpoint_Read_Control_Stream_LE+0x10>
				return UEDATX;
 79e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7a2:	81 93       	st	Z+, r24
				Length--;
 7a4:	21 50       	subi	r18, 0x01	; 1
 7a6:	31 09       	sbc	r19, r1
			while (Length && Endpoint_BytesInEndpoint())
 7a8:	99 f3       	breq	.-26     	; 0x790 <Endpoint_Read_Control_Stream_LE+0x48>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7aa:	cf 01       	movw	r24, r30
 7ac:	ec cf       	rjmp	.-40     	; 0x786 <Endpoint_Read_Control_Stream_LE+0x3e>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 7ae:	8e b3       	in	r24, 0x1e	; 30
 7b0:	88 23       	and	r24, r24
 7b2:	39 f0       	breq	.+14     	; 0x7c2 <Endpoint_Read_Control_Stream_LE+0x7a>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 7b4:	8e b3       	in	r24, 0x1e	; 30
 7b6:	85 30       	cpi	r24, 0x05	; 5
 7b8:	91 f6       	brne	.-92     	; 0x75e <Endpoint_Read_Control_Stream_LE+0x16>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 7ba:	83 e0       	ldi	r24, 0x03	; 3
}
 7bc:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 7c2:	82 e0       	ldi	r24, 0x02	; 2
 7c4:	08 95       	ret

000007c6 <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
 7c6:	42 d0       	rcall	.+132    	; 0x84c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 7c8:	44 d0       	rcall	.+136    	; 0x852 <USB_INT_ClearAllInterrupts>
 7ca:	1e ba       	out	0x1e, r1	; 30
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
 7cc:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <USB_ConfigurationNumber>
	USB_ConfigurationNumber  = 0;
 7d0:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <USB_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 7d4:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <USB_CurrentlySelfPowered>
	#endif
	
	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 7d8:	84 e0       	ldi	r24, 0x04	; 4
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 7da:	89 bd       	out	0x29, r24	; 41
 7dc:	89 b5       	in	r24, 0x29	; 41
				PLLCSR |= (1 << PLLE);
 7de:	82 60       	ori	r24, 0x02	; 2
 7e0:	89 bd       	out	0x29, r24	; 41
 7e2:	09 b4       	in	r0, 0x29	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 7e4:	00 fe       	sbrs	r0, 0
 7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <USB_ResetInterface+0x1c>
 7e8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 7ec:	98 2f       	mov	r25, r24
				
				USBCON = (Temp & ~(1 << USBE));
 7ee:	9f 77       	andi	r25, 0x7F	; 127
 7f0:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 7f4:	80 68       	ori	r24, 0x80	; 128
				USBCON = (Temp |  (1 << USBE));
 7f6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 7fa:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__EEPROM_REGION_LENGTH__+0x7f0063>
				REGCR   &= ~(1 << REGDIS);
 7fe:	8e 7f       	andi	r24, 0xFE	; 254
 800:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__EEPROM_REGION_LENGTH__+0x7f0063>
 804:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON  &= ~(1 << FRZCLK);
 808:	8f 7d       	andi	r24, 0xDF	; 223
 80a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 80e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
				UDCON  &= ~(1 << DETACH);
 812:	8e 7f       	andi	r24, 0xFE	; 254
 814:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 818:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
 81c:	8e 7f       	andi	r24, 0xFE	; 254
 81e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 822:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	USB_INT_Enable(USB_INT_SUSPEND);
 826:	81 60       	ori	r24, 0x01	; 1
 828:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 82c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	USB_INT_Clear(USB_INT_EORSTI);
 830:	87 7f       	andi	r24, 0xF7	; 247
 832:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 836:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	USB_INT_Enable(USB_INT_EORSTI);
 83a:	88 60       	ori	r24, 0x08	; 8
 83c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 840:	08 95       	ret

00000842 <USB_Init>:
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
 842:	c1 df       	rcall	.-126    	; 0x7c6 <USB_ResetInterface>
	USB_IsInitialized = true;
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <USB_IsInitialized>
}
 84a:	08 95       	ret

0000084c <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 84c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	#endif
}
 850:	08 95       	ret

00000852 <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 852:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#endif
}
 856:	08 95       	ret

00000858 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 858:	1f 92       	push	r1
 85a:	0f 92       	push	r0
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	0f 92       	push	r0
 860:	11 24       	eor	r1, r1
 862:	2f 93       	push	r18
 864:	3f 93       	push	r19
 866:	4f 93       	push	r20
 868:	5f 93       	push	r21
 86a:	6f 93       	push	r22
 86c:	7f 93       	push	r23
 86e:	8f 93       	push	r24
 870:	9f 93       	push	r25
 872:	af 93       	push	r26
 874:	bf 93       	push	r27
 876:	ef 93       	push	r30
 878:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
 87a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 87e:	80 ff       	sbrs	r24, 0
 880:	1b c0       	rjmp	.+54     	; 0x8b8 <__vector_11+0x60>
 882:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 886:	80 ff       	sbrs	r24, 0
 888:	17 c0       	rjmp	.+46     	; 0x8b8 <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
 88a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 88e:	8e 7f       	andi	r24, 0xFE	; 254
 890:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>

		USB_INT_Disable(USB_INT_SUSPEND);
 894:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 898:	8e 7f       	andi	r24, 0xFE	; 254
 89a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Enable(USB_INT_WAKEUP);
 89e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8a2:	80 61       	ori	r24, 0x10	; 16
 8a4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				USBCON  |=  (1 << FRZCLK);
 8a8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 8ac:	80 62       	ori	r24, 0x20	; 32
 8ae:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				PLLCSR  = 0;
 8b2:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 8b4:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 8b6:	ef d1       	rcall	.+990    	; 0xc96 <USB_Event_Stub>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
 8b8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 8bc:	84 ff       	sbrs	r24, 4
 8be:	27 c0       	rjmp	.+78     	; 0x90e <__vector_11+0xb6>
 8c0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8c4:	84 ff       	sbrs	r24, 4
 8c6:	23 c0       	rjmp	.+70     	; 0x90e <__vector_11+0xb6>
				PLLCSR  = USB_PLL_PSC;
 8c8:	84 e0       	ldi	r24, 0x04	; 4
 8ca:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 8cc:	89 b5       	in	r24, 0x29	; 41
 8ce:	82 60       	ori	r24, 0x02	; 2
 8d0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 8d2:	09 b4       	in	r0, 0x29	; 41
 8d4:	00 fe       	sbrs	r0, 0
 8d6:	fd cf       	rjmp	.-6      	; 0x8d2 <__vector_11+0x7a>
				USBCON  &= ~(1 << FRZCLK);
 8d8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 8dc:	8f 7d       	andi	r24, 0xDF	; 223
 8de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
 8e2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 8e6:	8f 7e       	andi	r24, 0xEF	; 239
 8e8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>

		USB_INT_Disable(USB_INT_WAKEUP);
 8ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8f0:	8f 7e       	andi	r24, 0xEF	; 239
 8f2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Enable(USB_INT_SUSPEND);
 8f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8fa:	81 60       	ori	r24, 0x01	; 1
 8fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 900:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <USB_ConfigurationNumber>
 904:	81 11       	cpse	r24, r1
 906:	4d c0       	rjmp	.+154    	; 0x9a2 <__vector_11+0x14a>
 908:	81 e0       	ldi	r24, 0x01	; 1
		EVENT_USB_Device_Connect();
 90a:	8e bb       	out	0x1e, r24	; 30
 90c:	c4 d1       	rcall	.+904    	; 0xc96 <USB_Event_Stub>
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 90e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 912:	83 ff       	sbrs	r24, 3
 914:	27 c0       	rjmp	.+78     	; 0x964 <__vector_11+0x10c>
 916:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 91a:	83 ff       	sbrs	r24, 3
 91c:	23 c0       	rjmp	.+70     	; 0x964 <__vector_11+0x10c>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 91e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 922:	87 7f       	andi	r24, 0xF7	; 247
 924:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>

		USB_DeviceState         = DEVICE_STATE_Default;
 928:	82 e0       	ldi	r24, 0x02	; 2
 92a:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
 92c:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <USB_ConfigurationNumber>

		USB_INT_Clear(USB_INT_SUSPEND);
 930:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 934:	8e 7f       	andi	r24, 0xFE	; 254
 936:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_INT_Disable(USB_INT_SUSPEND);
 93a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 93e:	8e 7f       	andi	r24, 0xFE	; 254
 940:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Enable(USB_INT_WAKEUP);
 944:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 948:	80 61       	ori	r24, 0x10	; 16
 94a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>

		Endpoint_ClearEndpoints();
 94e:	f2 dd       	rcall	.-1052   	; 0x534 <Endpoint_ClearEndpoints>
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 950:	42 e0       	ldi	r20, 0x02	; 2
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	db dd       	rcall	.-1098   	; 0x50e <Endpoint_ConfigureEndpoint_Prv>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
 958:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 95c:	88 60       	ori	r24, 0x08	; 8
 95e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
		#endif

		EVENT_USB_Device_Reset();
 962:	99 d1       	rcall	.+818    	; 0xc96 <USB_Event_Stub>
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 964:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 968:	82 ff       	sbrs	r24, 2
 96a:	0a c0       	rjmp	.+20     	; 0x980 <__vector_11+0x128>
 96c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 970:	82 ff       	sbrs	r24, 2
 972:	06 c0       	rjmp	.+12     	; 0x980 <__vector_11+0x128>
	{
		USB_INT_Clear(USB_INT_SOFI);
 974:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 978:	8b 7f       	andi	r24, 0xFB	; 251
 97a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		
		EVENT_USB_Device_StartOfFrame();
 97e:	8b d1       	rcall	.+790    	; 0xc96 <USB_Event_Stub>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
 980:	ff 91       	pop	r31
 982:	ef 91       	pop	r30
 984:	bf 91       	pop	r27
 986:	af 91       	pop	r26
 988:	9f 91       	pop	r25
 98a:	8f 91       	pop	r24
 98c:	7f 91       	pop	r23
 98e:	6f 91       	pop	r22
 990:	5f 91       	pop	r21
 992:	4f 91       	pop	r20
 994:	3f 91       	pop	r19
 996:	2f 91       	pop	r18
 998:	0f 90       	pop	r0
 99a:	0f be       	out	0x3f, r0	; 63
 99c:	0f 90       	pop	r0
 99e:	1f 90       	pop	r1
 9a0:	18 95       	reti
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9a2:	84 e0       	ldi	r24, 0x04	; 4
 9a4:	b2 cf       	rjmp	.-156    	; 0x90a <__vector_11+0xb2>

000009a6 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 9a6:	1f 92       	push	r1
 9a8:	0f 92       	push	r0
 9aa:	0f b6       	in	r0, 0x3f	; 63
 9ac:	0f 92       	push	r0
 9ae:	11 24       	eor	r1, r1
 9b0:	ff 92       	push	r15
 9b2:	0f 93       	push	r16
 9b4:	1f 93       	push	r17
 9b6:	2f 93       	push	r18
 9b8:	3f 93       	push	r19
 9ba:	4f 93       	push	r20
 9bc:	5f 93       	push	r21
 9be:	6f 93       	push	r22
 9c0:	7f 93       	push	r23
 9c2:	8f 93       	push	r24
 9c4:	9f 93       	push	r25
 9c6:	af 93       	push	r26
 9c8:	bf 93       	push	r27
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	ef 93       	push	r30
 9d0:	ff 93       	push	r31
					return (UENUM & ENDPOINT_EPNUM_MASK);
 9d2:	c9 ee       	ldi	r28, 0xE9	; 233
 9d4:	d0 e0       	ldi	r29, 0x00	; 0
 9d6:	88 81       	ld	r24, Y
 9d8:	87 70       	andi	r24, 0x07	; 7
 9da:	f8 2e       	mov	r15, r24
					UENUM = EndpointNumber;
 9dc:	18 82       	st	Y, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint(); 

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
 9de:	00 ef       	ldi	r16, 0xF0	; 240
 9e0:	10 e0       	ldi	r17, 0x00	; 0
 9e2:	f8 01       	movw	r30, r16
 9e4:	80 81       	ld	r24, Z
 9e6:	87 7f       	andi	r24, 0xF7	; 247
 9e8:	80 83       	st	Z, r24
    sei();
 9ea:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
 9ec:	1d d0       	rcall	.+58     	; 0xa28 <USB_Device_ProcessControlRequest>
    cli();
 9ee:	f8 94       	cli
 9f0:	18 82       	st	Y, r1
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
 9f2:	f8 01       	movw	r30, r16
 9f4:	80 81       	ld	r24, Z
 9f6:	88 60       	ori	r24, 0x08	; 8
 9f8:	80 83       	st	Z, r24
 9fa:	f8 82       	st	Y, r15
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 9fc:	ff 91       	pop	r31
 9fe:	ef 91       	pop	r30
 a00:	df 91       	pop	r29
 a02:	cf 91       	pop	r28
 a04:	bf 91       	pop	r27
 a06:	af 91       	pop	r26
 a08:	9f 91       	pop	r25
 a0a:	8f 91       	pop	r24
 a0c:	7f 91       	pop	r23
 a0e:	6f 91       	pop	r22
 a10:	5f 91       	pop	r21
 a12:	4f 91       	pop	r20
 a14:	3f 91       	pop	r19
 a16:	2f 91       	pop	r18
 a18:	1f 91       	pop	r17
 a1a:	0f 91       	pop	r16
 a1c:	ff 90       	pop	r15
 a1e:	0f 90       	pop	r0
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	0f 90       	pop	r0
 a24:	1f 90       	pop	r1
 a26:	18 95       	reti

00000a28 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a28:	1f 93       	push	r17
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	cd b7       	in	r28, 0x3d	; 61
 a30:	de b7       	in	r29, 0x3e	; 62
 a32:	aa 97       	sbiw	r28, 0x2a	; 42
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	f8 94       	cli
 a38:	de bf       	out	0x3e, r29	; 62
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	cd bf       	out	0x3d, r28	; 61
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
 a3e:	86 e2       	ldi	r24, 0x26	; 38
 a40:	92 e0       	ldi	r25, 0x02	; 2
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 a42:	fc 01       	movw	r30, r24
 a44:	01 96       	adiw	r24, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 a46:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 a4a:	20 83       	st	Z, r18
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a4c:	22 e0       	ldi	r18, 0x02	; 2
 a4e:	8e 32       	cpi	r24, 0x2E	; 46
 a50:	92 07       	cpc	r25, r18
 a52:	b9 f7       	brne	.-18     	; 0xa42 <USB_Device_ProcessControlRequest+0x1a>
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a54:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <USB_ControlRequest>
	
	switch (USB_ControlRequest.bRequest)
 a58:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <USB_ControlRequest+0x1>
 a5c:	9a 30       	cpi	r25, 0x0A	; 10
 a5e:	08 f0       	brcs	.+2      	; 0xa62 <USB_Device_ProcessControlRequest+0x3a>
 a60:	04 c1       	rjmp	.+520    	; 0xc6a <USB_Device_ProcessControlRequest+0x242>
 a62:	e9 2f       	mov	r30, r25
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	e7 54       	subi	r30, 0x47	; 71
 a68:	f8 4f       	sbci	r31, 0xF8	; 248
 a6a:	7b c2       	rjmp	.+1270   	; 0xf62 <__tablejump2__>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a6c:	80 38       	cpi	r24, 0x80	; 128
 a6e:	81 f0       	breq	.+32     	; 0xa90 <USB_Device_ProcessControlRequest+0x68>
 a70:	82 38       	cpi	r24, 0x82	; 130
 a72:	09 f0       	breq	.+2      	; 0xa76 <USB_Device_ProcessControlRequest+0x4e>
 a74:	fa c0       	rjmp	.+500    	; 0xc6a <USB_Device_ProcessControlRequest+0x242>
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a76:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <USB_ControlRequest+0x4>
 a7a:	87 70       	andi	r24, 0x07	; 7
					UENUM = EndpointNumber;
 a7c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a80:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 a84:	85 fb       	bst	r24, 5
 a86:	88 27       	eor	r24, r24
 a88:	80 f9       	bld	r24, 0
					UENUM = EndpointNumber;
 a8a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			}
 a8e:	06 c0       	rjmp	.+12     	; 0xa9c <USB_Device_ProcessControlRequest+0x74>
	uint8_t CurrentStatus = 0;
 a90:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <USB_CurrentlySelfPowered>
			if (USB_RemoteWakeupEnabled)
 a94:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <USB_RemoteWakeupEnabled>
 a98:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a9a:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
 a9c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 aa0:	97 7f       	andi	r25, 0xF7	; 247
 aa2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 aa6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Word >> 8);
 aaa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 aae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 ab2:	8e 77       	andi	r24, 0x7E	; 126
 ab4:	ec c0       	rjmp	.+472    	; 0xc8e <USB_Device_ProcessControlRequest+0x266>
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ab6:	88 23       	and	r24, r24
 ab8:	09 f4       	brne	.+2      	; 0xabc <USB_Device_ProcessControlRequest+0x94>
 aba:	d9 c0       	rjmp	.+434    	; 0xc6e <USB_Device_ProcessControlRequest+0x246>
 abc:	82 30       	cpi	r24, 0x02	; 2
 abe:	09 f0       	breq	.+2      	; 0xac2 <USB_Device_ProcessControlRequest+0x9a>
 ac0:	d4 c0       	rjmp	.+424    	; 0xc6a <USB_Device_ProcessControlRequest+0x242>
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
 ac2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
 ac6:	81 11       	cpse	r24, r1
 ac8:	dd c0       	rjmp	.+442    	; 0xc84 <USB_Device_ProcessControlRequest+0x25c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 aca:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <USB_ControlRequest+0x4>
 ace:	87 70       	andi	r24, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
 ad0:	09 f4       	brne	.+2      	; 0xad4 <USB_Device_ProcessControlRequest+0xac>
 ad2:	3c c0       	rjmp	.+120    	; 0xb4c <USB_Device_ProcessControlRequest+0x124>
					UENUM = EndpointNumber;
 ad4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
 ad8:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
 adc:	20 ff       	sbrs	r18, 0
 ade:	36 c0       	rjmp	.+108    	; 0xb4c <USB_Device_ProcessControlRequest+0x124>
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
 ae0:	93 30       	cpi	r25, 0x03	; 3
 ae2:	31 f4       	brne	.+12     	; 0xaf0 <USB_Device_ProcessControlRequest+0xc8>
				UECONX |= (1 << STALLRQ);
 ae4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 ae8:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
 aea:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			}
 aee:	ca c0       	rjmp	.+404    	; 0xc84 <USB_Device_ProcessControlRequest+0x25c>
				UECONX |= (1 << STALLRQC);
 af0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 af4:	90 61       	ori	r25, 0x10	; 16
 af6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				UERST = (1 << EndpointNumber);
 afa:	21 e0       	ldi	r18, 0x01	; 1
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	01 c0       	rjmp	.+2      	; 0xb02 <USB_Device_ProcessControlRequest+0xda>
 b00:	22 0f       	add	r18, r18
 b02:	8a 95       	dec	r24
 b04:	ea f7       	brpl	.-6      	; 0xb00 <USB_Device_ProcessControlRequest+0xd8>
 b06:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
 b0a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UECONX |= (1 << RSTDT);
 b0e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b12:	88 60       	ori	r24, 0x08	; 8
 b14:	ea cf       	rjmp	.-44     	; 0xaea <USB_Device_ProcessControlRequest+0xc2>
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b16:	81 11       	cpse	r24, r1
 b18:	a8 c0       	rjmp	.+336    	; 0xc6a <USB_Device_ProcessControlRequest+0x242>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b1a:	10 91 28 02 	lds	r17, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
				UEINTX &= ~(1 << RXSTPI);
 b1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b22:	87 7f       	andi	r24, 0xF7	; 247
 b24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
 b28:	19 dd       	rcall	.-1486   	; 0x55c <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI))  ? true : false);
 b2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsINReady()))
 b2e:	80 ff       	sbrs	r24, 0
 b30:	0a c0       	rjmp	.+20     	; 0xb46 <USB_Device_ProcessControlRequest+0x11e>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b32:	81 2f       	mov	r24, r17
 b34:	8f 77       	andi	r24, 0x7F	; 127
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b36:	92 e0       	ldi	r25, 0x02	; 2
 b38:	09 f0       	breq	.+2      	; 0xb3c <USB_Device_ProcessControlRequest+0x114>
 b3a:	93 e0       	ldi	r25, 0x03	; 3
 b3c:	9e bb       	out	0x1e, r25	; 30
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 b3e:	80 68       	ori	r24, 0x80	; 128
 b40:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
			}			
 b44:	03 c0       	rjmp	.+6      	; 0xb4c <USB_Device_ProcessControlRequest+0x124>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 b46:	8e b3       	in	r24, 0x1e	; 30
 b48:	81 11       	cpse	r24, r1
 b4a:	ef cf       	rjmp	.-34     	; 0xb2a <USB_Device_ProcessControlRequest+0x102>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (Endpoint_IsSETUPReceived())
 b50:	83 ff       	sbrs	r24, 3
 b52:	0a c0       	rjmp	.+20     	; 0xb68 <USB_Device_ProcessControlRequest+0x140>
				UECONX |= (1 << STALLRQ);
 b54:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b58:	80 62       	ori	r24, 0x20	; 32
 b5a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				UEINTX &= ~(1 << RXSTPI);
 b5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b62:	87 7f       	andi	r24, 0xF7	; 247
 b64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
}
 b68:	aa 96       	adiw	r28, 0x2a	; 42
 b6a:	0f b6       	in	r0, 0x3f	; 63
 b6c:	f8 94       	cli
 b6e:	de bf       	out	0x3e, r29	; 62
 b70:	0f be       	out	0x3f, r0	; 63
 b72:	cd bf       	out	0x3d, r28	; 61
 b74:	df 91       	pop	r29
 b76:	cf 91       	pop	r28
 b78:	1f 91       	pop	r17
 b7a:	08 95       	ret
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b7c:	80 58       	subi	r24, 0x80	; 128
 b7e:	82 30       	cpi	r24, 0x02	; 2
 b80:	08 f0       	brcs	.+2      	; 0xb84 <USB_Device_ProcessControlRequest+0x15c>
 b82:	73 c0       	rjmp	.+230    	; 0xc6a <USB_Device_ProcessControlRequest+0x242>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b84:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
 b88:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <USB_ControlRequest+0x3>
 b8c:	8c 3d       	cpi	r24, 0xDC	; 220
 b8e:	23 e0       	ldi	r18, 0x03	; 3
 b90:	92 07       	cpc	r25, r18
 b92:	99 f5       	brne	.+102    	; 0xbfa <USB_Device_ProcessControlRequest+0x1d2>
	SignatureDescriptor.Header.Type = DTYPE_String;
 b94:	83 e0       	ldi	r24, 0x03	; 3
 b96:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 b98:	8a e2       	ldi	r24, 0x2A	; 42
 b9a:	89 83       	std	Y+1, r24	; 0x01
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 b9c:	4f b7       	in	r20, 0x3f	; 63
    cli();
 b9e:	f8 94       	cli
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 ba0:	de 01       	movw	r26, r28
 ba2:	13 96       	adiw	r26, 0x03	; 3
 ba4:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t SigReadAddress = 0x0E;
 ba6:	3e e0       	ldi	r19, 0x0E	; 14
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 ba8:	51 e2       	ldi	r21, 0x21	; 33
 baa:	e3 2f       	mov	r30, r19
 bac:	f0 e0       	ldi	r31, 0x00	; 0
 bae:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 bb2:	e4 91       	lpm	r30, Z
			if (SerialCharNum & 0x01)
 bb4:	20 ff       	sbrs	r18, 0
 bb6:	03 c0       	rjmp	.+6      	; 0xbbe <USB_Device_ProcessControlRequest+0x196>
				SerialByte >>= 4;
 bb8:	e2 95       	swap	r30
 bba:	ef 70       	andi	r30, 0x0F	; 15
				SigReadAddress++;
 bbc:	3f 5f       	subi	r19, 0xFF	; 255
	Nibble = ((Nibble & 0x0F) + '0');
 bbe:	ef 70       	andi	r30, 0x0F	; 15
 bc0:	80 e3       	ldi	r24, 0x30	; 48
 bc2:	8e 0f       	add	r24, r30
	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
 bc4:	8a 33       	cpi	r24, 0x3A	; 58
 bc6:	10 f0       	brcs	.+4      	; 0xbcc <USB_Device_ProcessControlRequest+0x1a4>
 bc8:	87 e3       	ldi	r24, 0x37	; 55
 bca:	8e 0f       	add	r24, r30
			SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	8d 93       	st	X+, r24
 bd0:	9d 93       	st	X+, r25
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 bd2:	2f 5f       	subi	r18, 0xFF	; 255
 bd4:	24 31       	cpi	r18, 0x14	; 20
 bd6:	49 f7       	brne	.-46     	; 0xbaa <USB_Device_ProcessControlRequest+0x182>
    SREG = *__s;
 bd8:	4f bf       	out	0x3f, r20	; 63
 bda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 bde:	87 7f       	andi	r24, 0xF7	; 247
 be0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 be4:	6a e2       	ldi	r22, 0x2A	; 42
 be6:	70 e0       	ldi	r23, 0x00	; 0
 be8:	ce 01       	movw	r24, r28
 bea:	01 96       	adiw	r24, 0x01	; 1
 bec:	02 dd       	rcall	.-1532   	; 0x5f2 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 bf2:	8b 77       	andi	r24, 0x7B	; 123
 bf4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 bf8:	a9 cf       	rjmp	.-174    	; 0xb4c <USB_Device_ProcessControlRequest+0x124>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 bfa:	ae 01       	movw	r20, r28
 bfc:	4f 5f       	subi	r20, 0xFF	; 255
 bfe:	5f 4f       	sbci	r21, 0xFF	; 255
 c00:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <USB_ControlRequest+0x4>
 c04:	45 dc       	rcall	.-1910   	; 0x490 <CALLBACK_USB_GetDescriptor>
 c06:	bc 01       	movw	r22, r24
 c08:	89 2b       	or	r24, r25
 c0a:	09 f4       	brne	.+2      	; 0xc0e <USB_Device_ProcessControlRequest+0x1e6>
 c0c:	9f cf       	rjmp	.-194    	; 0xb4c <USB_Device_ProcessControlRequest+0x124>
				UEINTX &= ~(1 << RXSTPI);
 c0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c12:	87 7f       	andi	r24, 0xF7	; 247
 c14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 c18:	89 81       	ldd	r24, Y+1	; 0x01
 c1a:	9a 81       	ldd	r25, Y+2	; 0x02
 c1c:	3f dd       	rcall	.-1410   	; 0x69c <Endpoint_Write_Control_PStream_LE>
 c1e:	e7 cf       	rjmp	.-50     	; 0xbee <USB_Device_ProcessControlRequest+0x1c6>
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c20:	80 38       	cpi	r24, 0x80	; 128
 c22:	19 f5       	brne	.+70     	; 0xc6a <USB_Device_ProcessControlRequest+0x242>
 c24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c28:	87 7f       	andi	r24, 0xF7	; 247
 c2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Byte(USB_ConfigurationNumber);
 c2e:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <USB_ConfigurationNumber>
				UEDATX = Byte;
 c32:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 c36:	3b cf       	rjmp	.-394    	; 0xaae <USB_Device_ProcessControlRequest+0x86>
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c38:	81 11       	cpse	r24, r1
 c3a:	17 c0       	rjmp	.+46     	; 0xc6a <USB_Device_ProcessControlRequest+0x242>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c3c:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
 c40:	92 30       	cpi	r25, 0x02	; 2
 c42:	08 f0       	brcs	.+2      	; 0xc46 <USB_Device_ProcessControlRequest+0x21e>
 c44:	83 cf       	rjmp	.-250    	; 0xb4c <USB_Device_ProcessControlRequest+0x124>
				UEINTX &= ~(1 << RXSTPI);
 c46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c4a:	87 7f       	andi	r24, 0xF7	; 247
 c4c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c50:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <USB_ConfigurationNumber>
	Endpoint_ClearStatusStage();
 c54:	83 dc       	rcall	.-1786   	; 0x55c <Endpoint_ClearStatusStage>
	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 c56:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <USB_ConfigurationNumber>
 c5a:	81 11       	cpse	r24, r1
 c5c:	04 c0       	rjmp	.+8      	; 0xc66 <USB_Device_ProcessControlRequest+0x23e>
	EVENT_USB_Device_ConfigurationChanged();
 c5e:	83 e0       	ldi	r24, 0x03	; 3
 c60:	8e bb       	out	0x1e, r24	; 30
 c62:	37 db       	rcall	.-2450   	; 0x2d2 <EVENT_USB_Device_ConfigurationChanged>
	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 c64:	73 cf       	rjmp	.-282    	; 0xb4c <USB_Device_ProcessControlRequest+0x124>
 c66:	84 e0       	ldi	r24, 0x04	; 4
	  EVENT_USB_Device_UnhandledControlRequest();
 c68:	fb cf       	rjmp	.-10     	; 0xc60 <USB_Device_ProcessControlRequest+0x238>
 c6a:	36 db       	rcall	.-2452   	; 0x2d8 <EVENT_USB_Device_UnhandledControlRequest>
 c6c:	6f cf       	rjmp	.-290    	; 0xb4c <USB_Device_ProcessControlRequest+0x124>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
 c6e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
 c72:	81 30       	cpi	r24, 0x01	; 1
 c74:	09 f0       	breq	.+2      	; 0xc78 <USB_Device_ProcessControlRequest+0x250>
 c76:	6a cf       	rjmp	.-300    	; 0xb4c <USB_Device_ProcessControlRequest+0x124>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 c78:	81 e0       	ldi	r24, 0x01	; 1
 c7a:	93 30       	cpi	r25, 0x03	; 3
 c7c:	09 f0       	breq	.+2      	; 0xc80 <USB_Device_ProcessControlRequest+0x258>
 c7e:	80 e0       	ldi	r24, 0x00	; 0
 c80:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <USB_RemoteWakeupEnabled>
					UENUM = EndpointNumber;
 c84:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				UEINTX &= ~(1 << RXSTPI);
 c88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c8c:	87 7f       	andi	r24, 0xF7	; 247
 c8e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
 c92:	64 dc       	rcall	.-1848   	; 0x55c <Endpoint_ClearStatusStage>
}
 c94:	5b cf       	rjmp	.-330    	; 0xb4c <USB_Device_ProcessControlRequest+0x124>

00000c96 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 c96:	08 95       	ret

00000c98 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c98:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c9a:	8e b3       	in	r24, 0x1e	; 30
 c9c:	88 23       	and	r24, r24
 c9e:	59 f0       	breq	.+22     	; 0xcb6 <USB_USBTask+0x1e>
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ca0:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 ca4:	c7 70       	andi	r28, 0x07	; 7
					UENUM = EndpointNumber;
 ca6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 caa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 cae:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 cb0:	bb de       	rcall	.-650    	; 0xa28 <USB_Device_ProcessControlRequest>
					UENUM = EndpointNumber;
 cb2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
}
 cb6:	cf 91       	pop	r28
 cb8:	08 95       	ret

00000cba <CDC_Device_Event_Stub>:
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{

}
 cba:	08 95       	ret

00000cbc <CDC_Device_ProcessControlRequest>:

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 cbc:	cf 93       	push	r28
 cbe:	df 93       	push	r29
 cc0:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cc2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (!(Endpoint_IsSETUPReceived()))
 cc6:	83 ff       	sbrs	r24, 3
 cc8:	12 c0       	rjmp	.+36     	; 0xcee <CDC_Device_ProcessControlRequest+0x32>
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 cca:	28 81       	ld	r18, Y
 ccc:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <USB_ControlRequest+0x4>
 cd0:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <USB_ControlRequest+0x5>
 cd4:	28 17       	cp	r18, r24
 cd6:	19 06       	cpc	r1, r25
 cd8:	51 f4       	brne	.+20     	; 0xcee <CDC_Device_ProcessControlRequest+0x32>
	  return;

	switch (USB_ControlRequest.bRequest)
 cda:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <USB_ControlRequest+0x1>
 cde:	82 32       	cpi	r24, 0x22	; 34
 ce0:	09 f4       	brne	.+2      	; 0xce4 <CDC_Device_ProcessControlRequest+0x28>
 ce2:	40 c0       	rjmp	.+128    	; 0xd64 <CDC_Device_ProcessControlRequest+0xa8>
 ce4:	38 f4       	brcc	.+14     	; 0xcf4 <CDC_Device_ProcessControlRequest+0x38>
 ce6:	80 32       	cpi	r24, 0x20	; 32
 ce8:	49 f1       	breq	.+82     	; 0xd3c <CDC_Device_ProcessControlRequest+0x80>
 cea:	81 32       	cpi	r24, 0x21	; 33
 cec:	99 f0       	breq	.+38     	; 0xd14 <CDC_Device_ProcessControlRequest+0x58>
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 cee:	df 91       	pop	r29
 cf0:	cf 91       	pop	r28
 cf2:	08 95       	ret
	switch (USB_ControlRequest.bRequest)
 cf4:	83 32       	cpi	r24, 0x23	; 35
 cf6:	d9 f7       	brne	.-10     	; 0xcee <CDC_Device_ProcessControlRequest+0x32>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 cf8:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <USB_ControlRequest>
 cfc:	81 32       	cpi	r24, 0x21	; 33
 cfe:	b9 f7       	brne	.-18     	; 0xcee <CDC_Device_ProcessControlRequest+0x32>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d04:	87 7f       	andi	r24, 0xF7	; 247
 d06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 d0a:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
 d0e:	ce 01       	movw	r24, r28
 d10:	d4 df       	rcall	.-88     	; 0xcba <CDC_Device_Event_Stub>
 d12:	37 c0       	rjmp	.+110    	; 0xd82 <CDC_Device_ProcessControlRequest+0xc6>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d14:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <USB_ControlRequest>
 d18:	81 3a       	cpi	r24, 0xA1	; 161
 d1a:	49 f7       	brne	.-46     	; 0xcee <CDC_Device_ProcessControlRequest+0x32>
 d1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d20:	87 7f       	andi	r24, 0xF7	; 247
 d22:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 d26:	67 e0       	ldi	r22, 0x07	; 7
 d28:	70 e0       	ldi	r23, 0x00	; 0
 d2a:	ce 01       	movw	r24, r28
 d2c:	0f 96       	adiw	r24, 0x0f	; 15
 d2e:	61 dc       	rcall	.-1854   	; 0x5f2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d34:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d36:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
 d3a:	d9 cf       	rjmp	.-78     	; 0xcee <CDC_Device_ProcessControlRequest+0x32>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d3c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <USB_ControlRequest>
 d40:	81 32       	cpi	r24, 0x21	; 33
 d42:	a9 f6       	brne	.-86     	; 0xcee <CDC_Device_ProcessControlRequest+0x32>
				UEINTX &= ~(1 << RXSTPI);
 d44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d48:	87 7f       	andi	r24, 0xF7	; 247
 d4a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 d4e:	67 e0       	ldi	r22, 0x07	; 7
 d50:	70 e0       	ldi	r23, 0x00	; 0
 d52:	ce 01       	movw	r24, r28
 d54:	0f 96       	adiw	r24, 0x0f	; 15
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 d56:	f8 dc       	rcall	.-1552   	; 0x748 <Endpoint_Read_Control_Stream_LE>
 d58:	ce 01       	movw	r24, r28
 d5a:	c1 da       	rcall	.-2686   	; 0x2de <EVENT_CDC_Device_LineEncodingChanged>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d60:	8e 77       	andi	r24, 0x7E	; 126
 d62:	e9 cf       	rjmp	.-46     	; 0xd36 <CDC_Device_ProcessControlRequest+0x7a>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d64:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <USB_ControlRequest>
 d68:	81 32       	cpi	r24, 0x21	; 33
 d6a:	09 f0       	breq	.+2      	; 0xd6e <CDC_Device_ProcessControlRequest+0xb2>
 d6c:	c0 cf       	rjmp	.-128    	; 0xcee <CDC_Device_ProcessControlRequest+0x32>
				UEINTX &= ~(1 << RXSTPI);
 d6e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d72:	87 7f       	andi	r24, 0xF7	; 247
 d74:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 d78:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 d7c:	8d 87       	std	Y+13, r24	; 0x0d
 d7e:	ce 01       	movw	r24, r28
}
 d80:	5e db       	rcall	.-2372   	; 0x43e <EVENT_CDC_Device_ControLineStateChanged>
 d82:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
 d84:	cf 91       	pop	r28
 d86:	ea cb       	rjmp	.-2092   	; 0x55c <Endpoint_ClearStatusStage>

00000d88 <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d88:	0f 93       	push	r16
 d8a:	1f 93       	push	r17
 d8c:	cf 93       	push	r28
 d8e:	df 93       	push	r29
 d90:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 d92:	fc 01       	movw	r30, r24
 d94:	3d 96       	adiw	r30, 0x0d	; 13
 d96:	89 e0       	ldi	r24, 0x09	; 9
 d98:	df 01       	movw	r26, r30
 d9a:	1d 92       	st	X+, r1
 d9c:	8a 95       	dec	r24
 d9e:	e9 f7       	brne	.-6      	; 0xd9a <CDC_Device_ConfigureEndpoints+0x12>

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
 da0:	8a 81       	ldd	r24, Y+2	; 0x02
 da2:	9b 81       	ldd	r25, Y+3	; 0x03
 da4:	2c 81       	ldd	r18, Y+4	; 0x04
 da6:	10 e0       	ldi	r17, 0x00	; 0
 da8:	21 11       	cpse	r18, r1
 daa:	14 e0       	ldi	r17, 0x04	; 4
 dac:	09 81       	ldd	r16, Y+1	; 0x01
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 dae:	a1 db       	rcall	.-2238   	; 0x4f2 <Endpoint_BytesToEPSizeMaskDynamic>
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 db0:	41 2f       	mov	r20, r17
 db2:	48 2b       	or	r20, r24
 db4:	42 60       	ori	r20, 0x02	; 2
 db6:	61 e8       	ldi	r22, 0x81	; 129
 db8:	80 2f       	mov	r24, r16
 dba:	a9 db       	rcall	.-2222   	; 0x50e <Endpoint_ConfigureEndpoint_Prv>
 dbc:	88 23       	and	r24, r24
 dbe:	11 f1       	breq	.+68     	; 0xe04 <CDC_Device_ConfigureEndpoints+0x7c>
							         CDCInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
 dc0:	8e 81       	ldd	r24, Y+6	; 0x06
 dc2:	9f 81       	ldd	r25, Y+7	; 0x07
 dc4:	28 85       	ldd	r18, Y+8	; 0x08
 dc6:	10 e0       	ldi	r17, 0x00	; 0
 dc8:	21 11       	cpse	r18, r1
 dca:	14 e0       	ldi	r17, 0x04	; 4
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 dcc:	0d 81       	ldd	r16, Y+5	; 0x05
 dce:	91 db       	rcall	.-2270   	; 0x4f2 <Endpoint_BytesToEPSizeMaskDynamic>
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 dd0:	41 2f       	mov	r20, r17
 dd2:	48 2b       	or	r20, r24
 dd4:	42 60       	ori	r20, 0x02	; 2
 dd6:	60 e8       	ldi	r22, 0x80	; 128
 dd8:	80 2f       	mov	r24, r16
 dda:	99 db       	rcall	.-2254   	; 0x50e <Endpoint_ConfigureEndpoint_Prv>
 ddc:	88 23       	and	r24, r24
 dde:	91 f0       	breq	.+36     	; 0xe04 <CDC_Device_ConfigureEndpoints+0x7c>
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_INTERRUPT,
 de0:	8a 85       	ldd	r24, Y+10	; 0x0a
 de2:	9b 85       	ldd	r25, Y+11	; 0x0b
 de4:	2c 85       	ldd	r18, Y+12	; 0x0c
 de6:	10 e0       	ldi	r17, 0x00	; 0
 de8:	21 11       	cpse	r18, r1
 dea:	14 e0       	ldi	r17, 0x04	; 4
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 dec:	c9 85       	ldd	r28, Y+9	; 0x09
 dee:	81 db       	rcall	.-2302   	; 0x4f2 <Endpoint_BytesToEPSizeMaskDynamic>
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 df0:	41 2f       	mov	r20, r17
 df2:	48 2b       	or	r20, r24
 df4:	42 60       	ori	r20, 0x02	; 2
 df6:	61 ec       	ldi	r22, 0xC1	; 193
	{
		return false;
	}

	return true;
}
 df8:	8c 2f       	mov	r24, r28
 dfa:	df 91       	pop	r29
 dfc:	cf 91       	pop	r28
 dfe:	1f 91       	pop	r17
 e00:	0f 91       	pop	r16
 e02:	85 cb       	rjmp	.-2294   	; 0x50e <Endpoint_ConfigureEndpoint_Prv>
 e04:	80 e0       	ldi	r24, 0x00	; 0
 e06:	df 91       	pop	r29
 e08:	cf 91       	pop	r28
 e0a:	1f 91       	pop	r17
 e0c:	0f 91       	pop	r16
 e0e:	08 95       	ret

00000e10 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Data, Length, NO_STREAM_CALLBACK);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 e10:	cf 93       	push	r28
 e12:	fc 01       	movw	r30, r24
 e14:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 e16:	8e b3       	in	r24, 0x1e	; 30
 e18:	84 30       	cpi	r24, 0x04	; 4
 e1a:	e9 f4       	brne	.+58     	; 0xe56 <CDC_Device_SendByte+0x46>
 e1c:	87 85       	ldd	r24, Z+15	; 0x0f
 e1e:	90 89       	ldd	r25, Z+16	; 0x10
 e20:	a1 89       	ldd	r26, Z+17	; 0x11
 e22:	b2 89       	ldd	r27, Z+18	; 0x12
 e24:	89 2b       	or	r24, r25
 e26:	8a 2b       	or	r24, r26
 e28:	8b 2b       	or	r24, r27
 e2a:	a9 f0       	breq	.+42     	; 0xe56 <CDC_Device_SendByte+0x46>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 e2c:	81 81       	ldd	r24, Z+1	; 0x01
					UENUM = EndpointNumber;
 e2e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (!(Endpoint_IsReadWriteAllowed()))
 e36:	85 ff       	sbrs	r24, 5
 e38:	05 c0       	rjmp	.+10     	; 0xe44 <CDC_Device_SendByte+0x34>
				UEDATX = Byte;
 e3a:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
 e3e:	80 e0       	ldi	r24, 0x00	; 0
}
 e40:	cf 91       	pop	r28
 e42:	08 95       	ret
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 e48:	8e 77       	andi	r24, 0x7E	; 126
 e4a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 e4e:	a3 db       	rcall	.-2234   	; 0x596 <Endpoint_WaitUntilReady>
 e50:	88 23       	and	r24, r24
 e52:	99 f3       	breq	.-26     	; 0xe3a <CDC_Device_SendByte+0x2a>
 e54:	f5 cf       	rjmp	.-22     	; 0xe40 <CDC_Device_SendByte+0x30>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 e56:	82 e0       	ldi	r24, 0x02	; 2
 e58:	f3 cf       	rjmp	.-26     	; 0xe40 <CDC_Device_SendByte+0x30>

00000e5a <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 e5a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 e5c:	8e b3       	in	r24, 0x1e	; 30
 e5e:	84 30       	cpi	r24, 0x04	; 4
 e60:	19 f5       	brne	.+70     	; 0xea8 <CDC_Device_Flush+0x4e>
 e62:	87 85       	ldd	r24, Z+15	; 0x0f
 e64:	90 89       	ldd	r25, Z+16	; 0x10
 e66:	a1 89       	ldd	r26, Z+17	; 0x11
 e68:	b2 89       	ldd	r27, Z+18	; 0x12
 e6a:	89 2b       	or	r24, r25
 e6c:	8a 2b       	or	r24, r26
 e6e:	8b 2b       	or	r24, r27
 e70:	d9 f0       	breq	.+54     	; 0xea8 <CDC_Device_Flush+0x4e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 e72:	81 81       	ldd	r24, Z+1	; 0x01
					UENUM = EndpointNumber;
 e74:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
					return UEBCLX;
 e78:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>

	if (!(Endpoint_BytesInEndpoint()))
 e7c:	81 11       	cpse	r24, r1
 e7e:	02 c0       	rjmp	.+4      	; 0xe84 <CDC_Device_Flush+0x2a>
	  return ENDPOINT_READYWAIT_NoError;
 e80:	80 e0       	ldi	r24, 0x00	; 0
 e82:	08 95       	ret
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e84:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 e8c:	8e 77       	andi	r24, 0x7E	; 126
 e8e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	
	bool BankFull = !(Endpoint_IsReadWriteAllowed());
	
	Endpoint_ClearIN();
	
	if (BankFull)
 e92:	95 fd       	sbrc	r25, 5
 e94:	f5 cf       	rjmp	.-22     	; 0xe80 <CDC_Device_Flush+0x26>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 e96:	7f db       	rcall	.-2306   	; 0x596 <Endpoint_WaitUntilReady>
 e98:	81 11       	cpse	r24, r1
 e9a:	07 c0       	rjmp	.+14     	; 0xeaa <CDC_Device_Flush+0x50>
 e9c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 ea0:	9e 77       	andi	r25, 0x7E	; 126
 ea2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
 ea6:	08 95       	ret
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 ea8:	82 e0       	ldi	r24, 0x02	; 2

		Endpoint_ClearIN();
	}
	
	return ENDPOINT_READYWAIT_NoError;
}
 eaa:	08 95       	ret

00000eac <CDC_Device_USBTask>:
{
 eac:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 eae:	8e b3       	in	r24, 0x1e	; 30
 eb0:	84 30       	cpi	r24, 0x04	; 4
 eb2:	51 f4       	brne	.+20     	; 0xec8 <CDC_Device_USBTask+0x1c>
 eb4:	87 85       	ldd	r24, Z+15	; 0x0f
 eb6:	90 89       	ldd	r25, Z+16	; 0x10
 eb8:	a1 89       	ldd	r26, Z+17	; 0x11
 eba:	b2 89       	ldd	r27, Z+18	; 0x12
 ebc:	89 2b       	or	r24, r25
 ebe:	8a 2b       	or	r24, r26
 ec0:	8b 2b       	or	r24, r27
 ec2:	11 f0       	breq	.+4      	; 0xec8 <CDC_Device_USBTask+0x1c>
	CDC_Device_Flush(CDCInterfaceInfo);
 ec4:	cf 01       	movw	r24, r30
 ec6:	c9 cf       	rjmp	.-110    	; 0xe5a <CDC_Device_Flush>
}
 ec8:	08 95       	ret

00000eca <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 eca:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 ecc:	8e b3       	in	r24, 0x1e	; 30
 ece:	84 30       	cpi	r24, 0x04	; 4
 ed0:	19 f0       	breq	.+6      	; 0xed8 <CDC_Device_ReceiveByte+0xe>
	  return -1;
 ed2:	8f ef       	ldi	r24, 0xFF	; 255
 ed4:	9f ef       	ldi	r25, 0xFF	; 255
 ed6:	08 95       	ret
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 ed8:	87 85       	ldd	r24, Z+15	; 0x0f
 eda:	90 89       	ldd	r25, Z+16	; 0x10
 edc:	a1 89       	ldd	r26, Z+17	; 0x11
 ede:	b2 89       	ldd	r27, Z+18	; 0x12
 ee0:	89 2b       	or	r24, r25
 ee2:	8a 2b       	or	r24, r26
 ee4:	8b 2b       	or	r24, r27
 ee6:	a9 f3       	breq	.-22     	; 0xed2 <CDC_Device_ReceiveByte+0x8>

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 ee8:	85 81       	ldd	r24, Z+5	; 0x05
					UENUM = EndpointNumber;
 eea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 eee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	
	if (Endpoint_IsOUTReceived())
 ef2:	82 ff       	sbrs	r24, 2
 ef4:	ee cf       	rjmp	.-36     	; 0xed2 <CDC_Device_ReceiveByte+0x8>
					return UEBCLX;
 ef6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
	{
		if (Endpoint_BytesInEndpoint())
 efa:	88 23       	and	r24, r24
 efc:	69 f0       	breq	.+26     	; 0xf18 <CDC_Device_ReceiveByte+0x4e>
				return UEDATX;
 efe:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
		  ReceivedByte = Endpoint_Read_Byte();
 f02:	90 e0       	ldi	r25, 0x00	; 0
					return UEBCLX;
 f04:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
	
		if (!(Endpoint_BytesInEndpoint()))
 f08:	21 11       	cpse	r18, r1
 f0a:	05 c0       	rjmp	.+10     	; 0xf16 <CDC_Device_ReceiveByte+0x4c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 f0c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 f10:	2b 77       	andi	r18, 0x7B	; 123
 f12:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  Endpoint_ClearOUT();
	}
	
	return ReceivedByte;
}
 f16:	08 95       	ret
	int16_t ReceivedByte = -1;
 f18:	8f ef       	ldi	r24, 0xFF	; 255
 f1a:	9f ef       	ldi	r25, 0xFF	; 255
 f1c:	f3 cf       	rjmp	.-26     	; 0xf04 <CDC_Device_ReceiveByte+0x3a>

00000f1e <__udivmodsi4>:
 f1e:	a1 e2       	ldi	r26, 0x21	; 33
 f20:	1a 2e       	mov	r1, r26
 f22:	aa 1b       	sub	r26, r26
 f24:	bb 1b       	sub	r27, r27
 f26:	fd 01       	movw	r30, r26
 f28:	0d c0       	rjmp	.+26     	; 0xf44 <__udivmodsi4_ep>

00000f2a <__udivmodsi4_loop>:
 f2a:	aa 1f       	adc	r26, r26
 f2c:	bb 1f       	adc	r27, r27
 f2e:	ee 1f       	adc	r30, r30
 f30:	ff 1f       	adc	r31, r31
 f32:	a2 17       	cp	r26, r18
 f34:	b3 07       	cpc	r27, r19
 f36:	e4 07       	cpc	r30, r20
 f38:	f5 07       	cpc	r31, r21
 f3a:	20 f0       	brcs	.+8      	; 0xf44 <__udivmodsi4_ep>
 f3c:	a2 1b       	sub	r26, r18
 f3e:	b3 0b       	sbc	r27, r19
 f40:	e4 0b       	sbc	r30, r20
 f42:	f5 0b       	sbc	r31, r21

00000f44 <__udivmodsi4_ep>:
 f44:	66 1f       	adc	r22, r22
 f46:	77 1f       	adc	r23, r23
 f48:	88 1f       	adc	r24, r24
 f4a:	99 1f       	adc	r25, r25
 f4c:	1a 94       	dec	r1
 f4e:	69 f7       	brne	.-38     	; 0xf2a <__udivmodsi4_loop>
 f50:	60 95       	com	r22
 f52:	70 95       	com	r23
 f54:	80 95       	com	r24
 f56:	90 95       	com	r25
 f58:	9b 01       	movw	r18, r22
 f5a:	ac 01       	movw	r20, r24
 f5c:	bd 01       	movw	r22, r26
 f5e:	cf 01       	movw	r24, r30
 f60:	08 95       	ret

00000f62 <__tablejump2__>:
 f62:	ee 0f       	add	r30, r30
 f64:	ff 1f       	adc	r31, r31
 f66:	05 90       	lpm	r0, Z+
 f68:	f4 91       	lpm	r31, Z
 f6a:	e0 2d       	mov	r30, r0
 f6c:	09 94       	ijmp

00000f6e <_exit>:
 f6e:	f8 94       	cli

00000f70 <__stop_program>:
 f70:	ff cf       	rjmp	.-2      	; 0xf70 <__stop_program>
 f72:	36 05       	cpc	r19, r6
 f74:	5b 05       	cpc	r21, r11
 f76:	35 06       	cpc	r3, r21
 f78:	5b 05       	cpc	r21, r11
 f7a:	35 06       	cpc	r3, r21
 f7c:	8b 05       	cpc	r24, r11
 f7e:	be 05       	cpc	r27, r14
 f80:	35 06       	cpc	r3, r21
 f82:	10 06       	cpc	r1, r16
 f84:	1c 06       	cpc	r1, r28
