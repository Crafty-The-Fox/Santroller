
/home/sanjay/Code/Ardwiino/buildDebug/firmware/ardwiino-mega2560-usb-atmega16u2-16000000-usbserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000faa  0000103e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000faa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000119  00800116  00800116  00001054  2**0
                  ALLOC
  3 .noinit       00000004  0080022f  0080022f  00001054  2**0
                  ALLOC
  4 .comment      00000012  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000002c0  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00005cd8  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001a5a  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000068e3  00000000  00000000  00008a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000838  00000000  00000000  0000f380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00001e9b  00000000  00000000  0000fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00003b81  00000000  00000000  00011a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000488  00000000  00000000  000155d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	90 c0       	rjmp	.+288    	; 0x122 <__ctors_end>
   2:	00 00       	nop
   4:	a9 c0       	rjmp	.+338    	; 0x158 <__bad_interrupt>
   6:	00 00       	nop
   8:	a7 c0       	rjmp	.+334    	; 0x158 <__bad_interrupt>
   a:	00 00       	nop
   c:	a5 c0       	rjmp	.+330    	; 0x158 <__bad_interrupt>
   e:	00 00       	nop
  10:	a3 c0       	rjmp	.+326    	; 0x158 <__bad_interrupt>
  12:	00 00       	nop
  14:	a1 c0       	rjmp	.+322    	; 0x158 <__bad_interrupt>
  16:	00 00       	nop
  18:	9f c0       	rjmp	.+318    	; 0x158 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9d c0       	rjmp	.+314    	; 0x158 <__bad_interrupt>
  1e:	00 00       	nop
  20:	9b c0       	rjmp	.+310    	; 0x158 <__bad_interrupt>
  22:	00 00       	nop
  24:	99 c0       	rjmp	.+306    	; 0x158 <__bad_interrupt>
  26:	00 00       	nop
  28:	97 c0       	rjmp	.+302    	; 0x158 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	27 c4       	rjmp	.+2126   	; 0x87c <__vector_11>
  2e:	00 00       	nop
  30:	cc c4       	rjmp	.+2456   	; 0x9ca <__vector_12>
  32:	00 00       	nop
  34:	91 c0       	rjmp	.+290    	; 0x158 <__bad_interrupt>
  36:	00 00       	nop
  38:	8f c0       	rjmp	.+286    	; 0x158 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8d c0       	rjmp	.+282    	; 0x158 <__bad_interrupt>
  3e:	00 00       	nop
  40:	8b c0       	rjmp	.+278    	; 0x158 <__bad_interrupt>
  42:	00 00       	nop
  44:	89 c0       	rjmp	.+274    	; 0x158 <__bad_interrupt>
  46:	00 00       	nop
  48:	87 c0       	rjmp	.+270    	; 0x158 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	85 c0       	rjmp	.+266    	; 0x158 <__bad_interrupt>
  4e:	00 00       	nop
  50:	83 c0       	rjmp	.+262    	; 0x158 <__bad_interrupt>
  52:	00 00       	nop
  54:	81 c0       	rjmp	.+258    	; 0x158 <__bad_interrupt>
  56:	00 00       	nop
  58:	7f c0       	rjmp	.+254    	; 0x158 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d8 c1       	rjmp	.+944    	; 0x40e <__vector_23>
  5e:	00 00       	nop
  60:	7b c0       	rjmp	.+246    	; 0x158 <__bad_interrupt>
  62:	00 00       	nop
  64:	79 c0       	rjmp	.+242    	; 0x158 <__bad_interrupt>
  66:	00 00       	nop
  68:	77 c0       	rjmp	.+238    	; 0x158 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	75 c0       	rjmp	.+234    	; 0x158 <__bad_interrupt>
  6e:	00 00       	nop
  70:	73 c0       	rjmp	.+230    	; 0x158 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	24 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     $.A.r.d.u.i.n.o.
  84:	20 00 4d 00 65 00 67 00 61 00 20 00 32 00 35 00      .M.e.g.a. .2.5.
  94:	36 00 30 00 00 00                                   6.0...

0000009a <ManufacturerString>:
  9a:	32 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     2.A.r.d.u.i.n.o.
  aa:	20 00 28 00 77 00 77 00 77 00 2e 00 61 00 72 00      .(.w.w.w...a.r.
  ba:	64 00 75 00 69 00 6e 00 6f 00 2e 00 63 00 63 00     d.u.i.n.o...c.c.
  ca:	29 00 00 00                                         )...

000000ce <LanguageString>:
  ce:	04 03 09 04                                         ....

000000d2 <ConfigurationDescriptor>:
  d2:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  e2:	01 00 05 24 00 01 10 04 24 02 06 05 24 06 00 01     ...$....$...$...
  f2:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
 102:	07 05 04 02 40 00 01 07 05 83 02 40 00 01           ....@......@..

00000110 <DeviceDescriptor>:
 110:	12 01 10 01 02 00 00 08 25 09 10 00 01 00 01 02     ........%.......
 120:	dc 01                                               ..

00000122 <__ctors_end>:
 122:	11 24       	eor	r1, r1
 124:	1f be       	out	0x3f, r1	; 63
 126:	cf ef       	ldi	r28, 0xFF	; 255
 128:	d2 e0       	ldi	r29, 0x02	; 2
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
 12e:	11 e0       	ldi	r17, 0x01	; 1
 130:	a0 e0       	ldi	r26, 0x00	; 0
 132:	b1 e0       	ldi	r27, 0x01	; 1
 134:	ea ea       	ldi	r30, 0xAA	; 170
 136:	ff e0       	ldi	r31, 0x0F	; 15
 138:	02 c0       	rjmp	.+4      	; 0x13e <__do_copy_data+0x10>
 13a:	05 90       	lpm	r0, Z+
 13c:	0d 92       	st	X+, r0
 13e:	a6 31       	cpi	r26, 0x16	; 22
 140:	b1 07       	cpc	r27, r17
 142:	d9 f7       	brne	.-10     	; 0x13a <__do_copy_data+0xc>

00000144 <__do_clear_bss>:
 144:	22 e0       	ldi	r18, 0x02	; 2
 146:	a6 e1       	ldi	r26, 0x16	; 22
 148:	b1 e0       	ldi	r27, 0x01	; 1
 14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
 14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
 14e:	af 32       	cpi	r26, 0x2F	; 47
 150:	b2 07       	cpc	r27, r18
 152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
 154:	62 d0       	rcall	.+196    	; 0x21a <main>
 156:	1d c7       	rjmp	.+3642   	; 0xf92 <_exit>

00000158 <__bad_interrupt>:
 158:	53 cf       	rjmp	.-346    	; 0x0 <__vectors>

0000015a <RingBuffer_Remove>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to retrieve from
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
 15a:	9c 01       	movw	r18, r24
			RingBuff_Data_t Data = *Buffer->Out;
 15c:	dc 01       	movw	r26, r24
 15e:	ae 57       	subi	r26, 0x7E	; 126
 160:	bf 4f       	sbci	r27, 0xFF	; 255
 162:	ed 91       	ld	r30, X+
 164:	fc 91       	ld	r31, X
 166:	11 97       	sbiw	r26, 0x01	; 1
 168:	81 91       	ld	r24, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 16a:	a9 01       	movw	r20, r18
 16c:	40 58       	subi	r20, 0x80	; 128
 16e:	5f 4f       	sbci	r21, 0xFF	; 255
 170:	e4 17       	cp	r30, r20
 172:	f5 07       	cpc	r31, r21
 174:	61 f0       	breq	.+24     	; 0x18e <RingBuffer_Remove+0x34>
 176:	ed 93       	st	X+, r30
 178:	fc 93       	st	X, r31
			  Buffer->Out = Buffer->Buffer;

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 17a:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 17c:	f8 94       	cli
			{
				Buffer->Count--;
 17e:	f9 01       	movw	r30, r18
 180:	ec 57       	subi	r30, 0x7C	; 124
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	90 81       	ld	r25, Z
 186:	91 50       	subi	r25, 0x01	; 1
 188:	90 83       	st	Z, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 18a:	4f bf       	out	0x3f, r20	; 63
			}
			
			return Data;
		}
 18c:	08 95       	ret
			  Buffer->Out = Buffer->Buffer;
 18e:	2d 93       	st	X+, r18
 190:	3c 93       	st	X, r19
 192:	f3 cf       	rjmp	.-26     	; 0x17a <RingBuffer_Remove+0x20>

00000194 <RingBuffer_Insert>:
		{
 194:	9c 01       	movw	r18, r24
			*Buffer->In = Data;
 196:	fc 01       	movw	r30, r24
 198:	e0 58       	subi	r30, 0x80	; 128
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	a0 81       	ld	r26, Z
 19e:	b1 81       	ldd	r27, Z+1	; 0x01
 1a0:	6c 93       	st	X, r22
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 1a2:	a0 81       	ld	r26, Z
 1a4:	b1 81       	ldd	r27, Z+1	; 0x01
 1a6:	cd 01       	movw	r24, r26
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	8e 17       	cp	r24, r30
 1ac:	9f 07       	cpc	r25, r31
 1ae:	61 f0       	breq	.+24     	; 0x1c8 <RingBuffer_Insert+0x34>
 1b0:	91 83       	std	Z+1, r25	; 0x01
 1b2:	80 83       	st	Z, r24
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 1b4:	9f b7       	in	r25, 0x3f	; 63
    cli();
 1b6:	f8 94       	cli
				Buffer->Count++;
 1b8:	f9 01       	movw	r30, r18
 1ba:	ec 57       	subi	r30, 0x7C	; 124
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	80 81       	ld	r24, Z
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 83       	st	Z, r24
    SREG = *__s;
 1c4:	9f bf       	out	0x3f, r25	; 63
		}
 1c6:	08 95       	ret
			  Buffer->In = Buffer->Buffer;
 1c8:	12 96       	adiw	r26, 0x02	; 2
 1ca:	3c 93       	st	X, r19
 1cc:	2e 93       	st	-X, r18
 1ce:	11 97       	sbiw	r26, 0x01	; 1
 1d0:	f1 cf       	rjmp	.-30     	; 0x1b4 <RingBuffer_Insert+0x20>

000001d2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1d2:	84 b7       	in	r24, 0x34	; 52
 1d4:	87 7f       	andi	r24, 0xF7	; 247
 1d6:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	a8 95       	wdr
 1de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 1e2:	88 61       	ori	r24, 0x18	; 24
 1e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 1e8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 1ec:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 1ee:	87 e6       	ldi	r24, 0x67	; 103
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
 1f6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 200:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 204:	88 e1       	ldi	r24, 0x18	; 24
 206:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
				
				DDRD  |= (1 << 3);
 20a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 20c:	5a 9a       	sbi	0x0b, 2	; 11
	wdt_disable();

	/* Hardware Initialization */
	Serial_Init(9600, false);
	// LEDs_Init();
	USB_Init();
 20e:	2b d3       	rcall	.+1622   	; 0x866 <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
 210:	84 e0       	ldi	r24, 0x04	; 4
 212:	85 bd       	out	0x25, r24	; 37

	/* Pull target /RESET line high */
	AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
 214:	5f 9a       	sbi	0x0b, 7	; 11
	AVR_RESET_LINE_DDR |= AVR_RESET_LINE_MASK;
 216:	57 9a       	sbi	0x0a, 7	; 10
}
 218:	08 95       	ret

0000021a <main>:
	if (jmpToBootloader == JUMP)
 21a:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <jmpToBootloader>
 21e:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <jmpToBootloader+0x1>
 222:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <jmpToBootloader+0x2>
 226:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <jmpToBootloader+0x3>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	90 48       	sbci	r25, 0x80	; 128
 22e:	ad 4a       	sbci	r26, 0xAD	; 173
 230:	be 4d       	sbci	r27, 0xDE	; 222
 232:	51 f4       	brne	.+20     	; 0x248 <main+0x2e>
		jmpToBootloader = 0;
 234:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <jmpToBootloader>
 238:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <jmpToBootloader+0x1>
 23c:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <jmpToBootloader+0x2>
 240:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <jmpToBootloader+0x3>
		asm volatile("jmp 0x1000");
 244:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__data_load_end+0x40>
	SetupHardware();
 248:	c4 df       	rcall	.-120    	; 0x1d2 <SetupHardware>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 24a:	2f b7       	in	r18, 0x3f	; 63
    cli();
 24c:	f8 94       	cli
				Buffer->In  = Buffer->Buffer;
 24e:	8e e9       	ldi	r24, 0x9E	; 158
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <USBtoUSART_Buffer+0x81>
 256:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <USBtoUSART_Buffer+0x80>
				Buffer->Out = Buffer->Buffer;
 25a:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <USBtoUSART_Buffer+0x83>
 25e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <USBtoUSART_Buffer+0x82>
    SREG = *__s;
 262:	2f bf       	out	0x3f, r18	; 63
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 264:	2f b7       	in	r18, 0x3f	; 63
    cli();
 266:	f8 94       	cli
				Buffer->In  = Buffer->Buffer;
 268:	89 e1       	ldi	r24, 0x19	; 25
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <USARTtoUSB_Buffer+0x81>
 270:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <USARTtoUSB_Buffer+0x80>
				Buffer->Out = Buffer->Buffer;
 274:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <USARTtoUSB_Buffer+0x83>
 278:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <USARTtoUSB_Buffer+0x82>
    SREG = *__s;
 27c:	2f bf       	out	0x3f, r18	; 63
	sei();
 27e:	78 94       	sei
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 280:	9f b7       	in	r25, 0x3f	; 63
    cli();
 282:	f8 94       	cli
				Count = Buffer->Count;
 284:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <USBtoUSART_Buffer+0x84>
    SREG = *__s;
 288:	9f bf       	out	0x3f, r25	; 63
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
 28a:	80 38       	cpi	r24, 0x80	; 128
 28c:	49 f0       	breq	.+18     	; 0x2a0 <main+0x86>
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	2d d6       	rcall	.+3162   	; 0xeee <CDC_Device_ReceiveByte>
 294:	bc 01       	movw	r22, r24
			if (!(ReceivedByte < 0))
 296:	97 fd       	sbrc	r25, 7
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <main+0x86>
				RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
 29a:	8e e9       	ldi	r24, 0x9E	; 158
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	7a df       	rcall	.-268    	; 0x194 <RingBuffer_Insert>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2a0:	8f b7       	in	r24, 0x3f	; 63
    cli();
 2a2:	f8 94       	cli
				Count = Buffer->Count;
 2a4:	c0 91 9d 01 	lds	r28, 0x019D	; 0x80019d <USARTtoUSB_Buffer+0x84>
    SREG = *__s;
 2a8:	8f bf       	out	0x3f, r24	; 63
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > BUFFER_NEARLY_FULL))
 2aa:	a8 99       	sbic	0x15, 0	; 21
 2ac:	0e c0       	rjmp	.+28     	; 0x2ca <main+0xb0>
 2ae:	c1 36       	cpi	r28, 0x61	; 97
 2b0:	60 f4       	brcc	.+24     	; 0x2ca <main+0xb0>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2b2:	9f b7       	in	r25, 0x3f	; 63
    cli();
 2b4:	f8 94       	cli
				Count = Buffer->Count;
 2b6:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <USBtoUSART_Buffer+0x84>
    SREG = *__s;
 2ba:	9f bf       	out	0x3f, r25	; 63
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
 2bc:	81 11       	cpse	r24, r1
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 2be:	11 c0       	rjmp	.+34     	; 0x2e2 <main+0xc8>
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
 2c4:	05 d6       	rcall	.+3082   	; 0xed0 <CDC_Device_USBTask>
 2c6:	fa d4       	rcall	.+2548   	; 0xcbc <USB_USBTask>
	{
 2c8:	db cf       	rjmp	.-74     	; 0x280 <main+0x66>
			while (BufferCount--)
 2ca:	a8 9a       	sbi	0x15, 0	; 21
 2cc:	cc 23       	and	r28, r28
				CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
 2ce:	89 f3       	breq	.-30     	; 0x2b2 <main+0x98>
 2d0:	89 e1       	ldi	r24, 0x19	; 25
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	42 df       	rcall	.-380    	; 0x15a <RingBuffer_Remove>
 2d6:	68 2f       	mov	r22, r24
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	ab d5       	rcall	.+2902   	; 0xe34 <CDC_Device_SendByte>
 2de:	c1 50       	subi	r28, 0x01	; 1
			Serial_TxByte(RingBuffer_Remove(&USBtoUSART_Buffer));
 2e0:	f5 cf       	rjmp	.-22     	; 0x2cc <main+0xb2>
 2e2:	8e e9       	ldi	r24, 0x9E	; 158
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	39 df       	rcall	.-398    	; 0x15a <RingBuffer_Remove>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
 2e8:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
 2ec:	95 ff       	sbrs	r25, 5
 2ee:	fc cf       	rjmp	.-8      	; 0x2e8 <main+0xce>
				UDR1 = DataByte;
 2f0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
			}
 2f4:	e5 cf       	rjmp	.-54     	; 0x2c0 <main+0xa6>

000002f6 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	58 c5       	rjmp	.+2736   	; 0xdac <CDC_Device_ConfigureEndpoints>

000002fc <EVENT_USB_Device_UnhandledControlRequest>:
}

/** Event handler for the library USB Unhandled Control Request event. */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	ef c4       	rjmp	.+2526   	; 0xce0 <CDC_Device_ProcessControlRequest>

00000302 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo)
{
 302:	8f 92       	push	r8
 304:	9f 92       	push	r9
 306:	af 92       	push	r10
 308:	bf 92       	push	r11
 30a:	ff 92       	push	r15
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	00 d0       	rcall	.+0      	; 0x316 <EVENT_CDC_Device_LineEncodingChanged+0x14>
 316:	00 d0       	rcall	.+0      	; 0x318 <EVENT_CDC_Device_LineEncodingChanged+0x16>
 318:	0f 92       	push	r0
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	8c 01       	movw	r16, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 320:	dc 01       	movw	r26, r24
 322:	54 96       	adiw	r26, 0x14	; 20
 324:	8c 91       	ld	r24, X
 326:	90 e3       	ldi	r25, 0x30	; 48
 328:	f9 2e       	mov	r15, r25
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	29 f0       	breq	.+10     	; 0x338 <EVENT_CDC_Device_LineEncodingChanged+0x36>
	{
	case CDC_PARITY_Odd:
		ConfigMask = ((1 << UPM11) | (1 << UPM10));
		break;
	case CDC_PARITY_Even:
		ConfigMask = (1 << UPM11);
 32e:	20 e2       	ldi	r18, 0x20	; 32
 330:	f2 2e       	mov	r15, r18
	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	09 f0       	breq	.+2      	; 0x338 <EVENT_CDC_Device_LineEncodingChanged+0x36>
	uint8_t ConfigMask = 0;
 336:	f1 2c       	mov	r15, r1
		break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
 338:	f8 01       	movw	r30, r16
 33a:	83 89       	ldd	r24, Z+19	; 0x13
 33c:	82 30       	cpi	r24, 0x02	; 2
 33e:	11 f4       	brne	.+4      	; 0x344 <EVENT_CDC_Device_LineEncodingChanged+0x42>
		ConfigMask |= (1 << USBS1);
 340:	68 94       	set
 342:	f3 f8       	bld	r15, 3

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
 344:	d8 01       	movw	r26, r16
 346:	55 96       	adiw	r26, 0x15	; 21
 348:	8c 91       	ld	r24, X
 34a:	87 30       	cpi	r24, 0x07	; 7
 34c:	09 f4       	brne	.+2      	; 0x350 <EVENT_CDC_Device_LineEncodingChanged+0x4e>
 34e:	53 c0       	rjmp	.+166    	; 0x3f6 <EVENT_CDC_Device_LineEncodingChanged+0xf4>
 350:	88 30       	cpi	r24, 0x08	; 8
 352:	09 f4       	brne	.+2      	; 0x356 <EVENT_CDC_Device_LineEncodingChanged+0x54>
 354:	53 c0       	rjmp	.+166    	; 0x3fc <EVENT_CDC_Device_LineEncodingChanged+0xfa>
 356:	86 30       	cpi	r24, 0x06	; 6
 358:	11 f4       	brne	.+4      	; 0x35e <EVENT_CDC_Device_LineEncodingChanged+0x5c>
	{
	case 6:
		ConfigMask |= (1 << UCSZ10);
 35a:	68 94       	set
 35c:	f1 f8       	bld	r15, 1
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
		break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
 35e:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
	UCSR1A = 0;
 362:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
	UCSR1C = 0;
 366:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
 36a:	f8 01       	movw	r30, r16
 36c:	27 85       	ldd	r18, Z+15	; 0x0f
 36e:	30 89       	ldd	r19, Z+16	; 0x10
 370:	41 89       	ldd	r20, Z+17	; 0x11
 372:	52 89       	ldd	r21, Z+18	; 0x12
 374:	21 15       	cp	r18, r1
 376:	f1 ee       	ldi	r31, 0xE1	; 225
 378:	3f 07       	cpc	r19, r31
 37a:	41 05       	cpc	r20, r1
 37c:	51 05       	cpc	r21, r1
 37e:	09 f4       	brne	.+2      	; 0x382 <EVENT_CDC_Device_LineEncodingChanged+0x80>
 380:	41 c0       	rjmp	.+130    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
				? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
				: SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 382:	49 01       	movw	r8, r18
 384:	5a 01       	movw	r10, r20
 386:	b6 94       	lsr	r11
 388:	a7 94       	ror	r10
 38a:	97 94       	ror	r9
 38c:	87 94       	ror	r8
 38e:	d5 01       	movw	r26, r10
 390:	c4 01       	movw	r24, r8
 392:	80 58       	subi	r24, 0x80	; 128
 394:	9b 47       	sbci	r25, 0x7B	; 123
 396:	a1 4e       	sbci	r26, 0xE1	; 225
 398:	bf 4f       	sbci	r27, 0xFF	; 255
 39a:	89 83       	std	Y+1, r24	; 0x01
 39c:	9a 83       	std	Y+2, r25	; 0x02
 39e:	ab 83       	std	Y+3, r26	; 0x03
 3a0:	bc 83       	std	Y+4, r27	; 0x04
 3a2:	bc 01       	movw	r22, r24
 3a4:	cd 01       	movw	r24, r26
 3a6:	cd d5       	rcall	.+2970   	; 0xf42 <__udivmodsi4>
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
 3a8:	21 50       	subi	r18, 0x01	; 1
 3aa:	31 09       	sbc	r19, r1
 3ac:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
 3b0:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>

	UCSR1C = ConfigMask;
 3b4:	f0 92 ca 00 	sts	0x00CA, r15	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
 3b8:	f8 01       	movw	r30, r16
 3ba:	87 85       	ldd	r24, Z+15	; 0x0f
 3bc:	90 89       	ldd	r25, Z+16	; 0x10
 3be:	a1 89       	ldd	r26, Z+17	; 0x11
 3c0:	b2 89       	ldd	r27, Z+18	; 0x12
 3c2:	81 15       	cp	r24, r1
 3c4:	91 4e       	sbci	r25, 0xE1	; 225
 3c6:	a1 05       	cpc	r26, r1
 3c8:	b1 05       	cpc	r27, r1
 3ca:	f9 f0       	breq	.+62     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 3d2:	88 e9       	ldi	r24, 0x98	; 152
 3d4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
}
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	ff 90       	pop	r15
 3ec:	bf 90       	pop	r11
 3ee:	af 90       	pop	r10
 3f0:	9f 90       	pop	r9
 3f2:	8f 90       	pop	r8
 3f4:	08 95       	ret
		ConfigMask |= (1 << UCSZ11);
 3f6:	68 94       	set
 3f8:	f2 f8       	bld	r15, 2
		break;
 3fa:	b1 cf       	rjmp	.-158    	; 0x35e <EVENT_CDC_Device_LineEncodingChanged+0x5c>
		ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
 3fc:	bf 2d       	mov	r27, r15
 3fe:	b6 60       	ori	r27, 0x06	; 6
 400:	fb 2e       	mov	r15, r27
		break;
 402:	ad cf       	rjmp	.-166    	; 0x35e <EVENT_CDC_Device_LineEncodingChanged+0x5c>
	UBRR1 = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
 404:	20 e1       	ldi	r18, 0x10	; 16
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	d1 cf       	rjmp	.-94     	; 0x3ac <EVENT_CDC_Device_LineEncodingChanged+0xaa>
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	e0 cf       	rjmp	.-64     	; 0x3ce <EVENT_CDC_Device_LineEncodingChanged+0xcc>

0000040e <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 40e:	1f 92       	push	r1
 410:	0f 92       	push	r0
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	0f 92       	push	r0
 416:	11 24       	eor	r1, r1
 418:	2f 93       	push	r18
 41a:	3f 93       	push	r19
 41c:	4f 93       	push	r20
 41e:	5f 93       	push	r21
 420:	6f 93       	push	r22
 422:	7f 93       	push	r23
 424:	8f 93       	push	r24
 426:	9f 93       	push	r25
 428:	af 93       	push	r26
 42a:	bf 93       	push	r27
 42c:	ef 93       	push	r30
 42e:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 430:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>

	if (USB_DeviceState == DEVICE_STATE_Configured)
 434:	8e b3       	in	r24, 0x1e	; 30
 436:	84 30       	cpi	r24, 0x04	; 4
 438:	19 f4       	brne	.+6      	; 0x440 <__vector_23+0x32>
		RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
 43a:	89 e1       	ldi	r24, 0x19	; 25
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	aa de       	rcall	.-684    	; 0x194 <RingBuffer_Insert>
}
 440:	ff 91       	pop	r31
 442:	ef 91       	pop	r30
 444:	bf 91       	pop	r27
 446:	af 91       	pop	r26
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	7f 91       	pop	r23
 44e:	6f 91       	pop	r22
 450:	5f 91       	pop	r21
 452:	4f 91       	pop	r20
 454:	3f 91       	pop	r19
 456:	2f 91       	pop	r18
 458:	0f 90       	pop	r0
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	0f 90       	pop	r0
 45e:	1f 90       	pop	r1
 460:	18 95       	reti

00000462 <EVENT_CDC_Device_ControLineStateChanged>:
/** Event handler for the CDC Class driver Host-to-Device Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo)
{
 462:	fc 01       	movw	r30, r24
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
	if (CurrentDTRState)
 464:	85 85       	ldd	r24, Z+13	; 0x0d
 466:	80 ff       	sbrs	r24, 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <EVENT_CDC_Device_ControLineStateChanged+0xc>
	{
		AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
 46a:	5f 98       	cbi	0x0b, 7	; 11
 46c:	08 95       	ret
	}
	else
	{
		AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
 46e:	5f 9a       	sbi	0x0b, 7	; 11
		if (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 1200)
 470:	87 85       	ldd	r24, Z+15	; 0x0f
 472:	90 89       	ldd	r25, Z+16	; 0x10
 474:	a1 89       	ldd	r26, Z+17	; 0x11
 476:	b2 89       	ldd	r27, Z+18	; 0x12
 478:	80 3b       	cpi	r24, 0xB0	; 176
 47a:	94 40       	sbci	r25, 0x04	; 4
 47c:	a1 05       	cpc	r26, r1
 47e:	b1 05       	cpc	r27, r1
 480:	c1 f4       	brne	.+48     	; 0x4b2 <EVENT_CDC_Device_ControLineStateChanged+0x50>
		{
			jmpToBootloader = JUMP;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e8       	ldi	r25, 0x80	; 128
 486:	ad ea       	ldi	r26, 0xAD	; 173
 488:	be ed       	ldi	r27, 0xDE	; 222
 48a:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <jmpToBootloader>
 48e:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <jmpToBootloader+0x1>
 492:	a0 93 31 02 	sts	0x0231, r26	; 0x800231 <jmpToBootloader+0x2>
 496:	b0 93 32 02 	sts	0x0232, r27	; 0x800232 <jmpToBootloader+0x3>
			cli();
 49a:	f8 94       	cli
		__asm__ __volatile__ (
 49c:	88 e1       	ldi	r24, 0x18	; 24
 49e:	98 e0       	ldi	r25, 0x08	; 8
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	a8 95       	wdr
 4a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
			wdt_enable(WDTO_15MS);
			for (;;)
 4b0:	ff cf       	rjmp	.-2      	; 0x4b0 <EVENT_CDC_Device_ControLineStateChanged+0x4e>
			{
			}
		}
	}
}
 4b2:	08 95       	ret

000004b4 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    void** const DescriptorAddress)
{
 4b4:	9c 01       	movw	r18, r24
 4b6:	da 01       	movw	r26, r20
	const uint8_t  DescriptorType   = (wValue >> 8);
 4b8:	83 2f       	mov	r24, r19
 4ba:	99 27       	eor	r25, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 4bc:	82 30       	cpi	r24, 0x02	; 2
 4be:	91 05       	cpc	r25, r1
 4c0:	29 f1       	breq	.+74     	; 0x50c <CALLBACK_USB_GetDescriptor+0x58>
 4c2:	83 30       	cpi	r24, 0x03	; 3
 4c4:	91 05       	cpc	r25, r1
 4c6:	49 f0       	breq	.+18     	; 0x4da <CALLBACK_USB_GetDescriptor+0x26>
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	91 f4       	brne	.+36     	; 0x4f0 <CALLBACK_USB_GetDescriptor+0x3c>
 4cc:	82 e1       	ldi	r24, 0x12	; 18
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	20 e1       	ldi	r18, 0x10	; 16
 4d2:	31 e0       	ldi	r19, 0x01	; 1
			}
			
			break;
	}
	
	*DescriptorAddress = Address;
 4d4:	2d 93       	st	X+, r18
 4d6:	3c 93       	st	X, r19
	return Size;
}
 4d8:	08 95       	ret
			switch (DescriptorNumber)
 4da:	c9 01       	movw	r24, r18
 4dc:	99 27       	eor	r25, r25
 4de:	21 30       	cpi	r18, 0x01	; 1
 4e0:	61 f0       	breq	.+24     	; 0x4fa <CALLBACK_USB_GetDescriptor+0x46>
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	91 05       	cpc	r25, r1
 4e6:	79 f0       	breq	.+30     	; 0x506 <CALLBACK_USB_GetDescriptor+0x52>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 4e8:	ee ec       	ldi	r30, 0xCE	; 206
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	89 2b       	or	r24, r25
 4ee:	39 f0       	breq	.+14     	; 0x4fe <CALLBACK_USB_GetDescriptor+0x4a>
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	ed cf       	rjmp	.-38     	; 0x4d4 <CALLBACK_USB_GetDescriptor+0x20>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 4fa:	ea e9       	ldi	r30, 0x9A	; 154
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	84 91       	lpm	r24, Z
 500:	90 e0       	ldi	r25, 0x00	; 0
					Address = (void*)&ManufacturerString;
 502:	9f 01       	movw	r18, r30
					break;
 504:	e7 cf       	rjmp	.-50     	; 0x4d4 <CALLBACK_USB_GetDescriptor+0x20>
					Size    = pgm_read_byte(&ProductString.Header.Size);
 506:	e4 e7       	ldi	r30, 0x74	; 116
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	f9 cf       	rjmp	.-14     	; 0x4fe <CALLBACK_USB_GetDescriptor+0x4a>
			Size    = sizeof(USB_Descriptor_Configuration_t);
 50c:	8e e3       	ldi	r24, 0x3E	; 62
 50e:	90 e0       	ldi	r25, 0x00	; 0
			Address = (void*)&ConfigurationDescriptor;
 510:	22 ed       	ldi	r18, 0xD2	; 210
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	df cf       	rjmp	.-66     	; 0x4d4 <CALLBACK_USB_GetDescriptor+0x20>

00000516 <Endpoint_BytesToEPSizeMaskDynamic>:
#if !defined(FIXED_CONTROL_ENDPOINT_SIZE)
uint8_t USB_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
 516:	ac 01       	movw	r20, r24
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 518:	28 e0       	ldi	r18, 0x08	; 8
 51a:	30 e0       	ldi	r19, 0x00	; 0
				uint8_t  MaskVal    = 0;
 51c:	80 e0       	ldi	r24, 0x00	; 0
				
				while (CheckBytes < Bytes)
 51e:	24 17       	cp	r18, r20
 520:	35 07       	cpc	r19, r21
 522:	18 f0       	brcs	.+6      	; 0x52a <Endpoint_BytesToEPSizeMaskDynamic+0x14>
	return Endpoint_BytesToEPSizeMask(Size);
}
 524:	82 95       	swap	r24
 526:	80 7f       	andi	r24, 0xF0	; 240
 528:	08 95       	ret
				{
					MaskVal++;
 52a:	8f 5f       	subi	r24, 0xFF	; 255
					CheckBytes <<= 1;
 52c:	22 0f       	add	r18, r18
 52e:	33 1f       	adc	r19, r19
 530:	f6 cf       	rjmp	.-20     	; 0x51e <Endpoint_BytesToEPSizeMaskDynamic+0x8>

00000532 <Endpoint_ConfigureEndpoint_Prv>:
					UENUM = EndpointNumber;
 532:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				UECONX |= (1 << EPEN);
 536:	eb ee       	ldi	r30, 0xEB	; 235
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	81 60       	ori	r24, 0x01	; 1
 53e:	80 83       	st	Z, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 540:	ed ee       	ldi	r30, 0xED	; 237
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	10 82       	st	Z, r1

	UECFG0X = UECFG0XData;
 546:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
	UECFG1X = UECFG1XData;
 54a:	40 83       	st	Z, r20
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 54c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>

	return Endpoint_IsConfigured();
}
 550:	88 1f       	adc	r24, r24
 552:	88 27       	eor	r24, r24
 554:	88 1f       	adc	r24, r24
 556:	08 95       	ret

00000558 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
 558:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__EEPROM_REGION_LENGTH__+0x7f00f4>

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 55c:	80 e0       	ldi	r24, 0x00	; 0
					UENUM = EndpointNumber;
 55e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
 562:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
		UEINTX  = 0;
 566:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		UECFG1X = 0;
 56a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
				UECONX &= ~(1 << EPEN);
 56e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 572:	9e 7f       	andi	r25, 0xFE	; 254
 574:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 578:	8f 5f       	subi	r24, 0xFF	; 255
 57a:	85 30       	cpi	r24, 0x05	; 5
 57c:	81 f7       	brne	.-32     	; 0x55e <Endpoint_ClearEndpoints+0x6>
		Endpoint_DisableEndpoint();
	}
}
 57e:	08 95       	ret

00000580 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 580:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <USB_ControlRequest>
 584:	87 ff       	sbrs	r24, 7
 586:	11 c0       	rjmp	.+34     	; 0x5aa <Endpoint_ClearStatusStage+0x2a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 588:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 58c:	82 ff       	sbrs	r24, 2
 58e:	06 c0       	rjmp	.+12     	; 0x59c <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 590:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 594:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 596:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 59c:	8e b3       	in	r24, 0x1e	; 30
 59e:	81 11       	cpse	r24, r1
 5a0:	f3 cf       	rjmp	.-26     	; 0x588 <Endpoint_ClearStatusStage+0x8>
			  return;
		}
		
		Endpoint_ClearIN();
	}
}
 5a2:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 5a4:	8e b3       	in	r24, 0x1e	; 30
 5a6:	88 23       	and	r24, r24
 5a8:	e1 f3       	breq	.-8      	; 0x5a2 <Endpoint_ClearStatusStage+0x22>
				return ((UEINTX & (1 << TXINI))  ? true : false);
 5aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		while (!(Endpoint_IsINReady()))
 5ae:	80 ff       	sbrs	r24, 0
 5b0:	f9 cf       	rjmp	.-14     	; 0x5a4 <Endpoint_ClearStatusStage+0x24>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5b6:	8e 77       	andi	r24, 0x7E	; 126
 5b8:	ee cf       	rjmp	.-36     	; 0x596 <Endpoint_ClearStatusStage+0x16>

000005ba <Endpoint_WaitUntilReady>:

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
 5ba:	95 e6       	ldi	r25, 0x65	; 101
				return (UECFG0X & ENDPOINT_DIR_IN);
 5bc:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 5c0:	82 2f       	mov	r24, r18
 5c2:	81 70       	andi	r24, 0x01	; 1
 5c4:	20 ff       	sbrs	r18, 0
 5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <Endpoint_WaitUntilReady+0x1a>
				return ((UEINTX & (1 << TXINI))  ? true : false);
 5c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		{
			if (Endpoint_IsINReady())
 5cc:	80 ff       	sbrs	r24, 0
 5ce:	06 c0       	rjmp	.+12     	; 0x5dc <Endpoint_WaitUntilReady+0x22>
			  return ENDPOINT_READYWAIT_NoError;
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5d4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 5d8:	22 fd       	sbrc	r18, 2
 5da:	1c c0       	rjmp	.+56     	; 0x614 <Endpoint_WaitUntilReady+0x5a>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 5dc:	8e b3       	in	r24, 0x1e	; 30
 5de:	88 23       	and	r24, r24
 5e0:	a1 f0       	breq	.+40     	; 0x60a <Endpoint_WaitUntilReady+0x50>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 5e2:	8e b3       	in	r24, 0x1e	; 30
 5e4:	85 30       	cpi	r24, 0x05	; 5
 5e6:	99 f0       	breq	.+38     	; 0x60e <Endpoint_WaitUntilReady+0x54>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 5e8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 5ec:	85 fd       	sbrc	r24, 5
 5ee:	11 c0       	rjmp	.+34     	; 0x612 <Endpoint_WaitUntilReady+0x58>
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
 5f0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 5f4:	82 ff       	sbrs	r24, 2
 5f6:	e2 cf       	rjmp	.-60     	; 0x5bc <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
 5f8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 5fc:	8b 7f       	andi	r24, 0xFB	; 251
 5fe:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>

			if (!(TimeoutMSRem--))
 602:	91 50       	subi	r25, 0x01	; 1
 604:	d9 f6       	brne	.-74     	; 0x5bc <Endpoint_WaitUntilReady+0x2>
			  return ENDPOINT_READYWAIT_Timeout;
 606:	84 e0       	ldi	r24, 0x04	; 4
 608:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
 60e:	83 e0       	ldi	r24, 0x03	; 3
 610:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
 612:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
 614:	08 95       	ret

00000616 <Endpoint_Write_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
 616:	9b 01       	movw	r18, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
 618:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <USB_ControlRequest+0x6>
 61c:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <USB_ControlRequest+0x7>
 620:	46 17       	cp	r20, r22
 622:	57 07       	cpc	r21, r23
 624:	98 f0       	brcs	.+38     	; 0x64c <Endpoint_Write_Control_Stream_LE+0x36>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 626:	67 2b       	or	r22, r23
 628:	29 f4       	brne	.+10     	; 0x634 <Endpoint_Write_Control_Stream_LE+0x1e>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 62a:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 62e:	4e 77       	andi	r20, 0x7E	; 126
 630:	40 93 e8 00 	sts	0x00E8, r20	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 634:	50 e0       	ldi	r21, 0x00	; 0
	while (Length || LastPacketFull)
 636:	21 15       	cp	r18, r1
 638:	31 05       	cpc	r19, r1
 63a:	51 f4       	brne	.+20     	; 0x650 <Endpoint_Write_Control_Stream_LE+0x3a>
 63c:	51 11       	cpse	r21, r1
 63e:	08 c0       	rjmp	.+16     	; 0x650 <Endpoint_Write_Control_Stream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 640:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
 644:	82 ff       	sbrs	r24, 2
 646:	30 c0       	rjmp	.+96     	; 0x6a8 <Endpoint_Write_Control_Stream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	08 95       	ret
 64c:	9a 01       	movw	r18, r20
 64e:	f2 cf       	rjmp	.-28     	; 0x634 <Endpoint_Write_Control_Stream_LE+0x1e>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 650:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsSETUPReceived())
 654:	43 fd       	sbrc	r20, 3
 656:	30 c0       	rjmp	.+96     	; 0x6b8 <Endpoint_Write_Control_Stream_LE+0xa2>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 658:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsOUTReceived())
 65c:	42 fd       	sbrc	r20, 2
 65e:	f0 cf       	rjmp	.-32     	; 0x640 <Endpoint_Write_Control_Stream_LE+0x2a>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 660:	4e b3       	in	r20, 0x1e	; 30
 662:	44 23       	and	r20, r20
 664:	59 f1       	breq	.+86     	; 0x6bc <Endpoint_Write_Control_Stream_LE+0xa6>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 666:	4e b3       	in	r20, 0x1e	; 30
 668:	45 30       	cpi	r20, 0x05	; 5
 66a:	21 f1       	breq	.+72     	; 0x6b4 <Endpoint_Write_Control_Stream_LE+0x9e>
				return ((UEINTX & (1 << TXINI))  ? true : false);
 66c:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
 670:	40 ff       	sbrs	r20, 0
 672:	e1 cf       	rjmp	.-62     	; 0x636 <Endpoint_Write_Control_Stream_LE+0x20>
					return UEBCLX;
 674:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 678:	21 15       	cp	r18, r1
 67a:	31 05       	cpc	r19, r1
 67c:	11 f0       	breq	.+4      	; 0x682 <Endpoint_Write_Control_Stream_LE+0x6c>
 67e:	48 30       	cpi	r20, 0x08	; 8
 680:	50 f0       	brcs	.+20     	; 0x696 <Endpoint_Write_Control_Stream_LE+0x80>
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 682:	51 e0       	ldi	r21, 0x01	; 1
 684:	48 30       	cpi	r20, 0x08	; 8
 686:	09 f0       	breq	.+2      	; 0x68a <Endpoint_Write_Control_Stream_LE+0x74>
 688:	50 e0       	ldi	r21, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 68a:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 68e:	4e 77       	andi	r20, 0x7E	; 126
 690:	40 93 e8 00 	sts	0x00E8, r20	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
 694:	d0 cf       	rjmp	.-96     	; 0x636 <Endpoint_Write_Control_Stream_LE+0x20>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 696:	fc 01       	movw	r30, r24
 698:	81 91       	ld	r24, Z+
				UEDATX = Byte;
 69a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Length--;
 69e:	21 50       	subi	r18, 0x01	; 1
 6a0:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
 6a2:	4f 5f       	subi	r20, 0xFF	; 255
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6a4:	cf 01       	movw	r24, r30
 6a6:	e8 cf       	rjmp	.-48     	; 0x678 <Endpoint_Write_Control_Stream_LE+0x62>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6a8:	8e b3       	in	r24, 0x1e	; 30
 6aa:	88 23       	and	r24, r24
 6ac:	39 f0       	breq	.+14     	; 0x6bc <Endpoint_Write_Control_Stream_LE+0xa6>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6ae:	8e b3       	in	r24, 0x1e	; 30
 6b0:	85 30       	cpi	r24, 0x05	; 5
 6b2:	31 f6       	brne	.-116    	; 0x640 <Endpoint_Write_Control_Stream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6b4:	83 e0       	ldi	r24, 0x03	; 3
}
 6b6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	08 95       	ret

000006c0 <Endpoint_Write_Control_PStream_LE>:
{
 6c0:	9b 01       	movw	r18, r22
	if (Length > USB_ControlRequest.wLength)
 6c2:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <USB_ControlRequest+0x6>
 6c6:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <USB_ControlRequest+0x7>
 6ca:	46 17       	cp	r20, r22
 6cc:	57 07       	cpc	r21, r23
 6ce:	98 f0       	brcs	.+38     	; 0x6f6 <Endpoint_Write_Control_PStream_LE+0x36>
	else if (!(Length))
 6d0:	67 2b       	or	r22, r23
 6d2:	29 f4       	brne	.+10     	; 0x6de <Endpoint_Write_Control_PStream_LE+0x1e>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6d4:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 6d8:	4e 77       	andi	r20, 0x7E	; 126
 6da:	40 93 e8 00 	sts	0x00E8, r20	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 6de:	50 e0       	ldi	r21, 0x00	; 0
	while (Length || LastPacketFull)
 6e0:	21 15       	cp	r18, r1
 6e2:	31 05       	cpc	r19, r1
 6e4:	51 f4       	brne	.+20     	; 0x6fa <Endpoint_Write_Control_PStream_LE+0x3a>
 6e6:	51 11       	cpse	r21, r1
 6e8:	08 c0       	rjmp	.+16     	; 0x6fa <Endpoint_Write_Control_PStream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsOUTReceived()))
 6ee:	82 ff       	sbrs	r24, 2
 6f0:	31 c0       	rjmp	.+98     	; 0x754 <Endpoint_Write_Control_PStream_LE+0x94>
	return ENDPOINT_RWCSTREAM_NoError;
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	08 95       	ret
 6f6:	9a 01       	movw	r18, r20
 6f8:	f2 cf       	rjmp	.-28     	; 0x6de <Endpoint_Write_Control_PStream_LE+0x1e>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6fa:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsSETUPReceived())
 6fe:	43 fd       	sbrc	r20, 3
 700:	31 c0       	rjmp	.+98     	; 0x764 <Endpoint_Write_Control_PStream_LE+0xa4>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 702:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsOUTReceived())
 706:	42 fd       	sbrc	r20, 2
 708:	f0 cf       	rjmp	.-32     	; 0x6ea <Endpoint_Write_Control_PStream_LE+0x2a>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 70a:	4e b3       	in	r20, 0x1e	; 30
 70c:	44 23       	and	r20, r20
 70e:	61 f1       	breq	.+88     	; 0x768 <Endpoint_Write_Control_PStream_LE+0xa8>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 710:	4e b3       	in	r20, 0x1e	; 30
 712:	45 30       	cpi	r20, 0x05	; 5
 714:	29 f1       	breq	.+74     	; 0x760 <Endpoint_Write_Control_PStream_LE+0xa0>
				return ((UEINTX & (1 << TXINI))  ? true : false);
 716:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
 71a:	40 ff       	sbrs	r20, 0
 71c:	e1 cf       	rjmp	.-62     	; 0x6e0 <Endpoint_Write_Control_PStream_LE+0x20>
					return UEBCLX;
 71e:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 722:	fc 01       	movw	r30, r24
 724:	cf 01       	movw	r24, r30
 726:	21 15       	cp	r18, r1
 728:	31 05       	cpc	r19, r1
 72a:	11 f0       	breq	.+4      	; 0x730 <Endpoint_Write_Control_PStream_LE+0x70>
 72c:	48 30       	cpi	r20, 0x08	; 8
 72e:	50 f0       	brcs	.+20     	; 0x744 <Endpoint_Write_Control_PStream_LE+0x84>
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 730:	51 e0       	ldi	r21, 0x01	; 1
 732:	48 30       	cpi	r20, 0x08	; 8
 734:	09 f0       	breq	.+2      	; 0x738 <Endpoint_Write_Control_PStream_LE+0x78>
 736:	50 e0       	ldi	r21, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 738:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 73c:	4e 77       	andi	r20, 0x7E	; 126
 73e:	40 93 e8 00 	sts	0x00E8, r20	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
 742:	ce cf       	rjmp	.-100    	; 0x6e0 <Endpoint_Write_Control_PStream_LE+0x20>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 744:	84 91       	lpm	r24, Z
				UEDATX = Byte;
 746:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Length--;
 74a:	21 50       	subi	r18, 0x01	; 1
 74c:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
 74e:	4f 5f       	subi	r20, 0xFF	; 255
 750:	31 96       	adiw	r30, 0x01	; 1
 752:	e8 cf       	rjmp	.-48     	; 0x724 <Endpoint_Write_Control_PStream_LE+0x64>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 754:	8e b3       	in	r24, 0x1e	; 30
 756:	88 23       	and	r24, r24
 758:	39 f0       	breq	.+14     	; 0x768 <Endpoint_Write_Control_PStream_LE+0xa8>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 75a:	8e b3       	in	r24, 0x1e	; 30
 75c:	85 30       	cpi	r24, 0x05	; 5
 75e:	29 f6       	brne	.-118    	; 0x6ea <Endpoint_Write_Control_PStream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 760:	83 e0       	ldi	r24, 0x03	; 3
}
 762:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 768:	82 e0       	ldi	r24, 0x02	; 2
 76a:	08 95       	ret

0000076c <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
 76c:	9b 01       	movw	r18, r22
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
 76e:	67 2b       	or	r22, r23
 770:	29 f4       	brne	.+10     	; 0x77c <Endpoint_Read_Control_Stream_LE+0x10>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 772:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 776:	4b 77       	andi	r20, 0x7B	; 123
 778:	40 93 e8 00 	sts	0x00E8, r20	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	  Endpoint_ClearOUT();
	
	while (Length)
 77c:	21 15       	cp	r18, r1
 77e:	31 05       	cpc	r19, r1
 780:	31 f4       	brne	.+12     	; 0x78e <Endpoint_Read_Control_Stream_LE+0x22>
				return ((UEINTX & (1 << TXINI))  ? true : false);
 782:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
 786:	80 ff       	sbrs	r24, 0
 788:	24 c0       	rjmp	.+72     	; 0x7d2 <Endpoint_Read_Control_Stream_LE+0x66>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	08 95       	ret
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 78e:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsSETUPReceived())
 792:	43 fd       	sbrc	r20, 3
 794:	26 c0       	rjmp	.+76     	; 0x7e2 <Endpoint_Read_Control_Stream_LE+0x76>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 796:	4e b3       	in	r20, 0x1e	; 30
 798:	44 23       	and	r20, r20
 79a:	29 f1       	breq	.+74     	; 0x7e6 <Endpoint_Read_Control_Stream_LE+0x7a>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 79c:	4e b3       	in	r20, 0x1e	; 30
 79e:	45 30       	cpi	r20, 0x05	; 5
 7a0:	f1 f0       	breq	.+60     	; 0x7de <Endpoint_Read_Control_Stream_LE+0x72>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7a2:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsOUTReceived())
 7a6:	42 ff       	sbrs	r20, 2
 7a8:	e9 cf       	rjmp	.-46     	; 0x77c <Endpoint_Read_Control_Stream_LE+0x10>
					return UEBCLX;
 7aa:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7ae:	fc 01       	movw	r30, r24
			while (Length && Endpoint_BytesInEndpoint())
 7b0:	41 11       	cpse	r20, r1
 7b2:	07 c0       	rjmp	.+14     	; 0x7c2 <Endpoint_Read_Control_Stream_LE+0x56>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 7b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 7b8:	8b 77       	andi	r24, 0x7B	; 123
 7ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
 7be:	cf 01       	movw	r24, r30
 7c0:	dd cf       	rjmp	.-70     	; 0x77c <Endpoint_Read_Control_Stream_LE+0x10>
				return UEDATX;
 7c2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7c6:	81 93       	st	Z+, r24
				Length--;
 7c8:	21 50       	subi	r18, 0x01	; 1
 7ca:	31 09       	sbc	r19, r1
			while (Length && Endpoint_BytesInEndpoint())
 7cc:	99 f3       	breq	.-26     	; 0x7b4 <Endpoint_Read_Control_Stream_LE+0x48>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7ce:	cf 01       	movw	r24, r30
 7d0:	ec cf       	rjmp	.-40     	; 0x7aa <Endpoint_Read_Control_Stream_LE+0x3e>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 7d2:	8e b3       	in	r24, 0x1e	; 30
 7d4:	88 23       	and	r24, r24
 7d6:	39 f0       	breq	.+14     	; 0x7e6 <Endpoint_Read_Control_Stream_LE+0x7a>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 7d8:	8e b3       	in	r24, 0x1e	; 30
 7da:	85 30       	cpi	r24, 0x05	; 5
 7dc:	91 f6       	brne	.-92     	; 0x782 <Endpoint_Read_Control_Stream_LE+0x16>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 7de:	83 e0       	ldi	r24, 0x03	; 3
}
 7e0:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 7e6:	82 e0       	ldi	r24, 0x02	; 2
 7e8:	08 95       	ret

000007ea <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
 7ea:	42 d0       	rcall	.+132    	; 0x870 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 7ec:	44 d0       	rcall	.+136    	; 0x876 <USB_INT_ClearAllInterrupts>
 7ee:	1e ba       	out	0x1e, r1	; 30
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
 7f0:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <USB_ConfigurationNumber>
	USB_ConfigurationNumber  = 0;
 7f4:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <USB_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
 7f8:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <USB_CurrentlySelfPowered>
	#endif
	
	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 7fc:	84 e0       	ldi	r24, 0x04	; 4
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 7fe:	89 bd       	out	0x29, r24	; 41
 800:	89 b5       	in	r24, 0x29	; 41
				PLLCSR |= (1 << PLLE);
 802:	82 60       	ori	r24, 0x02	; 2
 804:	89 bd       	out	0x29, r24	; 41
 806:	09 b4       	in	r0, 0x29	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 808:	00 fe       	sbrs	r0, 0
 80a:	fd cf       	rjmp	.-6      	; 0x806 <USB_ResetInterface+0x1c>
 80c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 810:	98 2f       	mov	r25, r24
				
				USBCON = (Temp & ~(1 << USBE));
 812:	9f 77       	andi	r25, 0x7F	; 127
 814:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 818:	80 68       	ori	r24, 0x80	; 128
				USBCON = (Temp |  (1 << USBE));
 81a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 81e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__EEPROM_REGION_LENGTH__+0x7f0063>
				REGCR   &= ~(1 << REGDIS);
 822:	8e 7f       	andi	r24, 0xFE	; 254
 824:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__EEPROM_REGION_LENGTH__+0x7f0063>
 828:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON  &= ~(1 << FRZCLK);
 82c:	8f 7d       	andi	r24, 0xDF	; 223
 82e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 832:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
				UDCON  &= ~(1 << DETACH);
 836:	8e 7f       	andi	r24, 0xFE	; 254
 838:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 83c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
 840:	8e 7f       	andi	r24, 0xFE	; 254
 842:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 846:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	USB_INT_Enable(USB_INT_SUSPEND);
 84a:	81 60       	ori	r24, 0x01	; 1
 84c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 850:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	USB_INT_Clear(USB_INT_EORSTI);
 854:	87 7f       	andi	r24, 0xF7	; 247
 856:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 85a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	USB_INT_Enable(USB_INT_EORSTI);
 85e:	88 60       	ori	r24, 0x08	; 8
 860:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 864:	08 95       	ret

00000866 <USB_Init>:
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
 866:	c1 df       	rcall	.-126    	; 0x7ea <USB_ResetInterface>
	USB_IsInitialized = true;
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <USB_IsInitialized>
}
 86e:	08 95       	ret

00000870 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 870:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	#endif
}
 874:	08 95       	ret

00000876 <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 876:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#endif
}
 87a:	08 95       	ret

0000087c <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 87c:	1f 92       	push	r1
 87e:	0f 92       	push	r0
 880:	0f b6       	in	r0, 0x3f	; 63
 882:	0f 92       	push	r0
 884:	11 24       	eor	r1, r1
 886:	2f 93       	push	r18
 888:	3f 93       	push	r19
 88a:	4f 93       	push	r20
 88c:	5f 93       	push	r21
 88e:	6f 93       	push	r22
 890:	7f 93       	push	r23
 892:	8f 93       	push	r24
 894:	9f 93       	push	r25
 896:	af 93       	push	r26
 898:	bf 93       	push	r27
 89a:	ef 93       	push	r30
 89c:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
 89e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 8a2:	80 ff       	sbrs	r24, 0
 8a4:	1b c0       	rjmp	.+54     	; 0x8dc <__vector_11+0x60>
 8a6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8aa:	80 ff       	sbrs	r24, 0
 8ac:	17 c0       	rjmp	.+46     	; 0x8dc <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
 8ae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 8b2:	8e 7f       	andi	r24, 0xFE	; 254
 8b4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>

		USB_INT_Disable(USB_INT_SUSPEND);
 8b8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8bc:	8e 7f       	andi	r24, 0xFE	; 254
 8be:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Enable(USB_INT_WAKEUP);
 8c2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8c6:	80 61       	ori	r24, 0x10	; 16
 8c8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				USBCON  |=  (1 << FRZCLK);
 8cc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 8d0:	80 62       	ori	r24, 0x20	; 32
 8d2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				PLLCSR  = 0;
 8d6:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 8d8:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 8da:	ef d1       	rcall	.+990    	; 0xcba <USB_Event_Stub>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
 8dc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 8e0:	84 ff       	sbrs	r24, 4
 8e2:	27 c0       	rjmp	.+78     	; 0x932 <__vector_11+0xb6>
 8e4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8e8:	84 ff       	sbrs	r24, 4
 8ea:	23 c0       	rjmp	.+70     	; 0x932 <__vector_11+0xb6>
				PLLCSR  = USB_PLL_PSC;
 8ec:	84 e0       	ldi	r24, 0x04	; 4
 8ee:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 8f0:	89 b5       	in	r24, 0x29	; 41
 8f2:	82 60       	ori	r24, 0x02	; 2
 8f4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 8f6:	09 b4       	in	r0, 0x29	; 41
 8f8:	00 fe       	sbrs	r0, 0
 8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <__vector_11+0x7a>
				USBCON  &= ~(1 << FRZCLK);
 8fc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 900:	8f 7d       	andi	r24, 0xDF	; 223
 902:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
 906:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 90a:	8f 7e       	andi	r24, 0xEF	; 239
 90c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>

		USB_INT_Disable(USB_INT_WAKEUP);
 910:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 914:	8f 7e       	andi	r24, 0xEF	; 239
 916:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Enable(USB_INT_SUSPEND);
 91a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 91e:	81 60       	ori	r24, 0x01	; 1
 920:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 924:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <USB_ConfigurationNumber>
 928:	81 11       	cpse	r24, r1
 92a:	4d c0       	rjmp	.+154    	; 0x9c6 <__vector_11+0x14a>
 92c:	81 e0       	ldi	r24, 0x01	; 1
		EVENT_USB_Device_Connect();
 92e:	8e bb       	out	0x1e, r24	; 30
 930:	c4 d1       	rcall	.+904    	; 0xcba <USB_Event_Stub>
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 932:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 936:	83 ff       	sbrs	r24, 3
 938:	27 c0       	rjmp	.+78     	; 0x988 <__vector_11+0x10c>
 93a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 93e:	83 ff       	sbrs	r24, 3
 940:	23 c0       	rjmp	.+70     	; 0x988 <__vector_11+0x10c>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 942:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 946:	87 7f       	andi	r24, 0xF7	; 247
 948:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>

		USB_DeviceState         = DEVICE_STATE_Default;
 94c:	82 e0       	ldi	r24, 0x02	; 2
 94e:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
 950:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <USB_ConfigurationNumber>

		USB_INT_Clear(USB_INT_SUSPEND);
 954:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 958:	8e 7f       	andi	r24, 0xFE	; 254
 95a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_INT_Disable(USB_INT_SUSPEND);
 95e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 962:	8e 7f       	andi	r24, 0xFE	; 254
 964:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Enable(USB_INT_WAKEUP);
 968:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 96c:	80 61       	ori	r24, 0x10	; 16
 96e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>

		Endpoint_ClearEndpoints();
 972:	f2 dd       	rcall	.-1052   	; 0x558 <Endpoint_ClearEndpoints>
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 974:	42 e0       	ldi	r20, 0x02	; 2
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	80 e0       	ldi	r24, 0x00	; 0
 97a:	db dd       	rcall	.-1098   	; 0x532 <Endpoint_ConfigureEndpoint_Prv>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
 97c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 980:	88 60       	ori	r24, 0x08	; 8
 982:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
		#endif

		EVENT_USB_Device_Reset();
 986:	99 d1       	rcall	.+818    	; 0xcba <USB_Event_Stub>
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 988:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 98c:	82 ff       	sbrs	r24, 2
 98e:	0a c0       	rjmp	.+20     	; 0x9a4 <__vector_11+0x128>
 990:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 994:	82 ff       	sbrs	r24, 2
 996:	06 c0       	rjmp	.+12     	; 0x9a4 <__vector_11+0x128>
	{
		USB_INT_Clear(USB_INT_SOFI);
 998:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 99c:	8b 7f       	andi	r24, 0xFB	; 251
 99e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		
		EVENT_USB_Device_StartOfFrame();
 9a2:	8b d1       	rcall	.+790    	; 0xcba <USB_Event_Stub>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
 9a4:	ff 91       	pop	r31
 9a6:	ef 91       	pop	r30
 9a8:	bf 91       	pop	r27
 9aa:	af 91       	pop	r26
 9ac:	9f 91       	pop	r25
 9ae:	8f 91       	pop	r24
 9b0:	7f 91       	pop	r23
 9b2:	6f 91       	pop	r22
 9b4:	5f 91       	pop	r21
 9b6:	4f 91       	pop	r20
 9b8:	3f 91       	pop	r19
 9ba:	2f 91       	pop	r18
 9bc:	0f 90       	pop	r0
 9be:	0f be       	out	0x3f, r0	; 63
 9c0:	0f 90       	pop	r0
 9c2:	1f 90       	pop	r1
 9c4:	18 95       	reti
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 9c6:	84 e0       	ldi	r24, 0x04	; 4
 9c8:	b2 cf       	rjmp	.-156    	; 0x92e <__vector_11+0xb2>

000009ca <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 9ca:	1f 92       	push	r1
 9cc:	0f 92       	push	r0
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	0f 92       	push	r0
 9d2:	11 24       	eor	r1, r1
 9d4:	ff 92       	push	r15
 9d6:	0f 93       	push	r16
 9d8:	1f 93       	push	r17
 9da:	2f 93       	push	r18
 9dc:	3f 93       	push	r19
 9de:	4f 93       	push	r20
 9e0:	5f 93       	push	r21
 9e2:	6f 93       	push	r22
 9e4:	7f 93       	push	r23
 9e6:	8f 93       	push	r24
 9e8:	9f 93       	push	r25
 9ea:	af 93       	push	r26
 9ec:	bf 93       	push	r27
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29
 9f2:	ef 93       	push	r30
 9f4:	ff 93       	push	r31
					return (UENUM & ENDPOINT_EPNUM_MASK);
 9f6:	c9 ee       	ldi	r28, 0xE9	; 233
 9f8:	d0 e0       	ldi	r29, 0x00	; 0
 9fa:	88 81       	ld	r24, Y
 9fc:	87 70       	andi	r24, 0x07	; 7
 9fe:	f8 2e       	mov	r15, r24
					UENUM = EndpointNumber;
 a00:	18 82       	st	Y, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint(); 

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
 a02:	00 ef       	ldi	r16, 0xF0	; 240
 a04:	10 e0       	ldi	r17, 0x00	; 0
 a06:	f8 01       	movw	r30, r16
 a08:	80 81       	ld	r24, Z
 a0a:	87 7f       	andi	r24, 0xF7	; 247
 a0c:	80 83       	st	Z, r24
    sei();
 a0e:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
 a10:	1d d0       	rcall	.+58     	; 0xa4c <USB_Device_ProcessControlRequest>
    cli();
 a12:	f8 94       	cli
 a14:	18 82       	st	Y, r1
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
 a16:	f8 01       	movw	r30, r16
 a18:	80 81       	ld	r24, Z
 a1a:	88 60       	ori	r24, 0x08	; 8
 a1c:	80 83       	st	Z, r24
 a1e:	f8 82       	st	Y, r15
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 a20:	ff 91       	pop	r31
 a22:	ef 91       	pop	r30
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	bf 91       	pop	r27
 a2a:	af 91       	pop	r26
 a2c:	9f 91       	pop	r25
 a2e:	8f 91       	pop	r24
 a30:	7f 91       	pop	r23
 a32:	6f 91       	pop	r22
 a34:	5f 91       	pop	r21
 a36:	4f 91       	pop	r20
 a38:	3f 91       	pop	r19
 a3a:	2f 91       	pop	r18
 a3c:	1f 91       	pop	r17
 a3e:	0f 91       	pop	r16
 a40:	ff 90       	pop	r15
 a42:	0f 90       	pop	r0
 a44:	0f be       	out	0x3f, r0	; 63
 a46:	0f 90       	pop	r0
 a48:	1f 90       	pop	r1
 a4a:	18 95       	reti

00000a4c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a4c:	1f 93       	push	r17
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	cd b7       	in	r28, 0x3d	; 61
 a54:	de b7       	in	r29, 0x3e	; 62
 a56:	aa 97       	sbiw	r28, 0x2a	; 42
 a58:	0f b6       	in	r0, 0x3f	; 63
 a5a:	f8 94       	cli
 a5c:	de bf       	out	0x3e, r29	; 62
 a5e:	0f be       	out	0x3f, r0	; 63
 a60:	cd bf       	out	0x3d, r28	; 61
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
 a62:	86 e2       	ldi	r24, 0x26	; 38
 a64:	92 e0       	ldi	r25, 0x02	; 2
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 a66:	fc 01       	movw	r30, r24
 a68:	01 96       	adiw	r24, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 a6a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 a6e:	20 83       	st	Z, r18
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a70:	22 e0       	ldi	r18, 0x02	; 2
 a72:	8e 32       	cpi	r24, 0x2E	; 46
 a74:	92 07       	cpc	r25, r18
 a76:	b9 f7       	brne	.-18     	; 0xa66 <USB_Device_ProcessControlRequest+0x1a>
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a78:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <USB_ControlRequest>
	
	switch (USB_ControlRequest.bRequest)
 a7c:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <USB_ControlRequest+0x1>
 a80:	9a 30       	cpi	r25, 0x0A	; 10
 a82:	08 f0       	brcs	.+2      	; 0xa86 <USB_Device_ProcessControlRequest+0x3a>
 a84:	04 c1       	rjmp	.+520    	; 0xc8e <USB_Device_ProcessControlRequest+0x242>
 a86:	e9 2f       	mov	r30, r25
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	e5 53       	subi	r30, 0x35	; 53
 a8c:	f8 4f       	sbci	r31, 0xF8	; 248
 a8e:	7b c2       	rjmp	.+1270   	; 0xf86 <__tablejump2__>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a90:	80 38       	cpi	r24, 0x80	; 128
 a92:	81 f0       	breq	.+32     	; 0xab4 <USB_Device_ProcessControlRequest+0x68>
 a94:	82 38       	cpi	r24, 0x82	; 130
 a96:	09 f0       	breq	.+2      	; 0xa9a <USB_Device_ProcessControlRequest+0x4e>
 a98:	fa c0       	rjmp	.+500    	; 0xc8e <USB_Device_ProcessControlRequest+0x242>
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a9a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <USB_ControlRequest+0x4>
 a9e:	87 70       	andi	r24, 0x07	; 7
					UENUM = EndpointNumber;
 aa0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 aa4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 aa8:	85 fb       	bst	r24, 5
 aaa:	88 27       	eor	r24, r24
 aac:	80 f9       	bld	r24, 0
					UENUM = EndpointNumber;
 aae:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			}
 ab2:	06 c0       	rjmp	.+12     	; 0xac0 <USB_Device_ProcessControlRequest+0x74>
	uint8_t CurrentStatus = 0;
 ab4:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <USB_CurrentlySelfPowered>
			if (USB_RemoteWakeupEnabled)
 ab8:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <USB_RemoteWakeupEnabled>
 abc:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 abe:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
 ac0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 ac4:	97 7f       	andi	r25, 0xF7	; 247
 ac6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 aca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Word >> 8);
 ace:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ad2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 ad6:	8e 77       	andi	r24, 0x7E	; 126
 ad8:	ec c0       	rjmp	.+472    	; 0xcb2 <USB_Device_ProcessControlRequest+0x266>
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ada:	88 23       	and	r24, r24
 adc:	09 f4       	brne	.+2      	; 0xae0 <USB_Device_ProcessControlRequest+0x94>
 ade:	d9 c0       	rjmp	.+434    	; 0xc92 <USB_Device_ProcessControlRequest+0x246>
 ae0:	82 30       	cpi	r24, 0x02	; 2
 ae2:	09 f0       	breq	.+2      	; 0xae6 <USB_Device_ProcessControlRequest+0x9a>
 ae4:	d4 c0       	rjmp	.+424    	; 0xc8e <USB_Device_ProcessControlRequest+0x242>
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
 ae6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
 aea:	81 11       	cpse	r24, r1
 aec:	dd c0       	rjmp	.+442    	; 0xca8 <USB_Device_ProcessControlRequest+0x25c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 aee:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <USB_ControlRequest+0x4>
 af2:	87 70       	andi	r24, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
 af4:	09 f4       	brne	.+2      	; 0xaf8 <USB_Device_ProcessControlRequest+0xac>
 af6:	3c c0       	rjmp	.+120    	; 0xb70 <USB_Device_ProcessControlRequest+0x124>
					UENUM = EndpointNumber;
 af8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
 afc:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
 b00:	20 ff       	sbrs	r18, 0
 b02:	36 c0       	rjmp	.+108    	; 0xb70 <USB_Device_ProcessControlRequest+0x124>
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
 b04:	93 30       	cpi	r25, 0x03	; 3
 b06:	31 f4       	brne	.+12     	; 0xb14 <USB_Device_ProcessControlRequest+0xc8>
				UECONX |= (1 << STALLRQ);
 b08:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b0c:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
 b0e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			}
 b12:	ca c0       	rjmp	.+404    	; 0xca8 <USB_Device_ProcessControlRequest+0x25c>
				UECONX |= (1 << STALLRQC);
 b14:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b18:	90 61       	ori	r25, 0x10	; 16
 b1a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				UERST = (1 << EndpointNumber);
 b1e:	21 e0       	ldi	r18, 0x01	; 1
 b20:	30 e0       	ldi	r19, 0x00	; 0
 b22:	01 c0       	rjmp	.+2      	; 0xb26 <USB_Device_ProcessControlRequest+0xda>
 b24:	22 0f       	add	r18, r18
 b26:	8a 95       	dec	r24
 b28:	ea f7       	brpl	.-6      	; 0xb24 <USB_Device_ProcessControlRequest+0xd8>
 b2a:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
 b2e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UECONX |= (1 << RSTDT);
 b32:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b36:	88 60       	ori	r24, 0x08	; 8
 b38:	ea cf       	rjmp	.-44     	; 0xb0e <USB_Device_ProcessControlRequest+0xc2>
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b3a:	81 11       	cpse	r24, r1
 b3c:	a8 c0       	rjmp	.+336    	; 0xc8e <USB_Device_ProcessControlRequest+0x242>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b3e:	10 91 28 02 	lds	r17, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
				UEINTX &= ~(1 << RXSTPI);
 b42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b46:	87 7f       	andi	r24, 0xF7	; 247
 b48:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
 b4c:	19 dd       	rcall	.-1486   	; 0x580 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI))  ? true : false);
 b4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsINReady()))
 b52:	80 ff       	sbrs	r24, 0
 b54:	0a c0       	rjmp	.+20     	; 0xb6a <USB_Device_ProcessControlRequest+0x11e>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 b56:	81 2f       	mov	r24, r17
 b58:	8f 77       	andi	r24, 0x7F	; 127
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b5a:	92 e0       	ldi	r25, 0x02	; 2
 b5c:	09 f0       	breq	.+2      	; 0xb60 <USB_Device_ProcessControlRequest+0x114>
 b5e:	93 e0       	ldi	r25, 0x03	; 3
 b60:	9e bb       	out	0x1e, r25	; 30
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 b62:	80 68       	ori	r24, 0x80	; 128
 b64:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
			}			
 b68:	03 c0       	rjmp	.+6      	; 0xb70 <USB_Device_ProcessControlRequest+0x124>
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 b6a:	8e b3       	in	r24, 0x1e	; 30
 b6c:	81 11       	cpse	r24, r1
 b6e:	ef cf       	rjmp	.-34     	; 0xb4e <USB_Device_ProcessControlRequest+0x102>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (Endpoint_IsSETUPReceived())
 b74:	83 ff       	sbrs	r24, 3
 b76:	0a c0       	rjmp	.+20     	; 0xb8c <USB_Device_ProcessControlRequest+0x140>
				UECONX |= (1 << STALLRQ);
 b78:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 b7c:	80 62       	ori	r24, 0x20	; 32
 b7e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				UEINTX &= ~(1 << RXSTPI);
 b82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b86:	87 7f       	andi	r24, 0xF7	; 247
 b88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
}
 b8c:	aa 96       	adiw	r28, 0x2a	; 42
 b8e:	0f b6       	in	r0, 0x3f	; 63
 b90:	f8 94       	cli
 b92:	de bf       	out	0x3e, r29	; 62
 b94:	0f be       	out	0x3f, r0	; 63
 b96:	cd bf       	out	0x3d, r28	; 61
 b98:	df 91       	pop	r29
 b9a:	cf 91       	pop	r28
 b9c:	1f 91       	pop	r17
 b9e:	08 95       	ret
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ba0:	80 58       	subi	r24, 0x80	; 128
 ba2:	82 30       	cpi	r24, 0x02	; 2
 ba4:	08 f0       	brcs	.+2      	; 0xba8 <USB_Device_ProcessControlRequest+0x15c>
 ba6:	73 c0       	rjmp	.+230    	; 0xc8e <USB_Device_ProcessControlRequest+0x242>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 ba8:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
 bac:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <USB_ControlRequest+0x3>
 bb0:	8c 3d       	cpi	r24, 0xDC	; 220
 bb2:	23 e0       	ldi	r18, 0x03	; 3
 bb4:	92 07       	cpc	r25, r18
 bb6:	99 f5       	brne	.+102    	; 0xc1e <USB_Device_ProcessControlRequest+0x1d2>
	SignatureDescriptor.Header.Type = DTYPE_String;
 bb8:	83 e0       	ldi	r24, 0x03	; 3
 bba:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
 bbc:	8a e2       	ldi	r24, 0x2A	; 42
 bbe:	89 83       	std	Y+1, r24	; 0x01
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 bc0:	4f b7       	in	r20, 0x3f	; 63
    cli();
 bc2:	f8 94       	cli
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 bc4:	de 01       	movw	r26, r28
 bc6:	13 96       	adiw	r26, 0x03	; 3
 bc8:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t SigReadAddress = 0x0E;
 bca:	3e e0       	ldi	r19, 0x0E	; 14
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 bcc:	51 e2       	ldi	r21, 0x21	; 33
 bce:	e3 2f       	mov	r30, r19
 bd0:	f0 e0       	ldi	r31, 0x00	; 0
 bd2:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 bd6:	e4 91       	lpm	r30, Z
			if (SerialCharNum & 0x01)
 bd8:	20 ff       	sbrs	r18, 0
 bda:	03 c0       	rjmp	.+6      	; 0xbe2 <USB_Device_ProcessControlRequest+0x196>
				SerialByte >>= 4;
 bdc:	e2 95       	swap	r30
 bde:	ef 70       	andi	r30, 0x0F	; 15
				SigReadAddress++;
 be0:	3f 5f       	subi	r19, 0xFF	; 255
	Nibble = ((Nibble & 0x0F) + '0');
 be2:	ef 70       	andi	r30, 0x0F	; 15
 be4:	80 e3       	ldi	r24, 0x30	; 48
 be6:	8e 0f       	add	r24, r30
	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
 be8:	8a 33       	cpi	r24, 0x3A	; 58
 bea:	10 f0       	brcs	.+4      	; 0xbf0 <USB_Device_ProcessControlRequest+0x1a4>
 bec:	87 e3       	ldi	r24, 0x37	; 55
 bee:	8e 0f       	add	r24, r30
			SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	8d 93       	st	X+, r24
 bf4:	9d 93       	st	X+, r25
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
 bf6:	2f 5f       	subi	r18, 0xFF	; 255
 bf8:	24 31       	cpi	r18, 0x14	; 20
 bfa:	49 f7       	brne	.-46     	; 0xbce <USB_Device_ProcessControlRequest+0x182>
    SREG = *__s;
 bfc:	4f bf       	out	0x3f, r20	; 63
 bfe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c02:	87 7f       	andi	r24, 0xF7	; 247
 c04:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 c08:	6a e2       	ldi	r22, 0x2A	; 42
 c0a:	70 e0       	ldi	r23, 0x00	; 0
 c0c:	ce 01       	movw	r24, r28
 c0e:	01 96       	adiw	r24, 0x01	; 1
 c10:	02 dd       	rcall	.-1532   	; 0x616 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 c12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c16:	8b 77       	andi	r24, 0x7B	; 123
 c18:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c1c:	a9 cf       	rjmp	.-174    	; 0xb70 <USB_Device_ProcessControlRequest+0x124>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c1e:	ae 01       	movw	r20, r28
 c20:	4f 5f       	subi	r20, 0xFF	; 255
 c22:	5f 4f       	sbci	r21, 0xFF	; 255
 c24:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <USB_ControlRequest+0x4>
 c28:	45 dc       	rcall	.-1910   	; 0x4b4 <CALLBACK_USB_GetDescriptor>
 c2a:	bc 01       	movw	r22, r24
 c2c:	89 2b       	or	r24, r25
 c2e:	09 f4       	brne	.+2      	; 0xc32 <USB_Device_ProcessControlRequest+0x1e6>
 c30:	9f cf       	rjmp	.-194    	; 0xb70 <USB_Device_ProcessControlRequest+0x124>
				UEINTX &= ~(1 << RXSTPI);
 c32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c36:	87 7f       	andi	r24, 0xF7	; 247
 c38:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 c3c:	89 81       	ldd	r24, Y+1	; 0x01
 c3e:	9a 81       	ldd	r25, Y+2	; 0x02
 c40:	3f dd       	rcall	.-1410   	; 0x6c0 <Endpoint_Write_Control_PStream_LE>
 c42:	e7 cf       	rjmp	.-50     	; 0xc12 <USB_Device_ProcessControlRequest+0x1c6>
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c44:	80 38       	cpi	r24, 0x80	; 128
 c46:	19 f5       	brne	.+70     	; 0xc8e <USB_Device_ProcessControlRequest+0x242>
 c48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c4c:	87 7f       	andi	r24, 0xF7	; 247
 c4e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Byte(USB_ConfigurationNumber);
 c52:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <USB_ConfigurationNumber>
				UEDATX = Byte;
 c56:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 c5a:	3b cf       	rjmp	.-394    	; 0xad2 <USB_Device_ProcessControlRequest+0x86>
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c5c:	81 11       	cpse	r24, r1
 c5e:	17 c0       	rjmp	.+46     	; 0xc8e <USB_Device_ProcessControlRequest+0x242>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c60:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
 c64:	92 30       	cpi	r25, 0x02	; 2
 c66:	08 f0       	brcs	.+2      	; 0xc6a <USB_Device_ProcessControlRequest+0x21e>
 c68:	83 cf       	rjmp	.-250    	; 0xb70 <USB_Device_ProcessControlRequest+0x124>
				UEINTX &= ~(1 << RXSTPI);
 c6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c6e:	87 7f       	andi	r24, 0xF7	; 247
 c70:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c74:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <USB_ConfigurationNumber>
	Endpoint_ClearStatusStage();
 c78:	83 dc       	rcall	.-1786   	; 0x580 <Endpoint_ClearStatusStage>
	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 c7a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <USB_ConfigurationNumber>
 c7e:	81 11       	cpse	r24, r1
 c80:	04 c0       	rjmp	.+8      	; 0xc8a <USB_Device_ProcessControlRequest+0x23e>
	EVENT_USB_Device_ConfigurationChanged();
 c82:	83 e0       	ldi	r24, 0x03	; 3
 c84:	8e bb       	out	0x1e, r24	; 30
 c86:	37 db       	rcall	.-2450   	; 0x2f6 <EVENT_USB_Device_ConfigurationChanged>
	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 c88:	73 cf       	rjmp	.-282    	; 0xb70 <USB_Device_ProcessControlRequest+0x124>
 c8a:	84 e0       	ldi	r24, 0x04	; 4
	  EVENT_USB_Device_UnhandledControlRequest();
 c8c:	fb cf       	rjmp	.-10     	; 0xc84 <USB_Device_ProcessControlRequest+0x238>
 c8e:	36 db       	rcall	.-2452   	; 0x2fc <EVENT_USB_Device_UnhandledControlRequest>
 c90:	6f cf       	rjmp	.-290    	; 0xb70 <USB_Device_ProcessControlRequest+0x124>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
 c92:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
 c96:	81 30       	cpi	r24, 0x01	; 1
 c98:	09 f0       	breq	.+2      	; 0xc9c <USB_Device_ProcessControlRequest+0x250>
 c9a:	6a cf       	rjmp	.-300    	; 0xb70 <USB_Device_ProcessControlRequest+0x124>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 c9c:	81 e0       	ldi	r24, 0x01	; 1
 c9e:	93 30       	cpi	r25, 0x03	; 3
 ca0:	09 f0       	breq	.+2      	; 0xca4 <USB_Device_ProcessControlRequest+0x258>
 ca2:	80 e0       	ldi	r24, 0x00	; 0
 ca4:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <USB_RemoteWakeupEnabled>
					UENUM = EndpointNumber;
 ca8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				UEINTX &= ~(1 << RXSTPI);
 cac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cb0:	87 7f       	andi	r24, 0xF7	; 247
 cb2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
 cb6:	64 dc       	rcall	.-1848   	; 0x580 <Endpoint_ClearStatusStage>
}
 cb8:	5b cf       	rjmp	.-330    	; 0xb70 <USB_Device_ProcessControlRequest+0x124>

00000cba <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 cba:	08 95       	ret

00000cbc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 cbc:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 cbe:	8e b3       	in	r24, 0x1e	; 30
 cc0:	88 23       	and	r24, r24
 cc2:	59 f0       	breq	.+22     	; 0xcda <USB_USBTask+0x1e>
					return (UENUM & ENDPOINT_EPNUM_MASK);
 cc4:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 cc8:	c7 70       	andi	r28, 0x07	; 7
					UENUM = EndpointNumber;
 cca:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 cd2:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 cd4:	bb de       	rcall	.-650    	; 0xa4c <USB_Device_ProcessControlRequest>
					UENUM = EndpointNumber;
 cd6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
}
 cda:	cf 91       	pop	r28
 cdc:	08 95       	ret

00000cde <CDC_Device_Event_Stub>:
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{

}
 cde:	08 95       	ret

00000ce0 <CDC_Device_ProcessControlRequest>:

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 ce0:	cf 93       	push	r28
 ce2:	df 93       	push	r29
 ce4:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ce6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (!(Endpoint_IsSETUPReceived()))
 cea:	83 ff       	sbrs	r24, 3
 cec:	12 c0       	rjmp	.+36     	; 0xd12 <CDC_Device_ProcessControlRequest+0x32>
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 cee:	28 81       	ld	r18, Y
 cf0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <USB_ControlRequest+0x4>
 cf4:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <USB_ControlRequest+0x5>
 cf8:	28 17       	cp	r18, r24
 cfa:	19 06       	cpc	r1, r25
 cfc:	51 f4       	brne	.+20     	; 0xd12 <CDC_Device_ProcessControlRequest+0x32>
	  return;

	switch (USB_ControlRequest.bRequest)
 cfe:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <USB_ControlRequest+0x1>
 d02:	82 32       	cpi	r24, 0x22	; 34
 d04:	09 f4       	brne	.+2      	; 0xd08 <CDC_Device_ProcessControlRequest+0x28>
 d06:	40 c0       	rjmp	.+128    	; 0xd88 <CDC_Device_ProcessControlRequest+0xa8>
 d08:	38 f4       	brcc	.+14     	; 0xd18 <CDC_Device_ProcessControlRequest+0x38>
 d0a:	80 32       	cpi	r24, 0x20	; 32
 d0c:	49 f1       	breq	.+82     	; 0xd60 <CDC_Device_ProcessControlRequest+0x80>
 d0e:	81 32       	cpi	r24, 0x21	; 33
 d10:	99 f0       	breq	.+38     	; 0xd38 <CDC_Device_ProcessControlRequest+0x58>
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 d12:	df 91       	pop	r29
 d14:	cf 91       	pop	r28
 d16:	08 95       	ret
	switch (USB_ControlRequest.bRequest)
 d18:	83 32       	cpi	r24, 0x23	; 35
 d1a:	d9 f7       	brne	.-10     	; 0xd12 <CDC_Device_ProcessControlRequest+0x32>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d1c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <USB_ControlRequest>
 d20:	81 32       	cpi	r24, 0x21	; 33
 d22:	b9 f7       	brne	.-18     	; 0xd12 <CDC_Device_ProcessControlRequest+0x32>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d28:	87 7f       	andi	r24, 0xF7	; 247
 d2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 d2e:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
 d32:	ce 01       	movw	r24, r28
 d34:	d4 df       	rcall	.-88     	; 0xcde <CDC_Device_Event_Stub>
 d36:	37 c0       	rjmp	.+110    	; 0xda6 <CDC_Device_ProcessControlRequest+0xc6>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d38:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <USB_ControlRequest>
 d3c:	81 3a       	cpi	r24, 0xA1	; 161
 d3e:	49 f7       	brne	.-46     	; 0xd12 <CDC_Device_ProcessControlRequest+0x32>
 d40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d44:	87 7f       	andi	r24, 0xF7	; 247
 d46:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 d4a:	67 e0       	ldi	r22, 0x07	; 7
 d4c:	70 e0       	ldi	r23, 0x00	; 0
 d4e:	ce 01       	movw	r24, r28
 d50:	0f 96       	adiw	r24, 0x0f	; 15
 d52:	61 dc       	rcall	.-1854   	; 0x616 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d58:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d5a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
 d5e:	d9 cf       	rjmp	.-78     	; 0xd12 <CDC_Device_ProcessControlRequest+0x32>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d60:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <USB_ControlRequest>
 d64:	81 32       	cpi	r24, 0x21	; 33
 d66:	a9 f6       	brne	.-86     	; 0xd12 <CDC_Device_ProcessControlRequest+0x32>
				UEINTX &= ~(1 << RXSTPI);
 d68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d6c:	87 7f       	andi	r24, 0xF7	; 247
 d6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
 d72:	67 e0       	ldi	r22, 0x07	; 7
 d74:	70 e0       	ldi	r23, 0x00	; 0
 d76:	ce 01       	movw	r24, r28
 d78:	0f 96       	adiw	r24, 0x0f	; 15
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 d7a:	f8 dc       	rcall	.-1552   	; 0x76c <Endpoint_Read_Control_Stream_LE>
 d7c:	ce 01       	movw	r24, r28
 d7e:	c1 da       	rcall	.-2686   	; 0x302 <EVENT_CDC_Device_LineEncodingChanged>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d84:	8e 77       	andi	r24, 0x7E	; 126
 d86:	e9 cf       	rjmp	.-46     	; 0xd5a <CDC_Device_ProcessControlRequest+0x7a>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d88:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <USB_ControlRequest>
 d8c:	81 32       	cpi	r24, 0x21	; 33
 d8e:	09 f0       	breq	.+2      	; 0xd92 <CDC_Device_ProcessControlRequest+0xb2>
 d90:	c0 cf       	rjmp	.-128    	; 0xd12 <CDC_Device_ProcessControlRequest+0x32>
				UEINTX &= ~(1 << RXSTPI);
 d92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d96:	87 7f       	andi	r24, 0xF7	; 247
 d98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 d9c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <USB_ControlRequest+0x2>
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 da0:	8d 87       	std	Y+13, r24	; 0x0d
 da2:	ce 01       	movw	r24, r28
}
 da4:	5e db       	rcall	.-2372   	; 0x462 <EVENT_CDC_Device_ControLineStateChanged>
 da6:	df 91       	pop	r29
				Endpoint_ClearStatusStage();
 da8:	cf 91       	pop	r28
 daa:	ea cb       	rjmp	.-2092   	; 0x580 <Endpoint_ClearStatusStage>

00000dac <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 dac:	0f 93       	push	r16
 dae:	1f 93       	push	r17
 db0:	cf 93       	push	r28
 db2:	df 93       	push	r29
 db4:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 db6:	fc 01       	movw	r30, r24
 db8:	3d 96       	adiw	r30, 0x0d	; 13
 dba:	89 e0       	ldi	r24, 0x09	; 9
 dbc:	df 01       	movw	r26, r30
 dbe:	1d 92       	st	X+, r1
 dc0:	8a 95       	dec	r24
 dc2:	e9 f7       	brne	.-6      	; 0xdbe <CDC_Device_ConfigureEndpoints+0x12>

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
 dc4:	8a 81       	ldd	r24, Y+2	; 0x02
 dc6:	9b 81       	ldd	r25, Y+3	; 0x03
 dc8:	2c 81       	ldd	r18, Y+4	; 0x04
 dca:	10 e0       	ldi	r17, 0x00	; 0
 dcc:	21 11       	cpse	r18, r1
 dce:	14 e0       	ldi	r17, 0x04	; 4
 dd0:	09 81       	ldd	r16, Y+1	; 0x01
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 dd2:	a1 db       	rcall	.-2238   	; 0x516 <Endpoint_BytesToEPSizeMaskDynamic>
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 dd4:	41 2f       	mov	r20, r17
 dd6:	48 2b       	or	r20, r24
 dd8:	42 60       	ori	r20, 0x02	; 2
 dda:	61 e8       	ldi	r22, 0x81	; 129
 ddc:	80 2f       	mov	r24, r16
 dde:	a9 db       	rcall	.-2222   	; 0x532 <Endpoint_ConfigureEndpoint_Prv>
 de0:	88 23       	and	r24, r24
 de2:	11 f1       	breq	.+68     	; 0xe28 <CDC_Device_ConfigureEndpoints+0x7c>
							         CDCInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
 de4:	8e 81       	ldd	r24, Y+6	; 0x06
 de6:	9f 81       	ldd	r25, Y+7	; 0x07
 de8:	28 85       	ldd	r18, Y+8	; 0x08
 dea:	10 e0       	ldi	r17, 0x00	; 0
 dec:	21 11       	cpse	r18, r1
 dee:	14 e0       	ldi	r17, 0x04	; 4
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 df0:	0d 81       	ldd	r16, Y+5	; 0x05
 df2:	91 db       	rcall	.-2270   	; 0x516 <Endpoint_BytesToEPSizeMaskDynamic>
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 df4:	41 2f       	mov	r20, r17
 df6:	48 2b       	or	r20, r24
 df8:	42 60       	ori	r20, 0x02	; 2
 dfa:	60 e8       	ldi	r22, 0x80	; 128
 dfc:	80 2f       	mov	r24, r16
 dfe:	99 db       	rcall	.-2254   	; 0x532 <Endpoint_ConfigureEndpoint_Prv>
 e00:	88 23       	and	r24, r24
 e02:	91 f0       	breq	.+36     	; 0xe28 <CDC_Device_ConfigureEndpoints+0x7c>
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_INTERRUPT,
 e04:	8a 85       	ldd	r24, Y+10	; 0x0a
 e06:	9b 85       	ldd	r25, Y+11	; 0x0b
 e08:	2c 85       	ldd	r18, Y+12	; 0x0c
 e0a:	10 e0       	ldi	r17, 0x00	; 0
 e0c:	21 11       	cpse	r18, r1
 e0e:	14 e0       	ldi	r17, 0x04	; 4
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 e10:	c9 85       	ldd	r28, Y+9	; 0x09
 e12:	81 db       	rcall	.-2302   	; 0x516 <Endpoint_BytesToEPSizeMaskDynamic>
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 e14:	41 2f       	mov	r20, r17
 e16:	48 2b       	or	r20, r24
 e18:	42 60       	ori	r20, 0x02	; 2
 e1a:	61 ec       	ldi	r22, 0xC1	; 193
	{
		return false;
	}

	return true;
}
 e1c:	8c 2f       	mov	r24, r28
 e1e:	df 91       	pop	r29
 e20:	cf 91       	pop	r28
 e22:	1f 91       	pop	r17
 e24:	0f 91       	pop	r16
 e26:	85 cb       	rjmp	.-2294   	; 0x532 <Endpoint_ConfigureEndpoint_Prv>
 e28:	80 e0       	ldi	r24, 0x00	; 0
 e2a:	df 91       	pop	r29
 e2c:	cf 91       	pop	r28
 e2e:	1f 91       	pop	r17
 e30:	0f 91       	pop	r16
 e32:	08 95       	ret

00000e34 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Data, Length, NO_STREAM_CALLBACK);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 e34:	cf 93       	push	r28
 e36:	fc 01       	movw	r30, r24
 e38:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 e3a:	8e b3       	in	r24, 0x1e	; 30
 e3c:	84 30       	cpi	r24, 0x04	; 4
 e3e:	e9 f4       	brne	.+58     	; 0xe7a <CDC_Device_SendByte+0x46>
 e40:	87 85       	ldd	r24, Z+15	; 0x0f
 e42:	90 89       	ldd	r25, Z+16	; 0x10
 e44:	a1 89       	ldd	r26, Z+17	; 0x11
 e46:	b2 89       	ldd	r27, Z+18	; 0x12
 e48:	89 2b       	or	r24, r25
 e4a:	8a 2b       	or	r24, r26
 e4c:	8b 2b       	or	r24, r27
 e4e:	a9 f0       	breq	.+42     	; 0xe7a <CDC_Device_SendByte+0x46>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 e50:	81 81       	ldd	r24, Z+1	; 0x01
					UENUM = EndpointNumber;
 e52:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (!(Endpoint_IsReadWriteAllowed()))
 e5a:	85 ff       	sbrs	r24, 5
 e5c:	05 c0       	rjmp	.+10     	; 0xe68 <CDC_Device_SendByte+0x34>
				UEDATX = Byte;
 e5e:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
 e62:	80 e0       	ldi	r24, 0x00	; 0
}
 e64:	cf 91       	pop	r28
 e66:	08 95       	ret
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 e6c:	8e 77       	andi	r24, 0x7E	; 126
 e6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 e72:	a3 db       	rcall	.-2234   	; 0x5ba <Endpoint_WaitUntilReady>
 e74:	88 23       	and	r24, r24
 e76:	99 f3       	breq	.-26     	; 0xe5e <CDC_Device_SendByte+0x2a>
 e78:	f5 cf       	rjmp	.-22     	; 0xe64 <CDC_Device_SendByte+0x30>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 e7a:	82 e0       	ldi	r24, 0x02	; 2
 e7c:	f3 cf       	rjmp	.-26     	; 0xe64 <CDC_Device_SendByte+0x30>

00000e7e <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 e7e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 e80:	8e b3       	in	r24, 0x1e	; 30
 e82:	84 30       	cpi	r24, 0x04	; 4
 e84:	19 f5       	brne	.+70     	; 0xecc <CDC_Device_Flush+0x4e>
 e86:	87 85       	ldd	r24, Z+15	; 0x0f
 e88:	90 89       	ldd	r25, Z+16	; 0x10
 e8a:	a1 89       	ldd	r26, Z+17	; 0x11
 e8c:	b2 89       	ldd	r27, Z+18	; 0x12
 e8e:	89 2b       	or	r24, r25
 e90:	8a 2b       	or	r24, r26
 e92:	8b 2b       	or	r24, r27
 e94:	d9 f0       	breq	.+54     	; 0xecc <CDC_Device_Flush+0x4e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 e96:	81 81       	ldd	r24, Z+1	; 0x01
					UENUM = EndpointNumber;
 e98:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
					return UEBCLX;
 e9c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>

	if (!(Endpoint_BytesInEndpoint()))
 ea0:	81 11       	cpse	r24, r1
 ea2:	02 c0       	rjmp	.+4      	; 0xea8 <CDC_Device_Flush+0x2a>
	  return ENDPOINT_READYWAIT_NoError;
 ea4:	80 e0       	ldi	r24, 0x00	; 0
 ea6:	08 95       	ret
				return ((UEINTX & (1 << RWAL)) ? true : false);
 ea8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 eac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 eb0:	8e 77       	andi	r24, 0x7E	; 126
 eb2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	
	bool BankFull = !(Endpoint_IsReadWriteAllowed());
	
	Endpoint_ClearIN();
	
	if (BankFull)
 eb6:	95 fd       	sbrc	r25, 5
 eb8:	f5 cf       	rjmp	.-22     	; 0xea4 <CDC_Device_Flush+0x26>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 eba:	7f db       	rcall	.-2306   	; 0x5ba <Endpoint_WaitUntilReady>
 ebc:	81 11       	cpse	r24, r1
 ebe:	07 c0       	rjmp	.+14     	; 0xece <CDC_Device_Flush+0x50>
 ec0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 ec4:	9e 77       	andi	r25, 0x7E	; 126
 ec6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
 eca:	08 95       	ret
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 ecc:	82 e0       	ldi	r24, 0x02	; 2

		Endpoint_ClearIN();
	}
	
	return ENDPOINT_READYWAIT_NoError;
}
 ece:	08 95       	ret

00000ed0 <CDC_Device_USBTask>:
{
 ed0:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 ed2:	8e b3       	in	r24, 0x1e	; 30
 ed4:	84 30       	cpi	r24, 0x04	; 4
 ed6:	51 f4       	brne	.+20     	; 0xeec <CDC_Device_USBTask+0x1c>
 ed8:	87 85       	ldd	r24, Z+15	; 0x0f
 eda:	90 89       	ldd	r25, Z+16	; 0x10
 edc:	a1 89       	ldd	r26, Z+17	; 0x11
 ede:	b2 89       	ldd	r27, Z+18	; 0x12
 ee0:	89 2b       	or	r24, r25
 ee2:	8a 2b       	or	r24, r26
 ee4:	8b 2b       	or	r24, r27
 ee6:	11 f0       	breq	.+4      	; 0xeec <CDC_Device_USBTask+0x1c>
	CDC_Device_Flush(CDCInterfaceInfo);
 ee8:	cf 01       	movw	r24, r30
 eea:	c9 cf       	rjmp	.-110    	; 0xe7e <CDC_Device_Flush>
}
 eec:	08 95       	ret

00000eee <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 eee:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 ef0:	8e b3       	in	r24, 0x1e	; 30
 ef2:	84 30       	cpi	r24, 0x04	; 4
 ef4:	19 f0       	breq	.+6      	; 0xefc <CDC_Device_ReceiveByte+0xe>
	  return -1;
 ef6:	8f ef       	ldi	r24, 0xFF	; 255
 ef8:	9f ef       	ldi	r25, 0xFF	; 255
 efa:	08 95       	ret
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 efc:	87 85       	ldd	r24, Z+15	; 0x0f
 efe:	90 89       	ldd	r25, Z+16	; 0x10
 f00:	a1 89       	ldd	r26, Z+17	; 0x11
 f02:	b2 89       	ldd	r27, Z+18	; 0x12
 f04:	89 2b       	or	r24, r25
 f06:	8a 2b       	or	r24, r26
 f08:	8b 2b       	or	r24, r27
 f0a:	a9 f3       	breq	.-22     	; 0xef6 <CDC_Device_ReceiveByte+0x8>

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 f0c:	85 81       	ldd	r24, Z+5	; 0x05
					UENUM = EndpointNumber;
 f0e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 f12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	
	if (Endpoint_IsOUTReceived())
 f16:	82 ff       	sbrs	r24, 2
 f18:	ee cf       	rjmp	.-36     	; 0xef6 <CDC_Device_ReceiveByte+0x8>
					return UEBCLX;
 f1a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
	{
		if (Endpoint_BytesInEndpoint())
 f1e:	88 23       	and	r24, r24
 f20:	69 f0       	breq	.+26     	; 0xf3c <CDC_Device_ReceiveByte+0x4e>
				return UEDATX;
 f22:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
		  ReceivedByte = Endpoint_Read_Byte();
 f26:	90 e0       	ldi	r25, 0x00	; 0
					return UEBCLX;
 f28:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
	
		if (!(Endpoint_BytesInEndpoint()))
 f2c:	21 11       	cpse	r18, r1
 f2e:	05 c0       	rjmp	.+10     	; 0xf3a <CDC_Device_ReceiveByte+0x4c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 f30:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 f34:	2b 77       	andi	r18, 0x7B	; 123
 f36:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  Endpoint_ClearOUT();
	}
	
	return ReceivedByte;
}
 f3a:	08 95       	ret
	int16_t ReceivedByte = -1;
 f3c:	8f ef       	ldi	r24, 0xFF	; 255
 f3e:	9f ef       	ldi	r25, 0xFF	; 255
 f40:	f3 cf       	rjmp	.-26     	; 0xf28 <CDC_Device_ReceiveByte+0x3a>

00000f42 <__udivmodsi4>:
 f42:	a1 e2       	ldi	r26, 0x21	; 33
 f44:	1a 2e       	mov	r1, r26
 f46:	aa 1b       	sub	r26, r26
 f48:	bb 1b       	sub	r27, r27
 f4a:	fd 01       	movw	r30, r26
 f4c:	0d c0       	rjmp	.+26     	; 0xf68 <__udivmodsi4_ep>

00000f4e <__udivmodsi4_loop>:
 f4e:	aa 1f       	adc	r26, r26
 f50:	bb 1f       	adc	r27, r27
 f52:	ee 1f       	adc	r30, r30
 f54:	ff 1f       	adc	r31, r31
 f56:	a2 17       	cp	r26, r18
 f58:	b3 07       	cpc	r27, r19
 f5a:	e4 07       	cpc	r30, r20
 f5c:	f5 07       	cpc	r31, r21
 f5e:	20 f0       	brcs	.+8      	; 0xf68 <__udivmodsi4_ep>
 f60:	a2 1b       	sub	r26, r18
 f62:	b3 0b       	sbc	r27, r19
 f64:	e4 0b       	sbc	r30, r20
 f66:	f5 0b       	sbc	r31, r21

00000f68 <__udivmodsi4_ep>:
 f68:	66 1f       	adc	r22, r22
 f6a:	77 1f       	adc	r23, r23
 f6c:	88 1f       	adc	r24, r24
 f6e:	99 1f       	adc	r25, r25
 f70:	1a 94       	dec	r1
 f72:	69 f7       	brne	.-38     	; 0xf4e <__udivmodsi4_loop>
 f74:	60 95       	com	r22
 f76:	70 95       	com	r23
 f78:	80 95       	com	r24
 f7a:	90 95       	com	r25
 f7c:	9b 01       	movw	r18, r22
 f7e:	ac 01       	movw	r20, r24
 f80:	bd 01       	movw	r22, r26
 f82:	cf 01       	movw	r24, r30
 f84:	08 95       	ret

00000f86 <__tablejump2__>:
 f86:	ee 0f       	add	r30, r30
 f88:	ff 1f       	adc	r31, r31
 f8a:	05 90       	lpm	r0, Z+
 f8c:	f4 91       	lpm	r31, Z
 f8e:	e0 2d       	mov	r30, r0
 f90:	09 94       	ijmp

00000f92 <_exit>:
 f92:	f8 94       	cli

00000f94 <__stop_program>:
 f94:	ff cf       	rjmp	.-2      	; 0xf94 <__stop_program>
 f96:	48 05       	cpc	r20, r8
 f98:	6d 05       	cpc	r22, r13
 f9a:	47 06       	cpc	r4, r23
 f9c:	6d 05       	cpc	r22, r13
 f9e:	47 06       	cpc	r4, r23
 fa0:	9d 05       	cpc	r25, r13
 fa2:	d0 05       	cpc	r29, r0
 fa4:	47 06       	cpc	r4, r23
 fa6:	22 06       	cpc	r2, r18
 fa8:	2e 06       	cpc	r2, r30
