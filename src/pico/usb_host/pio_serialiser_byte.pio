;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program pio_serialiser_byte

; Just serialise a stream of bits. Take 32 bits from each FIFO record. LSB-first.
set X, 1 ; last bit was one
set Y, 6 ; bit stuff
.wrap_target
top:
; wait 0 irq 2
jmp !X lastBitWasZero [1]
; Last bit was One
mov OSR, pins ; Read the first bit of pins out by abusing the OSR
out X, 1
jmp !X lastBitWasOneCurrentBitIsZero
; last bit was one current bit was one (same so one is outputted)
jmp send_one
lastBitWasZero:
; last bit was zero
mov OSR, pins
out X, 1 
jmp !X lastBitWasZeroCurrentBitIsZero
; last bit was zero current bit was one (toggle so zero is outputted)
jmp send_zero
lastBitWasOneCurrentBitIsZero:
; last bit was one current bit was zero (toggle so zero is outputted)
jmp send_zero
lastBitWasZeroCurrentBitIsZero:
; last bit was zero current bit was zero (same so one is outputted)
jmp send_one
send_zero:
in NULL, 1 [1]
set Y 6
jmp top
send_one:
mov OSR, !NULL ; abuse the OSR once again as a register so we can output a 1
in OSR, 1
jmp Y-- bitstuff
jmp top
bitstuff:
mov x, !x
; Bit stuffing just means ignoring the next zero, so that means we need to flip the bit
; Also we wait a couple of extra bits as bitstuff needs to wait out the previous jmp to top and the automatic wrap
set Y 6 [11]


% c-sdk {
static inline void pio_serialiser_byte_program_init(PIO pio, uint sm, uint offset, uint data_pin, float clk_div) {
    pio_gpio_init(pio, data_pin);
    pio_sm_config c = pio_serialiser_byte_program_get_default_config(offset);
    sm_config_set_clkdiv(&c, clk_div);
    sm_config_set_in_pins(&c, data_pin);
    sm_config_set_in_shift(&c, true, true, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, false);
    pio_sm_set_enabled(pio, sm, true);
}
%}

; paths:

; zero and zero [9]
; jmp !X lastBitWasZero
; mov OSR, pins
; out X, 1 
; jmp !X lastBitWasZeroCurrentBitIsZero
; jmp send_one
; mov OSR, !NULL
; in OSR, 1
; jmp Y-- bitstuff
; jmp top

; zero and one [11]
; jmp !X lastBitWasZero
; mov OSR, pins
; out X, 1 
; jmp !X lastBitWasZeroCurrentBitIsZero
; jmp send_zero
; in NULL, 1 [1]
; set Y 6
; jmp top