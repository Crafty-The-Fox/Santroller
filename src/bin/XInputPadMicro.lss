
bin/XInputPadMicro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00004a48  00004adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fb  00800162  00800162  00004b3e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00004b3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009e0  00000000  00000000  00004b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017435  00000000  00000000  00005570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049d7  00000000  00000000  0001c9a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00010fd8  00000000  00000000  0002137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ec0  00000000  00000000  00032354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008a0a  00000000  00000000  00034214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c9d0  00000000  00000000  0003cc1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e90  00000000  00000000  000495ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2e c7       	rjmp	.+3676   	; 0xe5e <__ctors_end>
       2:	00 00       	nop
       4:	53 c7       	rjmp	.+3750   	; 0xeac <__bad_interrupt>
       6:	00 00       	nop
       8:	51 c7       	rjmp	.+3746   	; 0xeac <__bad_interrupt>
       a:	00 00       	nop
       c:	4f c7       	rjmp	.+3742   	; 0xeac <__bad_interrupt>
       e:	00 00       	nop
      10:	4d c7       	rjmp	.+3738   	; 0xeac <__bad_interrupt>
      12:	00 00       	nop
      14:	4b c7       	rjmp	.+3734   	; 0xeac <__bad_interrupt>
      16:	00 00       	nop
      18:	49 c7       	rjmp	.+3730   	; 0xeac <__bad_interrupt>
      1a:	00 00       	nop
      1c:	47 c7       	rjmp	.+3726   	; 0xeac <__bad_interrupt>
      1e:	00 00       	nop
      20:	45 c7       	rjmp	.+3722   	; 0xeac <__bad_interrupt>
      22:	00 00       	nop
      24:	43 c7       	rjmp	.+3718   	; 0xeac <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <__vector_10>
      2c:	3f c7       	rjmp	.+3710   	; 0xeac <__bad_interrupt>
      2e:	00 00       	nop
      30:	3d c7       	rjmp	.+3706   	; 0xeac <__bad_interrupt>
      32:	00 00       	nop
      34:	3b c7       	rjmp	.+3702   	; 0xeac <__bad_interrupt>
      36:	00 00       	nop
      38:	39 c7       	rjmp	.+3698   	; 0xeac <__bad_interrupt>
      3a:	00 00       	nop
      3c:	37 c7       	rjmp	.+3694   	; 0xeac <__bad_interrupt>
      3e:	00 00       	nop
      40:	35 c7       	rjmp	.+3690   	; 0xeac <__bad_interrupt>
      42:	00 00       	nop
      44:	33 c7       	rjmp	.+3686   	; 0xeac <__bad_interrupt>
      46:	00 00       	nop
      48:	31 c7       	rjmp	.+3682   	; 0xeac <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2f c7       	rjmp	.+3678   	; 0xeac <__bad_interrupt>
      4e:	00 00       	nop
      50:	2d c7       	rjmp	.+3674   	; 0xeac <__bad_interrupt>
      52:	00 00       	nop
      54:	2b c7       	rjmp	.+3670   	; 0xeac <__bad_interrupt>
      56:	00 00       	nop
      58:	29 c7       	rjmp	.+3666   	; 0xeac <__bad_interrupt>
      5a:	00 00       	nop
      5c:	27 c7       	rjmp	.+3662   	; 0xeac <__bad_interrupt>
      5e:	00 00       	nop
      60:	25 c7       	rjmp	.+3658   	; 0xeac <__bad_interrupt>
      62:	00 00       	nop
      64:	23 c7       	rjmp	.+3654   	; 0xeac <__bad_interrupt>
      66:	00 00       	nop
      68:	21 c7       	rjmp	.+3650   	; 0xeac <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1f c7       	rjmp	.+3646   	; 0xeac <__bad_interrupt>
      6e:	00 00       	nop
      70:	1d c7       	rjmp	.+3642   	; 0xeac <__bad_interrupt>
      72:	00 00       	nop
      74:	1b c7       	rjmp	.+3638   	; 0xeac <__bad_interrupt>
      76:	00 00       	nop
      78:	19 c7       	rjmp	.+3634   	; 0xeac <__bad_interrupt>
      7a:	00 00       	nop
      7c:	17 c7       	rjmp	.+3630   	; 0xeac <__bad_interrupt>
      7e:	00 00       	nop
      80:	15 c7       	rjmp	.+3626   	; 0xeac <__bad_interrupt>
      82:	00 00       	nop
      84:	13 c7       	rjmp	.+3622   	; 0xeac <__bad_interrupt>
      86:	00 00       	nop
      88:	11 c7       	rjmp	.+3618   	; 0xeac <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0f c7       	rjmp	.+3614   	; 0xeac <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__vector_36>
      94:	0b c7       	rjmp	.+3606   	; 0xeac <__bad_interrupt>
      96:	00 00       	nop
      98:	09 c7       	rjmp	.+3602   	; 0xeac <__bad_interrupt>
      9a:	00 00       	nop
      9c:	07 c7       	rjmp	.+3598   	; 0xeac <__bad_interrupt>
      9e:	00 00       	nop
      a0:	05 c7       	rjmp	.+3594   	; 0xeac <__bad_interrupt>
      a2:	00 00       	nop
      a4:	03 c7       	rjmp	.+3590   	; 0xeac <__bad_interrupt>
      a6:	00 00       	nop
      a8:	01 c7       	rjmp	.+3586   	; 0xeac <__bad_interrupt>
      aa:	00 00       	nop
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	63 42       	sbci	r22, 0x23	; 35
      dc:	36 b7       	in	r19, 0x36	; 54
      de:	9b d8       	rcall	.-3786   	; 0xfffff216 <__eeprom_end+0xff7ef216>
      e0:	a7 1a       	sub	r10, r23
      e2:	39 68       	ori	r19, 0x89	; 137
      e4:	56 18       	sub	r5, r6
      e6:	ae ba       	out	0x1e, r10	; 30
      e8:	ab 55       	subi	r26, 0x5B	; 91
      ea:	8c 1d       	adc	r24, r12
      ec:	3c b7       	in	r19, 0x3c	; 60
      ee:	cc 57       	subi	r28, 0x7C	; 124
      f0:	63 bd       	out	0x23, r22	; 35
      f2:	6d ed       	ldi	r22, 0xDD	; 221
      f4:	fd 75       	andi	r31, 0x5D	; 93
      f6:	3e f6       	brtc	.-114    	; 0x86 <__SREG__+0x47>
      f8:	17 72       	andi	r17, 0x27	; 39
      fa:	31 bf       	out	0x31, r19	; 49
      fc:	00 00       	nop
      fe:	00 80       	ld	r0, Z
     100:	3f 08       	sbc	r3, r15
     102:	00 00       	nop
     104:	00 be       	out	0x30, r0	; 48
     106:	92 24       	eor	r9, r2
     108:	49 12       	cpse	r4, r25
     10a:	3e ab       	std	Y+54, r19	; 0x36
     10c:	aa aa       	std	Y+50, r10	; 0x32
     10e:	2a be       	out	0x3a, r2	; 58
     110:	cd cc       	rjmp	.-1638   	; 0xfffffaac <__eeprom_end+0xff7efaac>
     112:	cc 4c       	sbci	r28, 0xCC	; 204
     114:	3e 00       	.word	0x003e	; ????
     116:	00 00       	nop
     118:	80 be       	out	0x30, r8	; 48
     11a:	ab aa       	std	Y+51, r10	; 0x33
     11c:	aa aa       	std	Y+50, r10	; 0x32
     11e:	3e 00       	.word	0x003e	; ????
     120:	00 00       	nop
     122:	00 bf       	out	0x30, r16	; 48
     124:	00 00       	nop
     126:	00 80       	ld	r0, Z
     128:	3f 00       	.word	0x003f	; ????
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	08 41       	sbci	r16, 0x18	; 24
     130:	78 d3       	rcall	.+1776   	; 0x822 <__FUSE_REGION_LENGTH__+0x422>
     132:	bb 43       	sbci	r27, 0x3B	; 59
     134:	87 d1       	rcall	.+782    	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
     136:	13 3d       	cpi	r17, 0xD3	; 211
     138:	19 0e       	add	r1, r25
     13a:	3c c3       	rjmp	.+1656   	; 0x7b4 <__FUSE_REGION_LENGTH__+0x3b4>
     13c:	bd 42       	sbci	r27, 0x2D	; 45
     13e:	82 ad       	ldd	r24, Z+58	; 0x3a
     140:	2b 3e       	cpi	r18, 0xEB	; 235
     142:	68 ec       	ldi	r22, 0xC8	; 200
     144:	82 76       	andi	r24, 0x62	; 98
     146:	be d9       	rcall	.-3204   	; 0xfffff4c4 <__eeprom_end+0xff7ef4c4>
     148:	8f e1       	ldi	r24, 0x1F	; 31
     14a:	a9 3e       	cpi	r26, 0xE9	; 233
     14c:	4c 80       	ldd	r4, Y+4	; 0x04
     14e:	ef ff       	.word	0xffef	; ????
     150:	be 01       	movw	r22, r28
     152:	c4 ff       	sbrs	r28, 4
     154:	7f 3f       	cpi	r23, 0xFF	; 255
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	00 00       	nop

0000015c <VersionString>:
     15c:	08 03 31 00 2e 00 30 00 00 00                       ..1...0...

00000166 <ProductString>:
     166:	40 03 57 00 69 00 69 00 20 00 43 00 6f 00 6e 00     @.W.i.i. .C.o.n.
     176:	74 00 72 00 6f 00 6c 00 6c 00 65 00 72 00 20 00     t.r.o.l.l.e.r. .
     186:	58 00 62 00 6f 00 78 00 20 00 41 00 64 00 61 00     X.b.o.x. .A.d.a.
     196:	70 00 74 00 6f 00 72 00 00 00                       p.t.o.r...

000001a0 <ManufacturerString>:
     1a0:	1a 03 73 00 61 00 6e 00 6a 00 61 00 79 00 39 00     ..s.a.n.j.a.y.9.
     1b0:	30 00 30 00 00 00                                   0.0...

000001b6 <LanguageString>:
     1b6:	04 03 09 04                                         ....

000001ba <ConfigurationDescriptor>:
     1ba:	09 02 99 00 04 01 00 a0 fa 09 04 00 00 02 ff 5d     ...............]
     1ca:	01 00 11 21 00 01 01 25 81 14 00 00 00 00 13 01     ...!...%........
     1da:	08 00 00 07 05 81 03 20 00 01 07 05 01 03 20 00     ....... ...... .
     1ea:	01 09 04 01 00 04 ff 5d 03 00 1b 21 00 01 01 01     .......]...!....
     1fa:	82 40 01 02 20 16 83 00 00 00 00 00 00 16 03 00     .@.. ...........
     20a:	00 00 00 00 00 07 05 82 03 20 00 01 07 05 02 03     ......... ......
     21a:	20 00 01 07 05 83 03 20 00 01 07 05 03 03 20 00      ...... ...... .
     22a:	01 09 04 02 00 01 ff 5d 02 00 09 21 00 01 01 22     .......]...!..."
     23a:	84 07 00 07 05 84 03 20 00 01 09 04 03 00 00 ff     ....... ........
     24a:	fd 13 04 06 41 00 01 01 03                          ....A....

00000253 <DeviceDescriptor>:
     253:	12 01 00 02 ff ff ff 40 5e 04 8e 02 14 01 01 02     .......@^.......
     263:	03 01                                               ..

00000265 <_ZL10dmp_memory>:
     265:	00 00 70 00 00 00 00 24 00 00 00 02 00 03 00 00     ..p....$........
     275:	00 65 00 54 ff ef 00 00 fa 80 00 0b 12 82 00 01     .e.T............
     285:	03 0c 30 c3 0e 8c 8c e9 14 d5 40 02 13 71 0f 8e     ..0.......@..q..
     295:	38 83 f8 83 30 00 f8 83 25 8e f8 83 30 00 f8 83     8...0...%...0...
     2a5:	ff ff ff ff 0f fe a9 d6 24 00 04 00 1a 82 79 a1     ........$.....y.
     2b5:	00 00 00 3c ff ff 00 00 00 10 00 00 38 83 6f a2     ...<........8.o.
     2c5:	00 3e 03 30 40 00 00 00 02 ca e3 09 3e 80 00 00     .>.0@.......>...
     2d5:	20 00 00 00 00 00 00 00 40 00 00 00 60 00 00 00      .......@...`...
     2e5:	00 0c 00 00 00 0c 18 6e 00 00 06 92 0a 16 c0 df     .......n........
     2f5:	ff ff 02 56 fd 8c d3 77 ff e1 c4 96 e0 c5 be aa     ...V...w........
     305:	00 00 00 00 ff ff 0b 2b 00 00 16 57 00 00 03 59     .......+...W...Y
     315:	40 00 00 00 00 00 1d fa 00 02 6c 1d 00 00 00 00     @.........l.....
     325:	3f ff df eb 00 3e b3 b6 00 0d 22 78 00 00 2f 3c     ?....>...."x../<
     335:	00 00 00 00 00 19 42 b5 00 00 39 a2 00 00 b3 65     ......B...9....e
     345:	d9 0e 9f c9 1d cf 4c 34 30 00 00 00 50 00 00 00     ......L40...P...
     355:	3b b6 7a e8 00 64 00 00 00 c8 00 00 00 00 00 00     ;.z..d..........
     365:	10 00 00 00 10 00 fa 92 10 00 22 5e 00 0d 22 9f     .........."^..".
     375:	00 01 00 00 00 32 00 00 ff 46 00 00 63 d4 00 00     .....2...F..c...
     385:	10 00 00 00 04 d6 00 00 04 cc 00 00 04 cc 00 00     ................
     395:	00 00 10 72 00 00 00 40 00 00 00 00 00 00 00 00     ...r...@........
     3a5:	00 06 00 02 00 05 00 07 00 00 00 00 00 64 00 00     .............d..
     3b5:	00 00 00 00 00 00 00 05 00 05 00 64 00 20 00 00     ...........d. ..
     3c5:	00 00 00 00 00 00 00 00 00 00 40 00 00 00 03 00     ..........@.....
     3d5:	00 00 00 32 f8 98 00 00 ff 65 00 00 83 0f 00 00     ...2.....e......
     3e5:	ff 9b fc 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3f5:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     405:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 00     ................
     415:	40 00 00 00 00 00 00 06 00 00 b2 6a 00 02 00 00     @..........j....
     425:	00 01 fb 83 00 68 00 00 00 d9 fc 00 7c f1 ff 83     .....h......|...
     435:	00 00 00 00 00 65 00 00 00 64 03 e8 00 64 00 28     .....e...d...d.(
     445:	00 00 00 25 00 00 00 00 16 a0 00 00 00 00 10 00     ...%............
     455:	00 00 10 00 00 2f 00 00 00 00 01 f4 00 00 10 00     ...../..........
     465:	00 28 00 00 ff ff 45 81 ff ff fa 72 00 00 00 00     .(....E....r....
     475:	00 00 00 00 00 44 00 05 00 05 ba c6 00 47 78 a2     .....D.......Gx.
     485:	00 00 00 01 00 00 00 00 00 00 06 00 00 00 00 14     ................
     495:	00 00 25 4d 00 2f 70 6d 00 00 05 ae 00 0c 02 d0     ..%M./pm........
     4a5:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4b5:	00 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4c5:	00 64 00 00 00 08 00 00 00 00 00 00 00 00 00 00     .d..............
     4d5:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4e5:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4f5:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     505:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     515:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     525:	00 1b 00 00 00 00 00 00 00 00 00 00 00 0e 00 0e     ................
     535:	00 00 0a c7 00 04 00 00 00 00 00 32 ff ff ff 9c     ...........2....
     545:	00 00 0b 2b 00 00 00 02 00 00 00 01 00 00 00 64     ...+...........d
     555:	ff e5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     565:	00 00 00 01 00 00 00 00 00 01 00 00 00 00 00 00     ................
     575:	00 01 80 00 00 01 80 00 00 01 80 00 00 24 26 d3     .............$&.
     585:	00 00 00 00 00 00 00 00 00 06 00 10 00 96 00 3c     ...............<
     595:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5a5:	0c 0a 4e 68 cd cf 77 09 50 16 67 59 c6 19 ce 82     ..Nh..w.P.gY....
     5b5:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5c5:	00 00 00 00 00 00 00 00 17 d7 84 00 03 00 00 00     ................
     5d5:	00 00 00 00 00 00 00 00 c7 93 8f 9d 1e 1b 1c 19     ................
     5e5:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5f5:	00 00 00 00 00 00 00 00 02 03 18 85 00 00 40 00     ..............@.
     605:	00 00 00 03 00 00 00 03 00 00 00 00 00 00 00 00     ................
     615:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     625:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     635:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     645:	00 00 00 00 67 7d df 7e 72 90 2e 55 4c f6 e6 88     ....g}.~r..UL...
     655:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     665:	d8 dc b4 b8 b0 d8 b9 ab f3 f8 fa b3 b7 bb 8e 9e     ................
     675:	ae f1 32 f5 1b f1 b4 b8 b0 80 97 f1 a9 df df df     ..2.............
     685:	aa df df df f2 aa c5 cd c7 a9 0c c9 2c 97 f1 a9     ............,...
     695:	89 26 46 66 b2 89 99 a9 2d 55 7d b0 b0 8a a8 96     .&Ff....-U}.....
     6a5:	36 56 76 f1 ba a3 b4 b2 80 c0 b8 a8 97 11 b2 83     6Vv.............
     6b5:	98 ba a3 f0 24 08 44 10 64 18 b2 b9 b4 98 83 f1     ....$.D.d.......
     6c5:	a3 29 55 7d ba b5 b1 a3 83 93 f0 00 28 50 f5 b2     .)U}........(P..
     6d5:	b6 aa 83 93 28 54 7c f1 b9 a3 82 93 61 ba a2 da     ....(T|.....a...
     6e5:	de df db 81 9a b9 ae f5 60 68 70 f1 da ba a2 df     ........`hp.....
     6f5:	d9 ba a2 fa b9 a3 82 92 db 31 ba a2 d9 ba a2 f8     .........1......
     705:	df 85 a4 d0 c1 bb ad 83 c2 c5 c7 b8 a2 df df df     ................
     715:	ba a0 df df df d8 d8 f1 b8 aa b3 8d b4 98 0d 35     ...............5
     725:	5d b2 b6 ba af 8c 96 19 8f 9f a7 0e 16 1e b4 9a     ]...............
     735:	b8 aa 87 2c 54 7c ba a4 b0 8a b6 91 32 56 76 b2     ...,T|......2Vv.
     745:	84 94 a4 c8 08 cd d8 b8 b4 b0 f1 99 82 a8 2d 55     ..............-U
     755:	7d 98 a8 0e 16 1e a2 2c 54 7c 92 a4 f0 2c 50 78     }......,T|...,Px
     765:	f1 84 a8 98 c4 cd fc d8 0d db a8 fc 2d f3 d9 ba     ............-...
     775:	a6 f8 da ba a6 de d8 ba b2 b6 86 96 a6 d0 f3 c8     ................
     785:	41 da a6 c8 f8 d8 b0 b4 b8 82 a8 92 f5 2c 54 88     A............,T.
     795:	98 f1 35 d9 f4 18 d8 f1 a2 d0 f8 f9 a8 84 d9 c7     ..5.............
     7a5:	df f8 f8 83 c5 da df 69 df 83 c1 d8 f4 01 14 f1     .......i........
     7b5:	a8 82 4e a8 84 f3 11 d1 82 f5 d9 92 28 97 88 f1     ..N.........(...
     7c5:	09 f4 1c 1c d8 84 a8 f3 c0 f9 d1 d9 97 82 f1 29     ...............)
     7d5:	f4 0d d8 f3 f9 f9 d1 d9 82 f4 c2 03 d8 de df 1a     ................
     7e5:	d8 f1 a2 fa f9 a8 84 98 d9 c7 df f8 f8 f8 83 c7     ................
     7f5:	da df 69 df f8 83 c3 d8 f4 01 14 f1 98 a8 82 2e     ..i.............
     805:	a8 84 f3 11 d1 82 f5 d9 92 50 97 88 f1 09 f4 1c     .........P......
     815:	d8 84 a8 f3 c0 f8 f9 d1 d9 97 82 f1 49 f4 0d d8     ............I...
     825:	f3 f9 f9 d1 d9 82 f4 c4 03 d8 de df d8 f1 ad 88     ................
     835:	98 cc a8 09 f9 d9 82 92 a8 f5 7c f1 88 3a cf 94     ..........|..:..
     845:	4a 6e 98 db 69 31 da ad f2 de f9 d8 87 95 a8 f2     Jn..i1..........
     855:	21 d1 da a5 f9 f4 17 d9 f1 ae 8e d0 c0 c3 ae 82     !...............
     865:	c6 84 c3 a8 85 95 c8 a5 88 f2 c0 f1 f4 01 0e f1     ................
     875:	8e 9e a8 c6 3e 56 f5 54 f1 88 72 f4 01 15 f1 98     ....>V.T..r.....
     885:	45 85 6e f5 8e 9e 04 88 f1 42 98 5a 8e 9e 06 88     E.n......B.Z....
     895:	69 f4 01 1c f1 98 1e 11 08 d0 f5 04 f1 1e 97 02     i...............
     8a5:	02 98 36 25 db f9 d9 85 a5 f3 c1 da 85 a5 f3 df     ..6%............
     8b5:	d8 85 95 a8 f3 09 da a5 fa d8 82 92 a8 f5 78 f1     ..............x.
     8c5:	88 1a 84 9f 26 88 98 21 da f4 1d f3 d8 87 9f 39     ....&..!.......9
     8d5:	d1 af d9 df df fb f9 f4 0c f3 d8 fa d0 f8 da f9     ................
     8e5:	f9 d0 df d9 f9 d8 f4 0b d8 f3 87 9f 39 d1 af d9     ............9...
     8f5:	df df f4 1d f3 d8 fa fc a8 69 f9 f9 af d0 da de     .........i......
     905:	fa d9 f8 8f 9f a8 f1 cc f3 98 db 45 d9 af df d0     ...........E....
     915:	f8 d8 f1 8f 9f a8 ca f3 88 09 da af 8f cb f8 d8     ................
     925:	f2 ad 97 8d 0c d9 a5 df f9 ba a6 f3 fa f4 12 f2     ................
     935:	d8 95 0d d1 d9 ba a6 f3 fa da a5 f2 c1 ba a6 f3     ................
     945:	df d8 f1 ba b2 b6 86 96 a6 d0 ca f3 49 da a6 cb     ............I...
     955:	f8 d8 b0 b4 b8 d8 ad 84 f2 c0 df f1 8f cb c3 a8     ................
     965:	b2 b6 86 96 c8 c1 cb c3 f3 b0 b4 88 98 a8 21 db     ..............!.
     975:	71 8d 9d 71 85 95 21 d9 ad f2 fa d8 85 97 a8 28     q..q..!........(
     985:	d9 f4 08 d8 f2 8d 29 da f4 05 d9 f2 85 a4 c2 f2     ......).........
     995:	d8 a8 8d 94 01 d1 d9 f4 11 f2 d8 87 21 d8 f4 0a     ............!...
     9a5:	d8 f2 84 98 a8 c8 01 d1 d9 f4 11 d8 f3 a4 c8 bb     ................
     9b5:	af d0 f2 de f8 f8 f8 f8 f8 f8 f8 f8 d8 f1 b8 f6     ................
     9c5:	b5 b9 b0 8a 95 a3 de 3c a3 d9 f8 d8 5c a3 d9 f8     .......<....\...
     9d5:	d8 7c a3 d9 f8 d8 f8 f9 d1 a5 d9 df da fa d8 b1     .|..............
     9e5:	85 30 f7 d9 de d8 f8 30 ad da de d8 f2 b4 8c 99     .0.....0........
     9f5:	a3 2d 55 7d a0 83 df df df b5 91 a0 f6 29 d9 fb     .-U}.........)..
     a05:	d8 a0 fc 29 d9 fa d8 a0 d0 51 d9 f8 d8 fc 51 d9     ...).....Q....Q.
     a15:	f9 d8 79 d9 fb d8 a0 d0 fc 79 d9 fa d8 a1 f9 f9     ..y......y......
     a25:	f9 f9 f9 a0 da df df df d8 a1 f8 f8 f8 f8 f8 ac     ................
     a35:	de f8 ad de 83 93 ac 2c 54 7c f1 a8 df df df f6     .......,T|......
     a45:	9d 2c da a0 df d9 fa db 2d f8 d8 a8 50 da a0 d0     .,......-...P...
     a55:	de d9 d0 f8 f8 f8 db 55 f8 d8 a8 78 da a0 d0 df     .......U...x....
     a65:	d9 d0 fa f8 f8 f8 f8 db 7d f8 d8 9c a8 8c f5 30     ........}......0
     a75:	db 38 d9 d0 de df a0 d0 de df d8 a8 48 db 58 d9     .8..........H.X.
     a85:	df d0 de a0 df d0 de d8 a8 68 db 70 d9 df df a0     .........h.p....
     a95:	df df d8 f1 a8 88 90 2c 54 7c 98 a8 d0 5c 38 d1     .......,T|...\8.
     aa5:	da f2 ae 8c df f9 d8 b0 87 a8 c1 c1 b1 88 a8 c6     ................
     ab5:	f9 f9 da 36 d8 a8 f9 da 36 d8 a8 f9 da 36 d8 a8     ...6....6....6..
     ac5:	f9 da 36 d8 a8 f9 da 36 d8 f7 8d 9d ad f8 18 da     ..6....6........
     ad5:	f2 ae df d8 f7 ad fa 30 d9 a4 de f9 d8 f2 ae de     .......0........
     ae5:	fa f9 83 a7 d9 c3 c5 c7 f1 88 9b a7 7a ad f7 de     ............z...
     af5:	df a4 f8 84 94 08 a7 97 f3 00 ae f2 98 19 a4 88     ................
     b05:	c6 a3 94 88 f6 32 df f2 83 93 db 09 d9 f2 aa df     .....2..........
     b15:	d8 d8 ae f8 f9 d1 da f3 a4 de a7 f1 88 9b 7a d8     ..............z.
     b25:	f3 84 94 ae 19 f9 da aa f1 df d8 a8 81 c0 c3 c5     ................
     b35:	c7 a3 92 83 f6 28 ad de d9 f8 d8 a3 50 ad d9 f8     .....(......P...
     b45:	d8 a3 78 ad d9 f8 d8 f8 f9 d1 a1 da de c3 c5 c7     ..x.............
     b55:	d8 a1 81 94 f8 18 f2 b0 89 ac c3 c5 c7 f1 d8 b8     ................
     b65:	b4 b0 97 86 a8 31 9b 06 99 07 ab 97 28 88 9b f0     .....1......(...
     b75:	0c 20 14 40 b0 b4 b8 f0 a8 8a 9a 28 50 78 b7 9b     . .@.......(Px..
     b85:	a8 29 51 79 24 70 59 44 69 38 64 48 31 f1 bb ab     .)Qy$pYDi8dH1...
     b95:	88 00 2c 54 7c f0 b3 8b b8 a8 04 28 50 78 f1 b0     ..,T|......(Px..
     ba5:	88 b4 97 26 a8 59 98 bb ab b3 8b 02 26 46 66 b0     ...&.Y......&Ff.
     bb5:	b8 f0 8a 9c a8 29 51 79 8b 29 51 79 8a 24 70 59     .....)Qy.)Qy.$pY
     bc5:	8b 20 58 71 8a 44 69 38 8b 39 40 68 8a 64 48 31     . Xq.Di8.9@h.dH1
     bd5:	8b 30 49 60 88 f1 ac 00 2c 54 7c f0 8c a8 04 28     .0I`....,T|....(
     be5:	50 78 f1 88 97 26 a8 59 98 ac 8c 02 26 46 66 f0     Px...&.Y....&Ff.
     bf5:	89 9c a8 29 51 79 24 70 59 44 69 38 64 48 31 a9     ...)Qy$pYDi8dH1.
     c05:	88 09 20 59 70 ab 11 38 40 69 a8 19 31 48 60 8c     .. Yp..8@i..1H`.
     c15:	a8 3c 41 5c 20 7c 00 f1 87 98 19 86 a8 6e 76 7e     .<A\ |.......nv~
     c25:	a9 99 88 2d 55 7d d8 b1 b5 b9 a3 df df df ae d0     ...-U}..........
     c35:	df aa d0 de f2 ab f8 f9 d9 b0 87 c4 aa f1 df df     ................
     c45:	bb af df df b9 d8 b1 f1 a3 97 8e 60 df b0 84 f2     ...........`....
     c55:	c8 f8 f9 d9 de d8 93 85 f1 4a b1 83 a3 08 b5 83     .........J......
     c65:	9a 08 10 b7 9f 10 d8 f1 b0 ba ae b0 8a c2 b2 b6     ................
     c75:	8e 9e f1 fb d9 f4 1d d8 f9 d9 0c f1 d8 f8 f8 ad     ................
     c85:	61 d9 ae fb d8 f4 0c f1 d8 f8 f8 ad 19 d9 ae fb     a...............
     c95:	df d8 f4 16 f1 d8 f8 ad 8d 61 d9 f4 f4 ac f5 9c     .........a......
     ca5:	9c 8d df 2b ba b6 ae fa f8 f4 0b d8 f1 ae d0 f8     ...+............
     cb5:	ad 51 da ae fa f8 f1 d8 b9 b1 b6 a3 83 9c 08 b9     .Q..............
     cc5:	b1 83 9a b5 aa c0 fd 30 83 b7 9f 10 b5 8b 93 f2     .......0........
     cd5:	02 02 d1 ab da de d8 f1 b0 80 ba ab c0 c3 b2 84     ................
     ce5:	c1 c3 d8 b1 b9 f3 8b a3 91 b6 09 b4 d9 ab de b0     ................
     cf5:	87 9c b9 a3 dd f1 b3 8b 8b 8b 8b 8b b0 87 a3 a3     ................
     d05:	a3 a3 b2 8b b6 9b f2 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
     d15:	a3 f1 b0 87 b5 9a a3 f3 9b a3 a3 dc ba ac df b9     ................
     d25:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
     d35:	d8 d8 d8 bb b3 b7 f1 aa f9 da ff d9 80 9a aa 28     ...............(
     d45:	b4 80 98 a7 20 b7 97 87 a8 66 88 f0 79 51 f1 90     .... ....f..yQ..
     d55:	2c 87 0c a7 81 97 62 93 f0 71 71 60 85 94 01 29     ,.....b..qq`...)
     d65:	51 79 90 a5 f1 28 4c 6c 87 0c 95 18 85 78 a3 83     Qy...(Ll.....x..
     d75:	90 28 4c 6c 88 6c d8 f3 a2 82 00 f2 10 a8 92 19     .(Ll.l..........
     d85:	80 a2 f2 d9 26 d8 f1 88 a8 4d d9 48 d8 96 a8 39     ....&....M.H...9
     d95:	80 d9 3c d8 95 80 a8 39 a6 86 98 d9 2c da 87 a7     ..<....9....,...
     da5:	2c d8 a8 89 95 19 a9 80 d9 38 d8 a8 89 39 a9 80     ,........8...9..
     db5:	da 3c d8 a8 2e a8 39 90 d9 0c d8 a8 95 31 98 d9     .<....9......1..
     dc5:	0c d8 a8 09 d9 ff d8 01 da ff d8 95 39 a9 da 26     ............9..&
     dd5:	ff d8 90 a8 0d 89 99 a8 10 80 98 21 da 2e d8 89     ...........!....
     de5:	99 a8 31 80 da 2e d8 a8 86 96 31 80 da 2e d8 a8     ..1.......1.....
     df5:	87 31 80 da 2e d8 a8 82 92 f3 41 80 f1 d9 2e d8     .1........A.....
     e05:	a8 82 f3 19 80 f1 d9 2e d8 82 ac f3 c0 a2 80 22     ..............."
     e15:	f1 a6 2e a7 2e a9 22 98 a8 29 da ac de ff d8 a2     ......"..)......
     e25:	f2 2a f1 a9 2e 82 92 a8 f2 31 80 a6 96 f1 d9 00     .*.......1......
     e35:	ac 8c 9c 0c 30 ac de d0 de ff d8 8c 9c ac d0 10     ....0...........
     e45:	ac de 80 92 a2 f2 4c 82 a8 f1 ca f2 35 f1 96 88     ......L.....5...
     e55:	a6 d9 00 d8 f1 ff 00                                .......

00000e5c <__ctors_start>:
     e5c:	eb 07       	cpc	r30, r27

00000e5e <__ctors_end>:
     e5e:	11 24       	eor	r1, r1
     e60:	1f be       	out	0x3f, r1	; 63
     e62:	cf ef       	ldi	r28, 0xFF	; 255
     e64:	da e0       	ldi	r29, 0x0A	; 10
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	cd bf       	out	0x3d, r28	; 61

00000e6a <__do_copy_data>:
     e6a:	11 e0       	ldi	r17, 0x01	; 1
     e6c:	a0 e0       	ldi	r26, 0x00	; 0
     e6e:	b1 e0       	ldi	r27, 0x01	; 1
     e70:	e8 e4       	ldi	r30, 0x48	; 72
     e72:	fa e4       	ldi	r31, 0x4A	; 74
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <__do_copy_data+0x10>
     e76:	05 90       	lpm	r0, Z+
     e78:	0d 92       	st	X+, r0
     e7a:	a2 36       	cpi	r26, 0x62	; 98
     e7c:	b1 07       	cpc	r27, r17
     e7e:	d9 f7       	brne	.-10     	; 0xe76 <__do_copy_data+0xc>

00000e80 <__do_clear_bss>:
     e80:	23 e0       	ldi	r18, 0x03	; 3
     e82:	a2 e6       	ldi	r26, 0x62	; 98
     e84:	b1 e0       	ldi	r27, 0x01	; 1
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <.do_clear_bss_start>

00000e88 <.do_clear_bss_loop>:
     e88:	1d 92       	st	X+, r1

00000e8a <.do_clear_bss_start>:
     e8a:	ad 35       	cpi	r26, 0x5D	; 93
     e8c:	b2 07       	cpc	r27, r18
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <.do_clear_bss_loop>

00000e90 <__do_global_ctors>:
     e90:	17 e0       	ldi	r17, 0x07	; 7
     e92:	cf e2       	ldi	r28, 0x2F	; 47
     e94:	d7 e0       	ldi	r29, 0x07	; 7
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <__do_global_ctors+0x10>
     e98:	21 97       	sbiw	r28, 0x01	; 1
     e9a:	fe 01       	movw	r30, r28
     e9c:	0e 94 de 23 	call	0x47bc	; 0x47bc <__tablejump2__>
     ea0:	ce 32       	cpi	r28, 0x2E	; 46
     ea2:	d1 07       	cpc	r29, r17
     ea4:	c9 f7       	brne	.-14     	; 0xe98 <__do_global_ctors+0x8>
     ea6:	8b d0       	rcall	.+278    	; 0xfbe <main>
     ea8:	0c 94 22 25 	jmp	0x4a44	; 0x4a44 <_exit>

00000eac <__bad_interrupt>:
     eac:	a9 c8       	rjmp	.-3758   	; 0x0 <__vectors>

00000eae <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     eae:	29 2f       	mov	r18, r25
     eb0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	41 f1       	breq	.+80     	; 0xf08 <CALLBACK_USB_GetDescriptor+0x5a>
     eb8:	23 30       	cpi	r18, 0x03	; 3
     eba:	31 05       	cpc	r19, r1
     ebc:	59 f0       	breq	.+22     	; 0xed4 <CALLBACK_USB_GetDescriptor+0x26>
     ebe:	21 30       	cpi	r18, 0x01	; 1
     ec0:	31 05       	cpc	r19, r1
     ec2:	39 f1       	breq	.+78     	; 0xf12 <CALLBACK_USB_GetDescriptor+0x64>
	uint16_t    Size    = NO_DESCRIPTOR;
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	20 e0       	ldi	r18, 0x00	; 0
		}

			break;
	}

	*DescriptorAddress = Address;
     ecc:	fa 01       	movw	r30, r20
     ece:	31 83       	std	Z+1, r19	; 0x01
     ed0:	20 83       	st	Z, r18
	return Size;
}
     ed2:	08 95       	ret
			switch (DescriptorNumber)
     ed4:	99 27       	eor	r25, r25
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	91 05       	cpc	r25, r1
     eda:	81 f0       	breq	.+32     	; 0xefc <CALLBACK_USB_GetDescriptor+0x4e>
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	41 f0       	breq	.+16     	; 0xef0 <CALLBACK_USB_GetDescriptor+0x42>
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	91 05       	cpc	r25, r1
     ee4:	71 f0       	breq	.+28     	; 0xf02 <CALLBACK_USB_GetDescriptor+0x54>
     ee6:	03 97       	sbiw	r24, 0x03	; 3
     ee8:	69 f7       	brne	.-38     	; 0xec4 <CALLBACK_USB_GetDescriptor+0x16>
					Size    = pgm_read_byte(&VersionString.Header.Size);
     eea:	ec e5       	ldi	r30, 0x5C	; 92
     eec:	f1 e0       	ldi	r31, 0x01	; 1
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <CALLBACK_USB_GetDescriptor+0x46>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     ef0:	e6 eb       	ldi	r30, 0xB6	; 182
     ef2:	f1 e0       	ldi	r31, 0x01	; 1
					Size    = pgm_read_byte(&VersionString.Header.Size);
     ef4:	84 91       	lpm	r24, Z
     ef6:	90 e0       	ldi	r25, 0x00	; 0
					Address = &VersionString;
     ef8:	9f 01       	movw	r18, r30
					break;
     efa:	e8 cf       	rjmp	.-48     	; 0xecc <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     efc:	e0 ea       	ldi	r30, 0xA0	; 160
     efe:	f1 e0       	ldi	r31, 0x01	; 1
     f00:	f9 cf       	rjmp	.-14     	; 0xef4 <CALLBACK_USB_GetDescriptor+0x46>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     f02:	e6 e6       	ldi	r30, 0x66	; 102
     f04:	f1 e0       	ldi	r31, 0x01	; 1
     f06:	f6 cf       	rjmp	.-20     	; 0xef4 <CALLBACK_USB_GetDescriptor+0x46>
			Size    = sizeof(ConfigurationDescriptor);
     f08:	89 e9       	ldi	r24, 0x99	; 153
     f0a:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     f0c:	2a eb       	ldi	r18, 0xBA	; 186
     f0e:	31 e0       	ldi	r19, 0x01	; 1
     f10:	dd cf       	rjmp	.-70     	; 0xecc <CALLBACK_USB_GetDescriptor+0x1e>
			Size    = sizeof(DeviceDescriptor);
     f12:	82 e1       	ldi	r24, 0x12	; 18
     f14:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     f16:	23 e5       	ldi	r18, 0x53	; 83
     f18:	32 e0       	ldi	r19, 0x02	; 2
     f1a:	d8 cf       	rjmp	.-80     	; 0xecc <CALLBACK_USB_GetDescriptor+0x1e>

00000f1c <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void) {
	if(padUSBConnectEventCallback)
     f1c:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <padUSBConnectEventCallback>
     f20:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <padUSBConnectEventCallback+0x1>
     f24:	30 97       	sbiw	r30, 0x00	; 0
     f26:	09 f0       	breq	.+2      	; 0xf2a <EVENT_USB_Device_Connect+0xe>
		padUSBConnectEventCallback();
     f28:	09 94       	ijmp
}
     f2a:	08 95       	ret

00000f2c <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs and stops the USB management and joystick reporting tasks.
 */
void EVENT_USB_Device_Disconnect(void) {
	if(padUSBDisconnectEventCallback)
     f2c:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <__data_end>
     f30:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <__data_end+0x1>
     f34:	30 97       	sbiw	r30, 0x00	; 0
     f36:	09 f0       	breq	.+2      	; 0xf3a <EVENT_USB_Device_Disconnect+0xe>
		padUSBDisconnectEventCallback();
     f38:	09 94       	ijmp
}
     f3a:	08 95       	ret

00000f3c <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     f3c:	42 e2       	ldi	r20, 0x22	; 34
     f3e:	61 ec       	ldi	r22, 0xC1	; 193
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <Endpoint_ConfigureEndpoint_Prv>
     f46:	42 e2       	ldi	r20, 0x22	; 34
     f48:	61 ec       	ldi	r22, 0xC1	; 193
     f4a:	83 e0       	ldi	r24, 0x03	; 3
     f4c:	0c 94 06 1d 	jmp	0x3a0c	; 0x3a0c <Endpoint_ConfigureEndpoint_Prv>

00000f50 <EVENT_USB_Device_ControlRequest>:
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void) {
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest) {
     f50:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <USB_ControlRequest+0x1>
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	a1 f4       	brne	.+40     	; 0xf80 <EVENT_USB_Device_ControlRequest+0x30>
	case HID_REQ_GetReport:
		if (USB_ControlRequest.bmRequestType
     f58:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <USB_ControlRequest>
     f5c:	81 3a       	cpi	r24, 0xA1	; 161
     f5e:	81 f4       	brne	.+32     	; 0xf80 <EVENT_USB_Device_ControlRequest+0x30>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f64:	87 7f       	andi	r24, 0xF7	; 247
     f66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				== (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)) {
			Endpoint_ClearSETUP();

			/* Write the report data to the control endpoint */
			Endpoint_Write_Control_Stream_LE(&gamepad_state, 20);
     f6a:	64 e1       	ldi	r22, 0x14	; 20
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	88 e3       	ldi	r24, 0x38	; 56
     f70:	93 e0       	ldi	r25, 0x03	; 3
     f72:	0e 94 41 1c 	call	0x3882	; 0x3882 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f7a:	8b 77       	andi	r24, 0x7B	; 123
     f7c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			Endpoint_ClearOUT();
		}

		break;
	}
}
     f80:	08 95       	ret

00000f82 <HID_Task>:

/** Function to manage HID report generation and transmission to the host. */
void HID_Task(void) {
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     f82:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <USB_DeviceState>
     f86:	84 30       	cpi	r24, 0x04	; 4
     f88:	a1 f4       	brne	.+40     	; 0xfb2 <HID_Task+0x30>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Joystick Report Endpoint */
	Endpoint_SelectEndpoint(JOYSTICK_EPADDR_IN);

	/* Check to see if the host is ready for another packet */
	if (Endpoint_IsINReady()) {
     f94:	80 ff       	sbrs	r24, 0
     f96:	0d c0       	rjmp	.+26     	; 0xfb2 <HID_Task+0x30>
		/* Write Joystick Report Data */
		Endpoint_Write_Stream_LE(&gamepad_state, 20, NULL);
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	64 e1       	ldi	r22, 0x14	; 20
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	88 e3       	ldi	r24, 0x38	; 56
     fa2:	93 e0       	ldi	r25, 0x03	; 3
     fa4:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fa8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fac:	8e 77       	andi	r24, 0x7E	; 126
     fae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
     fb2:	08 95       	ret

00000fb4 <xbox_send_pad_state>:

	gamepad_state.rsize = 20;
}

void xbox_send_pad_state(void) {
	HID_Task();
     fb4:	e6 df       	rcall	.-52     	; 0xf82 <HID_Task>
	USB_USBTask();
     fb6:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <USB_USBTask>

00000fba <xbox_reset_watchdog>:
}

void xbox_reset_watchdog(void) {
	wdt_reset();
     fba:	a8 95       	wdr
}
     fbc:	08 95       	ret

00000fbe <main>:

WiiExtension controller;

Controller data;
int main() {
  sei();
     fbe:	78 94       	sei
  controller.init();
     fc0:	8e e6       	ldi	r24, 0x6E	; 110
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	60 d0       	rcall	.+192    	; 0x1086 <_ZN12WiiExtension4initEv>
  for (;;) {
    controller.read_controller(&data);
     fc6:	66 e6       	ldi	r22, 0x66	; 102
     fc8:	71 e0       	ldi	r23, 0x01	; 1
     fca:	8e e6       	ldi	r24, 0x6E	; 110
     fcc:	91 e0       	ldi	r25, 0x01	; 1
    xbox_reset_watchdog();
     fce:	61 d0       	rcall	.+194    	; 0x1092 <_ZN12WiiExtension15read_controllerEP10Controller>
     fd0:	f4 df       	rcall	.-24     	; 0xfba <xbox_reset_watchdog>
    xbox_send_pad_state();
     fd2:	f0 df       	rcall	.-32     	; 0xfb4 <xbox_send_pad_state>
     fd4:	f8 cf       	rjmp	.-16     	; 0xfc6 <main+0x8>

00000fd6 <_GLOBAL__sub_I_controller>:
     fd6:	8e e6       	ldi	r24, 0x6E	; 110
WiiExtension controller;
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <_ZN12WiiExtensionC1Ev>

00000fdc <_ZN12WiiExtensionC1Ev>:
#include "../util.h"
#include <util/delay.h>
#define constrain(amt, low, high)                                              \
  ((amt) < (low) ? (low) : ((amt) > (high) ? (high) : (amt)))

WiiExtension::WiiExtension()
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	ec 01       	movw	r28, r24
namespace NintendoExtensionCtrl {
	template <class ControllerMap>
	class BuildControllerClass : public ControllerMap {
	public:
		BuildControllerClass() :
			ControllerMap(portData),
     fe6:	8c 01       	movw	r16, r24
     fe8:	0b 5f       	subi	r16, 0xFB	; 251
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
			portData() {}
     fec:	b8 01       	movw	r22, r16
     fee:	50 d6       	rcall	.+3232   	; 0x1c90 <_ZN19ExtensionControllerC1ERNS_13ExtensionDataE>
     ff0:	87 e1       	ldi	r24, 0x17	; 23
     ff2:	f8 01       	movw	r30, r16
     ff4:	11 92       	st	Z+, r1
     ff6:	8a 95       	dec	r24
     ff8:	e9 f7       	brne	.-6      	; 0xff4 <_ZN12WiiExtensionC1Ev+0x18>
	struct ExtensionData {
     ffa:	1e 82       	std	Y+6, r1	; 0x06
     ffc:	1d 82       	std	Y+5, r1	; 0x05
		
		Nunchuk_Shared(ExtensionData &dataRef) :
			ExtensionController(dataRef, ExtensionType::Nunchuk) {}

		Nunchuk_Shared(ExtensionPort &port) :
			Nunchuk_Shared(port.getExtensionData()) {}
     ffe:	ce 01       	movw	r24, r28
    1000:	2f d7       	rcall	.+3678   	; 0x1e60 <_ZNK19ExtensionController16getExtensionDataEv>
			ExtensionController(dataRef, ExtensionType::Nunchuk) {}
    1002:	43 e0       	ldi	r20, 0x03	; 3
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	bc 01       	movw	r22, r24
    1008:	ce 01       	movw	r24, r28
    100a:	4c 96       	adiw	r24, 0x1c	; 28

		ClassicController_Shared(ExtensionData &dataRef) :
			ExtensionController(dataRef, ExtensionType::ClassicController) {}

		ClassicController_Shared(ExtensionPort &port) :
			ClassicController_Shared(port.getExtensionData()) {}
    100c:	4b d6       	rcall	.+3222   	; 0x1ca4 <_ZN19ExtensionControllerC1ERNS_13ExtensionDataE13ExtensionType>
    100e:	ce 01       	movw	r24, r28
    1010:	27 d7       	rcall	.+3662   	; 0x1e60 <_ZNK19ExtensionController16getExtensionDataEv>
			ExtensionController(dataRef, ExtensionType::ClassicController) {}
    1012:	44 e0       	ldi	r20, 0x04	; 4
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	bc 01       	movw	r22, r24
    1018:	ce 01       	movw	r24, r28
    101a:	81 96       	adiw	r24, 0x21	; 33
    : nchuk(port), classic(port), dj(port), guitar(port), drum(port) {}
    101c:	43 d6       	rcall	.+3206   	; 0x1ca4 <_ZN19ExtensionControllerC1ERNS_13ExtensionDataE13ExtensionType>
    101e:	0f 5d       	subi	r16, 0xDF	; 223

		DJTurntableController_Shared(ExtensionData& dataRef) : 
			ExtensionController(dataRef, ExtensionType::DJTurntableController), left(*this), right(*this) {}

		DJTurntableController_Shared(ExtensionPort &port) :
			DJTurntableController_Shared(port.getExtensionData()) {}
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	ce 01       	movw	r24, r28
			ExtensionController(dataRef, ExtensionType::DJTurntableController), left(*this), right(*this) {}
    1024:	1d d7       	rcall	.+3642   	; 0x1e60 <_ZNK19ExtensionController16getExtensionDataEv>
    1026:	47 e0       	ldi	r20, 0x07	; 7
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	bc 01       	movw	r22, r24
    102c:	c8 01       	movw	r24, r16
    102e:	3a d6       	rcall	.+3188   	; 0x1ca4 <_ZN19ExtensionControllerC1ERNS_13ExtensionDataE13ExtensionType>
		uint8_t getNumTurntables();

		class TurntableExpansion {
		public:
			TurntableExpansion(TurntableConfig conf, DJTurntableController_Shared &baseObj)
				: side(conf), base(baseObj) {}
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9e a7       	std	Y+46, r25	; 0x2e
    1036:	8d a7       	std	Y+45, r24	; 0x2d
    1038:	18 ab       	std	Y+48, r17	; 0x30
    103a:	0f a7       	std	Y+47, r16	; 0x2f
		};

		class TurntableLeft : public TurntableExpansion {
		public:
			TurntableLeft(DJTurntableController_Shared &baseObj)
				: TurntableExpansion(TurntableConfig::Left, baseObj) {}
    103c:	8d e4       	ldi	r24, 0x4D	; 77
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	9c a7       	std	Y+44, r25	; 0x2c
    1042:	8b a7       	std	Y+43, r24	; 0x2b
				: side(conf), base(baseObj) {}
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9c ab       	std	Y+52, r25	; 0x34
    104a:	8b ab       	std	Y+51, r24	; 0x33
    104c:	1e ab       	std	Y+54, r17	; 0x36
    104e:	0d ab       	std	Y+53, r16	; 0x35
		} left;

		class TurntableRight : public TurntableExpansion {
		public:
			TurntableRight(DJTurntableController_Shared &baseObj)
				: TurntableExpansion(TurntableConfig::Right, baseObj) {}
    1050:	89 e5       	ldi	r24, 0x59	; 89
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	9a ab       	std	Y+50, r25	; 0x32
			ExtensionController(dataRef, ExtensionType::DJTurntableController), left(*this), right(*this) {}
    1056:	89 ab       	std	Y+49, r24	; 0x31
    1058:	18 ae       	std	Y+56, r1	; 0x38

		GuitarController_Shared(ExtensionData &dataRef) :
			ExtensionController(dataRef, ExtensionType::GuitarController) {}

		GuitarController_Shared(ExtensionPort &port) :
			GuitarController_Shared(port.getExtensionData()) {}
    105a:	1f aa       	std	Y+55, r1	; 0x37
    105c:	ce 01       	movw	r24, r28
			ExtensionController(dataRef, ExtensionType::GuitarController) {}
    105e:	00 d7       	rcall	.+3584   	; 0x1e60 <_ZNK19ExtensionController16getExtensionDataEv>
    1060:	45 e0       	ldi	r20, 0x05	; 5
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	bc 01       	movw	r22, r24
    1066:	ce 01       	movw	r24, r28
    1068:	c9 96       	adiw	r24, 0x39	; 57
    106a:	1c d6       	rcall	.+3128   	; 0x1ca4 <_ZN19ExtensionControllerC1ERNS_13ExtensionDataE13ExtensionType>

		DrumController_Shared(ExtensionData &dataRef) :
			ExtensionController(dataRef, ExtensionType::DrumController) {}

		DrumController_Shared(ExtensionPort &port) :
			DrumController_Shared(port.getExtensionData()) {}
    106c:	1e ae       	std	Y+62, r1	; 0x3e
    106e:	ce 01       	movw	r24, r28
			ExtensionController(dataRef, ExtensionType::DrumController) {}
    1070:	f7 d6       	rcall	.+3566   	; 0x1e60 <_ZNK19ExtensionController16getExtensionDataEv>
    1072:	46 e0       	ldi	r20, 0x06	; 6
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	bc 01       	movw	r22, r24
    1078:	ce 01       	movw	r24, r28
    107a:	cf 96       	adiw	r24, 0x3f	; 63
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	0f c6       	rjmp	.+3102   	; 0x1ca4 <_ZN19ExtensionControllerC1ERNS_13ExtensionDataE13ExtensionType>

00001086 <_ZN12WiiExtension4initEv>:
void WiiExtension::init() {
  I2Cdev::TWIInit();
    1086:	0e 94 cb 19 	call	0x3396	; 0x3396 <_ZN6I2Cdev7TWIInitEv>
  mympu_open(10);
    108a:	8a e0       	ldi	r24, 0x0A	; 10
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <_Z10mympu_openj>

00001092 <_ZN12WiiExtension15read_controllerEP10Controller>:
}
void WiiExtension::read_controller(Controller *controller) {
    1092:	8f 92       	push	r8
    1094:	9f 92       	push	r9
    1096:	af 92       	push	r10
    1098:	bf 92       	push	r11
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	8c 01       	movw	r16, r24
    10a8:	eb 01       	movw	r28, r22
  if (!port.update()) {
    10aa:	91 d6       	rcall	.+3362   	; 0x1dce <_ZN19ExtensionController6updateEv>
    10ac:	81 11       	cpse	r24, r1
    10ae:	0c c0       	rjmp	.+24     	; 0x10c8 <_ZN12WiiExtension15read_controllerEP10Controller+0x36>
    port.connect();
    10b0:	c8 01       	movw	r24, r16
    bit_write(classic.buttonZR(), controller->digital_buttons_2, XBOX_RB);
    break;
  default:
    break;
  }
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	bf 90       	pop	r11
    10c0:	af 90       	pop	r10
    10c2:	9f 90       	pop	r9
    port.connect();
    10c4:	8f 90       	pop	r8
  switch (port.getControllerType()) {
    10c6:	bc c6       	rjmp	.+3448   	; 0x1e40 <_ZN19ExtensionController7connectEv>
    10c8:	c8 01       	movw	r24, r16
    10ca:	7a d6       	rcall	.+3316   	; 0x1dc0 <_ZNK19ExtensionController17getControllerTypeEv>
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	91 05       	cpc	r25, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <_ZN12WiiExtension15read_controllerEP10Controller+0x42>
    10d2:	a9 c1       	rjmp	.+850    	; 0x1426 <_ZN12WiiExtension15read_controllerEP10Controller+0x394>
    10d4:	74 f4       	brge	.+28     	; 0x10f2 <_ZN12WiiExtension15read_controllerEP10Controller+0x60>
    10d6:	03 97       	sbiw	r24, 0x03	; 3
    10d8:	09 f4       	brne	.+2      	; 0x10dc <_ZN12WiiExtension15read_controllerEP10Controller+0x4a>
    10da:	60 c0       	rjmp	.+192    	; 0x119c <_ZN12WiiExtension15read_controllerEP10Controller+0x10a>
}
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	bf 90       	pop	r11
    10ea:	af 90       	pop	r10
    10ec:	9f 90       	pop	r9
    10ee:	8f 90       	pop	r8
    10f0:	08 95       	ret
    10f2:	85 30       	cpi	r24, 0x05	; 5
    10f4:	91 05       	cpc	r25, r1
    10f6:	09 f4       	brne	.+2      	; 0x10fa <_ZN12WiiExtension15read_controllerEP10Controller+0x68>
    10f8:	98 c0       	rjmp	.+304    	; 0x122a <_ZN12WiiExtension15read_controllerEP10Controller+0x198>
    10fa:	06 97       	sbiw	r24, 0x06	; 6
    10fc:	79 f7       	brne	.-34     	; 0x10dc <_ZN12WiiExtension15read_controllerEP10Controller+0x4a>
    controller->l_x = drum.joyX() * 8;
    10fe:	01 5c       	subi	r16, 0xC1	; 193
    1100:	1f 4f       	sbci	r17, 0xFF	; 255
    1102:	c8 01       	movw	r24, r16
    1104:	33 d4       	rcall	.+2150   	; 0x196c <_ZNK21NintendoExtensionCtrl21DrumController_Shared4joyXEv>
    1106:	88 0f       	add	r24, r24
    1108:	88 0f       	add	r24, r24
    110a:	88 0f       	add	r24, r24
    controller->l_y = drum.joyY() * 8;
    110c:	8c 83       	std	Y+4, r24	; 0x04
    110e:	c8 01       	movw	r24, r16
    1110:	34 d4       	rcall	.+2152   	; 0x197a <_ZNK21NintendoExtensionCtrl21DrumController_Shared4joyYEv>
    1112:	88 0f       	add	r24, r24
    1114:	88 0f       	add	r24, r24
    1116:	88 0f       	add	r24, r24
    bit_write(drum.drumGreen(), controller->digital_buttons_2, XBOX_A);
    1118:	8d 83       	std	Y+5, r24	; 0x05
    111a:	c8 01       	movw	r24, r16
    111c:	53 d4       	rcall	.+2214   	; 0x19c4 <_ZNK21NintendoExtensionCtrl21DrumController_Shared9drumGreenEv>
    111e:	99 81       	ldd	r25, Y+1	; 0x01
    1120:	88 23       	and	r24, r24
    1122:	09 f4       	brne	.+2      	; 0x1126 <_ZN12WiiExtension15read_controllerEP10Controller+0x94>
    1124:	72 c0       	rjmp	.+228    	; 0x120a <_ZN12WiiExtension15read_controllerEP10Controller+0x178>
    1126:	90 61       	ori	r25, 0x10	; 16
    bit_write(drum.drumRed(), controller->digital_buttons_2, XBOX_B);
    1128:	99 83       	std	Y+1, r25	; 0x01
    112a:	c8 01       	movw	r24, r16
    112c:	2d d4       	rcall	.+2138   	; 0x1988 <_ZNK21NintendoExtensionCtrl21DrumController_Shared7drumRedEv>
    112e:	99 81       	ldd	r25, Y+1	; 0x01
    1130:	88 23       	and	r24, r24
    1132:	09 f4       	brne	.+2      	; 0x1136 <_ZN12WiiExtension15read_controllerEP10Controller+0xa4>
    1134:	6c c0       	rjmp	.+216    	; 0x120e <_ZN12WiiExtension15read_controllerEP10Controller+0x17c>
    1136:	90 62       	ori	r25, 0x20	; 32
    bit_write(drum.cymbalYellow(), controller->digital_buttons_2, XBOX_Y);
    1138:	99 83       	std	Y+1, r25	; 0x01
    113a:	c8 01       	movw	r24, r16
    113c:	52 d4       	rcall	.+2212   	; 0x19e2 <_ZNK21NintendoExtensionCtrl21DrumController_Shared12cymbalYellowEv>
    113e:	99 81       	ldd	r25, Y+1	; 0x01
    1140:	88 23       	and	r24, r24
    1142:	09 f4       	brne	.+2      	; 0x1146 <_ZN12WiiExtension15read_controllerEP10Controller+0xb4>
    1144:	66 c0       	rjmp	.+204    	; 0x1212 <_ZN12WiiExtension15read_controllerEP10Controller+0x180>
    1146:	90 68       	ori	r25, 0x80	; 128
    bit_write(drum.drumBlue(), controller->digital_buttons_2, XBOX_X);
    1148:	99 83       	std	Y+1, r25	; 0x01
    114a:	c8 01       	movw	r24, r16
    114c:	2c d4       	rcall	.+2136   	; 0x19a6 <_ZNK21NintendoExtensionCtrl21DrumController_Shared8drumBlueEv>
    114e:	99 81       	ldd	r25, Y+1	; 0x01
    1150:	88 23       	and	r24, r24
    1152:	09 f4       	brne	.+2      	; 0x1156 <_ZN12WiiExtension15read_controllerEP10Controller+0xc4>
    1154:	60 c0       	rjmp	.+192    	; 0x1216 <_ZN12WiiExtension15read_controllerEP10Controller+0x184>
    1156:	90 64       	ori	r25, 0x40	; 64
    bit_write(drum.cymbalOrange(), controller->digital_buttons_2, XBOX_LB);
    1158:	99 83       	std	Y+1, r25	; 0x01
    115a:	c8 01       	movw	r24, r16
    115c:	51 d4       	rcall	.+2210   	; 0x1a00 <_ZNK21NintendoExtensionCtrl21DrumController_Shared12cymbalOrangeEv>
    115e:	99 81       	ldd	r25, Y+1	; 0x01
    1160:	88 23       	and	r24, r24
    1162:	09 f4       	brne	.+2      	; 0x1166 <_ZN12WiiExtension15read_controllerEP10Controller+0xd4>
    1164:	5a c0       	rjmp	.+180    	; 0x121a <_ZN12WiiExtension15read_controllerEP10Controller+0x188>
    bit_write(drum.bassPedal(), controller->digital_buttons_2, XBOX_RB);
    1166:	91 60       	ori	r25, 0x01	; 1
    1168:	99 83       	std	Y+1, r25	; 0x01
    116a:	c8 01       	movw	r24, r16
    116c:	57 d4       	rcall	.+2222   	; 0x1a1c <_ZNK21NintendoExtensionCtrl21DrumController_Shared9bassPedalEv>
    116e:	99 81       	ldd	r25, Y+1	; 0x01
    1170:	88 23       	and	r24, r24
    1172:	09 f4       	brne	.+2      	; 0x1176 <_ZN12WiiExtension15read_controllerEP10Controller+0xe4>
    1174:	54 c0       	rjmp	.+168    	; 0x121e <_ZN12WiiExtension15read_controllerEP10Controller+0x18c>
    bit_write(drum.buttonPlus(), controller->digital_buttons_1, XBOX_START);
    1176:	92 60       	ori	r25, 0x02	; 2
    1178:	99 83       	std	Y+1, r25	; 0x01
    117a:	c8 01       	movw	r24, r16
    117c:	5d d4       	rcall	.+2234   	; 0x1a38 <_ZNK21NintendoExtensionCtrl21DrumController_Shared10buttonPlusEv>
    117e:	98 81       	ld	r25, Y
    1180:	88 23       	and	r24, r24
    1182:	09 f4       	brne	.+2      	; 0x1186 <_ZN12WiiExtension15read_controllerEP10Controller+0xf4>
    1184:	4e c0       	rjmp	.+156    	; 0x1222 <_ZN12WiiExtension15read_controllerEP10Controller+0x190>
    1186:	90 61       	ori	r25, 0x10	; 16
    bit_write(drum.buttonMinus(), controller->digital_buttons_1, XBOX_BACK);
    1188:	98 83       	st	Y, r25
    118a:	c8 01       	movw	r24, r16
    118c:	63 d4       	rcall	.+2246   	; 0x1a54 <_ZNK21NintendoExtensionCtrl21DrumController_Shared11buttonMinusEv>
    118e:	98 81       	ld	r25, Y
    1190:	88 23       	and	r24, r24
    1192:	09 f4       	brne	.+2      	; 0x1196 <_ZN12WiiExtension15read_controllerEP10Controller+0x104>
    1194:	48 c0       	rjmp	.+144    	; 0x1226 <_ZN12WiiExtension15read_controllerEP10Controller+0x194>
    1196:	90 62       	ori	r25, 0x20	; 32
    bit_write(nchuk.buttonC(), controller->digital_buttons_2, XBOX_A);
    1198:	98 83       	st	Y, r25
    119a:	a0 cf       	rjmp	.-192    	; 0x10dc <_ZN12WiiExtension15read_controllerEP10Controller+0x4a>
    119c:	04 5e       	subi	r16, 0xE4	; 228
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	c8 01       	movw	r24, r16
    11a2:	2b d2       	rcall	.+1110   	; 0x15fa <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared7buttonCEv>
    11a4:	99 81       	ldd	r25, Y+1	; 0x01
    11a6:	88 23       	and	r24, r24
    11a8:	61 f1       	breq	.+88     	; 0x1202 <_ZN12WiiExtension15read_controllerEP10Controller+0x170>
    bit_write(nchuk.buttonZ(), controller->digital_buttons_2, XBOX_B);
    11aa:	90 61       	ori	r25, 0x10	; 16
    11ac:	99 83       	std	Y+1, r25	; 0x01
    11ae:	c8 01       	movw	r24, r16
    11b0:	30 d2       	rcall	.+1120   	; 0x1612 <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared7buttonZEv>
    11b2:	99 81       	ldd	r25, Y+1	; 0x01
    11b4:	88 23       	and	r24, r24
    controller->l_x = nchuk.joyX() * 8;
    11b6:	39 f1       	breq	.+78     	; 0x1206 <_ZN12WiiExtension15read_controllerEP10Controller+0x174>
    11b8:	90 62       	ori	r25, 0x20	; 32
    11ba:	99 83       	std	Y+1, r25	; 0x01
    11bc:	c8 01       	movw	r24, r16
    11be:	d2 d1       	rcall	.+932    	; 0x1564 <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared4joyXEv>
    11c0:	88 0f       	add	r24, r24
    11c2:	88 0f       	add	r24, r24
    controller->l_y = nchuk.joyY() * 8;
    11c4:	88 0f       	add	r24, r24
    11c6:	8c 83       	std	Y+4, r24	; 0x04
    11c8:	c8 01       	movw	r24, r16
    11ca:	ce d1       	rcall	.+924    	; 0x1568 <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared4joyYEv>
    11cc:	88 0f       	add	r24, r24
    11ce:	88 0f       	add	r24, r24
    controller->r_x = (nchuk.rollAngle() + 180);
    11d0:	88 0f       	add	r24, r24
    11d2:	8d 83       	std	Y+5, r24	; 0x05
    11d4:	c8 01       	movw	r24, r16
    11d6:	25 d2       	rcall	.+1098   	; 0x1622 <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared9rollAngleEv>
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	44 e3       	ldi	r20, 0x34	; 52
    11de:	53 e4       	ldi	r21, 0x43	; 67
    11e0:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__addsf3>
    11e4:	0e 94 0a 21 	call	0x4214	; 0x4214 <__fixunssfsi>
    controller->r_y = (nchuk.pitchAngle() + 180);
    11e8:	6e 83       	std	Y+6, r22	; 0x06
    11ea:	c8 01       	movw	r24, r16
    11ec:	59 d2       	rcall	.+1202   	; 0x16a0 <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared10pitchAngleEv>
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	44 e3       	ldi	r20, 0x34	; 52
    11f4:	53 e4       	ldi	r21, 0x43	; 67
    11f6:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__addsf3>
    11fa:	0e 94 0a 21 	call	0x4214	; 0x4214 <__fixunssfsi>
    11fe:	6f 83       	std	Y+7, r22	; 0x07
    break;
    1200:	6d cf       	rjmp	.-294    	; 0x10dc <_ZN12WiiExtension15read_controllerEP10Controller+0x4a>
    bit_write(nchuk.buttonC(), controller->digital_buttons_2, XBOX_A);
    1202:	9f 7e       	andi	r25, 0xEF	; 239
    1204:	d3 cf       	rjmp	.-90     	; 0x11ac <_ZN12WiiExtension15read_controllerEP10Controller+0x11a>
    bit_write(nchuk.buttonZ(), controller->digital_buttons_2, XBOX_B);
    1206:	9f 7d       	andi	r25, 0xDF	; 223
    1208:	d8 cf       	rjmp	.-80     	; 0x11ba <_ZN12WiiExtension15read_controllerEP10Controller+0x128>
    bit_write(drum.drumGreen(), controller->digital_buttons_2, XBOX_A);
    120a:	9f 7e       	andi	r25, 0xEF	; 239
    120c:	8d cf       	rjmp	.-230    	; 0x1128 <_ZN12WiiExtension15read_controllerEP10Controller+0x96>
    bit_write(drum.drumRed(), controller->digital_buttons_2, XBOX_B);
    120e:	9f 7d       	andi	r25, 0xDF	; 223
    bit_write(drum.cymbalYellow(), controller->digital_buttons_2, XBOX_Y);
    1210:	93 cf       	rjmp	.-218    	; 0x1138 <_ZN12WiiExtension15read_controllerEP10Controller+0xa6>
    1212:	9f 77       	andi	r25, 0x7F	; 127
    bit_write(drum.drumBlue(), controller->digital_buttons_2, XBOX_X);
    1214:	99 cf       	rjmp	.-206    	; 0x1148 <_ZN12WiiExtension15read_controllerEP10Controller+0xb6>
    1216:	9f 7b       	andi	r25, 0xBF	; 191
    bit_write(drum.cymbalOrange(), controller->digital_buttons_2, XBOX_LB);
    1218:	9f cf       	rjmp	.-194    	; 0x1158 <_ZN12WiiExtension15read_controllerEP10Controller+0xc6>
    121a:	9e 7f       	andi	r25, 0xFE	; 254
    bit_write(drum.bassPedal(), controller->digital_buttons_2, XBOX_RB);
    121c:	a5 cf       	rjmp	.-182    	; 0x1168 <_ZN12WiiExtension15read_controllerEP10Controller+0xd6>
    121e:	9d 7f       	andi	r25, 0xFD	; 253
    bit_write(drum.buttonPlus(), controller->digital_buttons_1, XBOX_START);
    1220:	ab cf       	rjmp	.-170    	; 0x1178 <_ZN12WiiExtension15read_controllerEP10Controller+0xe6>
    bit_write(drum.buttonMinus(), controller->digital_buttons_1, XBOX_BACK);
    1222:	9f 7e       	andi	r25, 0xEF	; 239
    1224:	b1 cf       	rjmp	.-158    	; 0x1188 <_ZN12WiiExtension15read_controllerEP10Controller+0xf6>
    controller->r_x = 128 - ((guitar.whammyBar() - 14) * 8);
    1226:	9f 7d       	andi	r25, 0xDF	; 223
    1228:	b7 cf       	rjmp	.-146    	; 0x1198 <_ZN12WiiExtension15read_controllerEP10Controller+0x106>
    122a:	78 01       	movw	r14, r16
    122c:	89 e3       	ldi	r24, 0x39	; 57
    122e:	e8 0e       	add	r14, r24
    1230:	f1 1c       	adc	r15, r1
    1232:	c7 01       	movw	r24, r14
    1234:	e4 d2       	rcall	.+1480   	; 0x17fe <_ZNK21NintendoExtensionCtrl23GuitarController_Shared9whammyBarEv>
    1236:	2e e1       	ldi	r18, 0x1E	; 30
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	28 1b       	sub	r18, r24
    123c:	31 09       	sbc	r19, r1
    123e:	22 0f       	add	r18, r18
    1240:	22 0f       	add	r18, r18
    1242:	22 0f       	add	r18, r18
    if (guitar.whammyBar() <= 18) {
    1244:	2e 83       	std	Y+6, r18	; 0x06
    1246:	c7 01       	movw	r24, r14
    1248:	da d2       	rcall	.+1460   	; 0x17fe <_ZNK21NintendoExtensionCtrl23GuitarController_Shared9whammyBarEv>
    124a:	83 31       	cpi	r24, 0x13	; 19
    124c:	10 f4       	brcc	.+4      	; 0x1252 <_ZN12WiiExtension15read_controllerEP10Controller+0x1c0>
      controller->r_x = 128;
    124e:	80 e8       	ldi	r24, 0x80	; 128
    1250:	8e 83       	std	Y+6, r24	; 0x06
    if (counter % 20 == 0) {
    1252:	0c 5b       	subi	r16, 0xBC	; 188
    1254:	1f 4f       	sbci	r17, 0xFF	; 255
    1256:	f8 01       	movw	r30, r16
    1258:	80 81       	ld	r24, Z
    125a:	91 81       	ldd	r25, Z+1	; 0x01
    125c:	64 e1       	ldi	r22, 0x14	; 20
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	0e 94 cb 23 	call	0x4796	; 0x4796 <__divmodhi4>
    1264:	89 2b       	or	r24, r25
    1266:	09 f0       	breq	.+2      	; 0x126a <_ZN12WiiExtension15read_controllerEP10Controller+0x1d8>
    1268:	56 c0       	rjmp	.+172    	; 0x1316 <_ZN12WiiExtension15read_controllerEP10Controller+0x284>
      z = (mympu.ypr[2] * (128 / M_PI));
    126a:	23 e8       	ldi	r18, 0x83	; 131
    126c:	39 ef       	ldi	r19, 0xF9	; 249
    126e:	42 e2       	ldi	r20, 0x22	; 34
    1270:	52 e4       	ldi	r21, 0x42	; 66
    1272:	60 91 d2 02 	lds	r22, 0x02D2	; 0x8002d2 <mympu+0x8>
    1276:	70 91 d3 02 	lds	r23, 0x02D3	; 0x8002d3 <mympu+0x9>
    127a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <mympu+0xa>
    127e:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <mympu+0xb>
    1282:	0e 94 18 22 	call	0x4430	; 0x4430 <__mulsf3>
    1286:	4b 01       	movw	r8, r22
    1288:	5c 01       	movw	r10, r24
      if (z > 128) z = 0;
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	53 e4       	ldi	r21, 0x43	; 67
    1292:	0e 94 0d 22 	call	0x441a	; 0x441a <__gesf2>
    1296:	18 16       	cp	r1, r24
    1298:	1c f4       	brge	.+6      	; 0x12a0 <_ZN12WiiExtension15read_controllerEP10Controller+0x20e>
    129a:	81 2c       	mov	r8, r1
    129c:	91 2c       	mov	r9, r1
    129e:	54 01       	movw	r10, r8
      z = z * 2;
    12a0:	a5 01       	movw	r20, r10
    12a2:	94 01       	movw	r18, r8
    12a4:	c5 01       	movw	r24, r10
    12a6:	b4 01       	movw	r22, r8
    12a8:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <__addsf3>
    12ac:	4b 01       	movw	r8, r22
    12ae:	5c 01       	movw	r10, r24
      if (z > 128) z = 256 - z;
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	53 e4       	ldi	r21, 0x43	; 67
    12b8:	0e 94 0d 22 	call	0x441a	; 0x441a <__gesf2>
    12bc:	18 16       	cp	r1, r24
    12be:	54 f4       	brge	.+20     	; 0x12d4 <_ZN12WiiExtension15read_controllerEP10Controller+0x242>
    12c0:	a5 01       	movw	r20, r10
    12c2:	94 01       	movw	r18, r8
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	80 e8       	ldi	r24, 0x80	; 128
    12ca:	93 e4       	ldi	r25, 0x43	; 67
    12cc:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__subsf3>
    12d0:	4b 01       	movw	r8, r22
    12d2:	5c 01       	movw	r10, r24
      z = pow(z, 1.1f);
    12d4:	2d ec       	ldi	r18, 0xCD	; 205
    12d6:	3c ec       	ldi	r19, 0xCC	; 204
    12d8:	4c e8       	ldi	r20, 0x8C	; 140
    12da:	5f e3       	ldi	r21, 0x3F	; 63
    12dc:	c5 01       	movw	r24, r10
    12de:	b4 01       	movw	r22, r8
    12e0:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <pow>
    12e4:	4b 01       	movw	r8, r22
    12e6:	5c 01       	movw	r10, r24
      z = constrain(z, 0, 128);
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	a9 01       	movw	r20, r18
    12ee:	0e 94 9e 20 	call	0x413c	; 0x413c <__cmpsf2>
    12f2:	87 fd       	sbrc	r24, 7
    12f4:	6c c0       	rjmp	.+216    	; 0x13ce <_ZN12WiiExtension15read_controllerEP10Controller+0x33c>
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	53 e4       	ldi	r21, 0x43	; 67
    12fe:	c5 01       	movw	r24, r10
    1300:	b4 01       	movw	r22, r8
    1302:	0e 94 0d 22 	call	0x441a	; 0x441a <__gesf2>
    1306:	18 16       	cp	r1, r24
    1308:	0c f4       	brge	.+2      	; 0x130c <_ZN12WiiExtension15read_controllerEP10Controller+0x27a>
      controller->r_y = (uint8_t)(z);
    130a:	65 c0       	rjmp	.+202    	; 0x13d6 <_ZN12WiiExtension15read_controllerEP10Controller+0x344>
    130c:	c5 01       	movw	r24, r10
    130e:	b4 01       	movw	r22, r8
    1310:	0e 94 0a 21 	call	0x4214	; 0x4214 <__fixunssfsi>
    counter++;
    1314:	6f 83       	std	Y+7, r22	; 0x07
    1316:	f8 01       	movw	r30, r16
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	01 96       	adiw	r24, 0x01	; 1
    bit_write(guitar.strumUp() || guitar.joyY() > 40,
    131e:	91 83       	std	Z+1, r25	; 0x01
    1320:	80 83       	st	Z, r24
    1322:	c7 01       	movw	r24, r14
    1324:	0b d2       	rcall	.+1046   	; 0x173c <_ZNK21NintendoExtensionCtrl23GuitarController_Shared7strumUpEv>
    1326:	88 23       	and	r24, r24
    1328:	09 f4       	brne	.+2      	; 0x132c <_ZN12WiiExtension15read_controllerEP10Controller+0x29a>
    132a:	5b c0       	rjmp	.+182    	; 0x13e2 <_ZN12WiiExtension15read_controllerEP10Controller+0x350>
    132c:	88 81       	ld	r24, Y
    bit_write(guitar.strumDown() || guitar.joyY() < 20,
    132e:	81 60       	ori	r24, 0x01	; 1
    1330:	88 83       	st	Y, r24
    1332:	c7 01       	movw	r24, r14
    1334:	0b d2       	rcall	.+1046   	; 0x174c <_ZNK21NintendoExtensionCtrl23GuitarController_Shared9strumDownEv>
    1336:	88 23       	and	r24, r24
    1338:	09 f4       	brne	.+2      	; 0x133c <_ZN12WiiExtension15read_controllerEP10Controller+0x2aa>
    133a:	5b c0       	rjmp	.+182    	; 0x13f2 <_ZN12WiiExtension15read_controllerEP10Controller+0x360>
    133c:	88 81       	ld	r24, Y
    bit_write(guitar.joyX() < 20, controller->digital_buttons_1,
    133e:	82 60       	ori	r24, 0x02	; 2
    1340:	88 83       	st	Y, r24
    1342:	c7 01       	movw	r24, r14
    1344:	ed d1       	rcall	.+986    	; 0x1720 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared4joyXEv>
    1346:	98 81       	ld	r25, Y
    1348:	84 31       	cpi	r24, 0x14	; 20
    134a:	08 f0       	brcs	.+2      	; 0x134e <_ZN12WiiExtension15read_controllerEP10Controller+0x2bc>
    134c:	5a c0       	rjmp	.+180    	; 0x1402 <_ZN12WiiExtension15read_controllerEP10Controller+0x370>
    bit_write(guitar.joyX() > 40, controller->digital_buttons_1,
    134e:	94 60       	ori	r25, 0x04	; 4
    1350:	98 83       	st	Y, r25
    1352:	c7 01       	movw	r24, r14
    1354:	e5 d1       	rcall	.+970    	; 0x1720 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared4joyXEv>
    1356:	98 81       	ld	r25, Y
    1358:	89 32       	cpi	r24, 0x29	; 41
    135a:	08 f4       	brcc	.+2      	; 0x135e <_ZN12WiiExtension15read_controllerEP10Controller+0x2cc>
    135c:	54 c0       	rjmp	.+168    	; 0x1406 <_ZN12WiiExtension15read_controllerEP10Controller+0x374>
    bit_write(guitar.buttonPlus(), controller->digital_buttons_1, XBOX_START);
    135e:	98 60       	ori	r25, 0x08	; 8
    1360:	98 83       	st	Y, r25
    1362:	c7 01       	movw	r24, r14
    1364:	53 d2       	rcall	.+1190   	; 0x180c <_ZNK21NintendoExtensionCtrl23GuitarController_Shared10buttonPlusEv>
    1366:	98 81       	ld	r25, Y
    1368:	88 23       	and	r24, r24
    136a:	09 f4       	brne	.+2      	; 0x136e <_ZN12WiiExtension15read_controllerEP10Controller+0x2dc>
    bit_write(guitar.buttonMinus(), controller->digital_buttons_1, XBOX_BACK);
    136c:	4e c0       	rjmp	.+156    	; 0x140a <_ZN12WiiExtension15read_controllerEP10Controller+0x378>
    136e:	90 61       	ori	r25, 0x10	; 16
    1370:	98 83       	st	Y, r25
    1372:	c7 01       	movw	r24, r14
    1374:	59 d2       	rcall	.+1202   	; 0x1828 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared11buttonMinusEv>
    1376:	98 81       	ld	r25, Y
    1378:	88 23       	and	r24, r24
    137a:	09 f4       	brne	.+2      	; 0x137e <_ZN12WiiExtension15read_controllerEP10Controller+0x2ec>
    bit_write(guitar.fretGreen(), controller->digital_buttons_2, XBOX_A);
    137c:	48 c0       	rjmp	.+144    	; 0x140e <_ZN12WiiExtension15read_controllerEP10Controller+0x37c>
    137e:	90 62       	ori	r25, 0x20	; 32
    1380:	98 83       	st	Y, r25
    1382:	c7 01       	movw	r24, r14
    1384:	f2 d1       	rcall	.+996    	; 0x176a <_ZNK21NintendoExtensionCtrl23GuitarController_Shared9fretGreenEv>
    1386:	99 81       	ldd	r25, Y+1	; 0x01
    1388:	88 23       	and	r24, r24
    138a:	09 f4       	brne	.+2      	; 0x138e <_ZN12WiiExtension15read_controllerEP10Controller+0x2fc>
    bit_write(guitar.fretRed(), controller->digital_buttons_2, XBOX_B);
    138c:	42 c0       	rjmp	.+132    	; 0x1412 <_ZN12WiiExtension15read_controllerEP10Controller+0x380>
    138e:	90 61       	ori	r25, 0x10	; 16
    1390:	99 83       	std	Y+1, r25	; 0x01
    1392:	c7 01       	movw	r24, r14
    1394:	f9 d1       	rcall	.+1010   	; 0x1788 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared7fretRedEv>
    1396:	99 81       	ldd	r25, Y+1	; 0x01
    1398:	88 23       	and	r24, r24
    139a:	09 f4       	brne	.+2      	; 0x139e <_ZN12WiiExtension15read_controllerEP10Controller+0x30c>
    139c:	3c c0       	rjmp	.+120    	; 0x1416 <_ZN12WiiExtension15read_controllerEP10Controller+0x384>
    bit_write(guitar.fretYellow(), controller->digital_buttons_2, XBOX_Y);
    139e:	90 62       	ori	r25, 0x20	; 32
    13a0:	99 83       	std	Y+1, r25	; 0x01
    13a2:	c7 01       	movw	r24, r14
    13a4:	00 d2       	rcall	.+1024   	; 0x17a6 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared10fretYellowEv>
    13a6:	99 81       	ldd	r25, Y+1	; 0x01
    13a8:	88 23       	and	r24, r24
    13aa:	b9 f1       	breq	.+110    	; 0x141a <_ZN12WiiExtension15read_controllerEP10Controller+0x388>
    bit_write(guitar.fretBlue(), controller->digital_buttons_2, XBOX_X);
    13ac:	90 68       	ori	r25, 0x80	; 128
    13ae:	99 83       	std	Y+1, r25	; 0x01
    13b0:	c7 01       	movw	r24, r14
    13b2:	08 d2       	rcall	.+1040   	; 0x17c4 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared8fretBlueEv>
    13b4:	99 81       	ldd	r25, Y+1	; 0x01
    13b6:	88 23       	and	r24, r24
    13b8:	91 f1       	breq	.+100    	; 0x141e <_ZN12WiiExtension15read_controllerEP10Controller+0x38c>
    bit_write(guitar.fretOrange(), controller->digital_buttons_2, XBOX_LB);
    13ba:	90 64       	ori	r25, 0x40	; 64
    13bc:	99 83       	std	Y+1, r25	; 0x01
    13be:	c7 01       	movw	r24, r14
    13c0:	10 d2       	rcall	.+1056   	; 0x17e2 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared10fretOrangeEv>
    13c2:	99 81       	ldd	r25, Y+1	; 0x01
    13c4:	88 23       	and	r24, r24
    13c6:	69 f1       	breq	.+90     	; 0x1422 <_ZN12WiiExtension15read_controllerEP10Controller+0x390>
    bit_write(classic.buttonZR(), controller->digital_buttons_2, XBOX_RB);
    13c8:	91 60       	ori	r25, 0x01	; 1
    13ca:	99 83       	std	Y+1, r25	; 0x01
      z = constrain(z, 0, 128);
    13cc:	87 ce       	rjmp	.-754    	; 0x10dc <_ZN12WiiExtension15read_controllerEP10Controller+0x4a>
    13ce:	81 2c       	mov	r8, r1
    13d0:	91 2c       	mov	r9, r1
    13d2:	54 01       	movw	r10, r8
    13d4:	9b cf       	rjmp	.-202    	; 0x130c <_ZN12WiiExtension15read_controllerEP10Controller+0x27a>
    13d6:	81 2c       	mov	r8, r1
    13d8:	91 2c       	mov	r9, r1
    13da:	a1 2c       	mov	r10, r1
    13dc:	83 e4       	ldi	r24, 0x43	; 67
    13de:	b8 2e       	mov	r11, r24
    bit_write(guitar.strumUp() || guitar.joyY() > 40,
    13e0:	95 cf       	rjmp	.-214    	; 0x130c <_ZN12WiiExtension15read_controllerEP10Controller+0x27a>
    13e2:	c7 01       	movw	r24, r14
    13e4:	a4 d1       	rcall	.+840    	; 0x172e <_ZNK21NintendoExtensionCtrl23GuitarController_Shared4joyYEv>
    13e6:	89 32       	cpi	r24, 0x29	; 41
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <_ZN12WiiExtension15read_controllerEP10Controller+0x35a>
    13ea:	a0 cf       	rjmp	.-192    	; 0x132c <_ZN12WiiExtension15read_controllerEP10Controller+0x29a>
    13ec:	88 81       	ld	r24, Y
    13ee:	8e 7f       	andi	r24, 0xFE	; 254
    bit_write(guitar.strumDown() || guitar.joyY() < 20,
    13f0:	9f cf       	rjmp	.-194    	; 0x1330 <_ZN12WiiExtension15read_controllerEP10Controller+0x29e>
    13f2:	c7 01       	movw	r24, r14
    13f4:	9c d1       	rcall	.+824    	; 0x172e <_ZNK21NintendoExtensionCtrl23GuitarController_Shared4joyYEv>
    13f6:	84 31       	cpi	r24, 0x14	; 20
    13f8:	08 f4       	brcc	.+2      	; 0x13fc <_ZN12WiiExtension15read_controllerEP10Controller+0x36a>
    13fa:	a0 cf       	rjmp	.-192    	; 0x133c <_ZN12WiiExtension15read_controllerEP10Controller+0x2aa>
    13fc:	88 81       	ld	r24, Y
    bit_write(guitar.joyX() < 20, controller->digital_buttons_1,
    13fe:	8d 7f       	andi	r24, 0xFD	; 253
    1400:	9f cf       	rjmp	.-194    	; 0x1340 <_ZN12WiiExtension15read_controllerEP10Controller+0x2ae>
    bit_write(guitar.joyX() > 40, controller->digital_buttons_1,
    1402:	9b 7f       	andi	r25, 0xFB	; 251
    bit_write(guitar.buttonPlus(), controller->digital_buttons_1, XBOX_START);
    1404:	a5 cf       	rjmp	.-182    	; 0x1350 <_ZN12WiiExtension15read_controllerEP10Controller+0x2be>
    1406:	97 7f       	andi	r25, 0xF7	; 247
    bit_write(guitar.buttonMinus(), controller->digital_buttons_1, XBOX_BACK);
    1408:	ab cf       	rjmp	.-170    	; 0x1360 <_ZN12WiiExtension15read_controllerEP10Controller+0x2ce>
    140a:	9f 7e       	andi	r25, 0xEF	; 239
    bit_write(guitar.fretGreen(), controller->digital_buttons_2, XBOX_A);
    140c:	b1 cf       	rjmp	.-158    	; 0x1370 <_ZN12WiiExtension15read_controllerEP10Controller+0x2de>
    bit_write(guitar.fretRed(), controller->digital_buttons_2, XBOX_B);
    140e:	9f 7d       	andi	r25, 0xDF	; 223
    1410:	b7 cf       	rjmp	.-146    	; 0x1380 <_ZN12WiiExtension15read_controllerEP10Controller+0x2ee>
    bit_write(guitar.fretYellow(), controller->digital_buttons_2, XBOX_Y);
    1412:	9f 7e       	andi	r25, 0xEF	; 239
    1414:	bd cf       	rjmp	.-134    	; 0x1390 <_ZN12WiiExtension15read_controllerEP10Controller+0x2fe>
    bit_write(guitar.fretBlue(), controller->digital_buttons_2, XBOX_X);
    1416:	9f 7d       	andi	r25, 0xDF	; 223
    bit_write(guitar.fretOrange(), controller->digital_buttons_2, XBOX_LB);
    1418:	c3 cf       	rjmp	.-122    	; 0x13a0 <_ZN12WiiExtension15read_controllerEP10Controller+0x30e>
    141a:	9f 77       	andi	r25, 0x7F	; 127
    controller->l_x = classic.leftJoyX() * 4;
    141c:	c8 cf       	rjmp	.-112    	; 0x13ae <_ZN12WiiExtension15read_controllerEP10Controller+0x31c>
    141e:	9f 7b       	andi	r25, 0xBF	; 191
    1420:	cd cf       	rjmp	.-102    	; 0x13bc <_ZN12WiiExtension15read_controllerEP10Controller+0x32a>
    1422:	9e 7f       	andi	r25, 0xFE	; 254
    1424:	d2 cf       	rjmp	.-92     	; 0x13ca <_ZN12WiiExtension15read_controllerEP10Controller+0x338>
    1426:	0f 5d       	subi	r16, 0xDF	; 223
    1428:	1f 4f       	sbci	r17, 0xFF	; 255
    controller->l_y = classic.leftJoyY() * 4;
    142a:	c8 01       	movw	r24, r16
    142c:	22 d3       	rcall	.+1604   	; 0x1a72 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8leftJoyXEv>
    142e:	88 0f       	add	r24, r24
    1430:	88 0f       	add	r24, r24
    1432:	8c 83       	std	Y+4, r24	; 0x04
    controller->r_x = classic.rightJoyX() * 8;
    1434:	c8 01       	movw	r24, r16
    1436:	24 d3       	rcall	.+1608   	; 0x1a80 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8leftJoyYEv>
    1438:	88 0f       	add	r24, r24
    143a:	88 0f       	add	r24, r24
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	c8 01       	movw	r24, r16
    controller->r_y = classic.rightJoyY() * 8;
    1440:	26 d3       	rcall	.+1612   	; 0x1a8e <_ZNK21NintendoExtensionCtrl24ClassicController_Shared9rightJoyXEv>
    1442:	88 0f       	add	r24, r24
    1444:	88 0f       	add	r24, r24
    1446:	88 0f       	add	r24, r24
    1448:	8e 83       	std	Y+6, r24	; 0x06
    144a:	c8 01       	movw	r24, r16
    controller->l_tr = classic.triggerL() * 8;
    144c:	39 d3       	rcall	.+1650   	; 0x1ac0 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared9rightJoyYEv>
    144e:	88 0f       	add	r24, r24
    1450:	88 0f       	add	r24, r24
    1452:	88 0f       	add	r24, r24
    1454:	8f 83       	std	Y+7, r24	; 0x07
    1456:	c8 01       	movw	r24, r16
    1458:	a7 d3       	rcall	.+1870   	; 0x1ba8 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8triggerLEv>
    controller->r_tr = classic.triggerR() * 8;
    145a:	88 0f       	add	r24, r24
    145c:	88 0f       	add	r24, r24
    145e:	88 0f       	add	r24, r24
    1460:	8a 83       	std	Y+2, r24	; 0x02
    1462:	c8 01       	movw	r24, r16
    1464:	af d3       	rcall	.+1886   	; 0x1bc4 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8triggerREv>
    bit_write(classic.dpadUp(), controller->digital_buttons_1, XBOX_DPAD_UP);
    1466:	88 0f       	add	r24, r24
    1468:	88 0f       	add	r24, r24
    146a:	88 0f       	add	r24, r24
    146c:	8b 83       	std	Y+3, r24	; 0x03
    146e:	c8 01       	movw	r24, r16
    1470:	2e d3       	rcall	.+1628   	; 0x1ace <_ZNK21NintendoExtensionCtrl24ClassicController_Shared6dpadUpEv>
    1472:	98 81       	ld	r25, Y
    1474:	88 23       	and	r24, r24
    bit_write(classic.dpadDown(), controller->digital_buttons_1,
    1476:	09 f4       	brne	.+2      	; 0x147a <_ZN12WiiExtension15read_controllerEP10Controller+0x3e8>
    1478:	5b c0       	rjmp	.+182    	; 0x1530 <_ZN12WiiExtension15read_controllerEP10Controller+0x49e>
    147a:	91 60       	ori	r25, 0x01	; 1
    147c:	98 83       	st	Y, r25
    147e:	c8 01       	movw	r24, r16
    1480:	2e d3       	rcall	.+1628   	; 0x1ade <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8dpadDownEv>
    1482:	98 81       	ld	r25, Y
    bit_write(classic.dpadLeft(), controller->digital_buttons_1,
    1484:	88 23       	and	r24, r24
    1486:	09 f4       	brne	.+2      	; 0x148a <_ZN12WiiExtension15read_controllerEP10Controller+0x3f8>
    1488:	55 c0       	rjmp	.+170    	; 0x1534 <_ZN12WiiExtension15read_controllerEP10Controller+0x4a2>
    148a:	92 60       	ori	r25, 0x02	; 2
    148c:	98 83       	st	Y, r25
    148e:	c8 01       	movw	r24, r16
    1490:	35 d3       	rcall	.+1642   	; 0x1afc <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8dpadLeftEv>
    1492:	98 81       	ld	r25, Y
    bit_write(classic.dpadRight(), controller->digital_buttons_1,
    1494:	88 23       	and	r24, r24
    1496:	09 f4       	brne	.+2      	; 0x149a <_ZN12WiiExtension15read_controllerEP10Controller+0x408>
    1498:	4f c0       	rjmp	.+158    	; 0x1538 <_ZN12WiiExtension15read_controllerEP10Controller+0x4a6>
    149a:	94 60       	ori	r25, 0x04	; 4
    149c:	98 83       	st	Y, r25
    149e:	c8 01       	movw	r24, r16
    14a0:	39 d3       	rcall	.+1650   	; 0x1b14 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared9dpadRightEv>
    14a2:	98 81       	ld	r25, Y
    bit_write(classic.buttonStart(), controller->digital_buttons_1, XBOX_START);
    14a4:	88 23       	and	r24, r24
    14a6:	09 f4       	brne	.+2      	; 0x14aa <_ZN12WiiExtension15read_controllerEP10Controller+0x418>
    14a8:	49 c0       	rjmp	.+146    	; 0x153c <_ZN12WiiExtension15read_controllerEP10Controller+0x4aa>
    14aa:	98 60       	ori	r25, 0x08	; 8
    14ac:	98 83       	st	Y, r25
    14ae:	c8 01       	movw	r24, r16
    14b0:	ba d3       	rcall	.+1908   	; 0x1c26 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared11buttonStartEv>
    bit_write(classic.buttonSelect(), controller->digital_buttons_1, XBOX_BACK);
    14b2:	98 81       	ld	r25, Y
    14b4:	88 23       	and	r24, r24
    14b6:	09 f4       	brne	.+2      	; 0x14ba <_ZN12WiiExtension15read_controllerEP10Controller+0x428>
    14b8:	43 c0       	rjmp	.+134    	; 0x1540 <_ZN12WiiExtension15read_controllerEP10Controller+0x4ae>
    14ba:	90 61       	ori	r25, 0x10	; 16
    14bc:	98 83       	st	Y, r25
    14be:	c8 01       	movw	r24, r16
    14c0:	c2 d3       	rcall	.+1924   	; 0x1c46 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared12buttonSelectEv>
    bit_write(classic.buttonHome(), controller->digital_buttons_2, XBOX_HOME);
    14c2:	98 81       	ld	r25, Y
    14c4:	88 23       	and	r24, r24
    14c6:	09 f4       	brne	.+2      	; 0x14ca <_ZN12WiiExtension15read_controllerEP10Controller+0x438>
    14c8:	3d c0       	rjmp	.+122    	; 0x1544 <_ZN12WiiExtension15read_controllerEP10Controller+0x4b2>
    14ca:	90 62       	ori	r25, 0x20	; 32
    14cc:	98 83       	st	Y, r25
    14ce:	c8 01       	movw	r24, r16
    14d0:	bb d3       	rcall	.+1910   	; 0x1c48 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared10buttonHomeEv>
    bit_write(classic.buttonA(), controller->digital_buttons_2, XBOX_A);
    14d2:	99 81       	ldd	r25, Y+1	; 0x01
    14d4:	88 23       	and	r24, r24
    14d6:	c1 f1       	breq	.+112    	; 0x1548 <_ZN12WiiExtension15read_controllerEP10Controller+0x4b6>
    14d8:	94 60       	ori	r25, 0x04	; 4
    14da:	99 83       	std	Y+1, r25	; 0x01
    14dc:	c8 01       	movw	r24, r16
    14de:	28 d3       	rcall	.+1616   	; 0x1b30 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared7buttonAEv>
    14e0:	99 81       	ldd	r25, Y+1	; 0x01
    bit_write(classic.buttonB(), controller->digital_buttons_2, XBOX_B);
    14e2:	88 23       	and	r24, r24
    14e4:	99 f1       	breq	.+102    	; 0x154c <_ZN12WiiExtension15read_controllerEP10Controller+0x4ba>
    14e6:	90 61       	ori	r25, 0x10	; 16
    14e8:	99 83       	std	Y+1, r25	; 0x01
    14ea:	c8 01       	movw	r24, r16
    14ec:	30 d3       	rcall	.+1632   	; 0x1b4e <_ZNK21NintendoExtensionCtrl24ClassicController_Shared7buttonBEv>
    14ee:	99 81       	ldd	r25, Y+1	; 0x01
    14f0:	88 23       	and	r24, r24
    bit_write(classic.buttonY(), controller->digital_buttons_2, XBOX_Y);
    14f2:	71 f1       	breq	.+92     	; 0x1550 <_ZN12WiiExtension15read_controllerEP10Controller+0x4be>
    14f4:	90 62       	ori	r25, 0x20	; 32
    14f6:	99 83       	std	Y+1, r25	; 0x01
    14f8:	c8 01       	movw	r24, r16
    14fa:	47 d3       	rcall	.+1678   	; 0x1b8a <_ZNK21NintendoExtensionCtrl24ClassicController_Shared7buttonYEv>
    14fc:	99 81       	ldd	r25, Y+1	; 0x01
    14fe:	88 23       	and	r24, r24
    1500:	49 f1       	breq	.+82     	; 0x1554 <_ZN12WiiExtension15read_controllerEP10Controller+0x4c2>
    bit_write(classic.buttonX(), controller->digital_buttons_2, XBOX_X);
    1502:	90 68       	ori	r25, 0x80	; 128
    1504:	99 83       	std	Y+1, r25	; 0x01
    1506:	c8 01       	movw	r24, r16
    1508:	31 d3       	rcall	.+1634   	; 0x1b6c <_ZNK21NintendoExtensionCtrl24ClassicController_Shared7buttonXEv>
    150a:	99 81       	ldd	r25, Y+1	; 0x01
    150c:	88 23       	and	r24, r24
    150e:	21 f1       	breq	.+72     	; 0x1558 <_ZN12WiiExtension15read_controllerEP10Controller+0x4c6>
    1510:	90 64       	ori	r25, 0x40	; 64
    bit_write(classic.buttonZL(), controller->digital_buttons_2, XBOX_LB);
    1512:	99 83       	std	Y+1, r25	; 0x01
    1514:	c8 01       	movw	r24, r16
    1516:	5d d3       	rcall	.+1722   	; 0x1bd2 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8buttonZLEv>
    1518:	99 81       	ldd	r25, Y+1	; 0x01
    151a:	88 23       	and	r24, r24
    151c:	f9 f0       	breq	.+62     	; 0x155c <_ZN12WiiExtension15read_controllerEP10Controller+0x4ca>
    151e:	91 60       	ori	r25, 0x01	; 1
    1520:	99 83       	std	Y+1, r25	; 0x01
    bit_write(classic.buttonZR(), controller->digital_buttons_2, XBOX_RB);
    1522:	c8 01       	movw	r24, r16
    1524:	64 d3       	rcall	.+1736   	; 0x1bee <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8buttonZREv>
    1526:	99 81       	ldd	r25, Y+1	; 0x01
    1528:	88 23       	and	r24, r24
    152a:	d1 f0       	breq	.+52     	; 0x1560 <_ZN12WiiExtension15read_controllerEP10Controller+0x4ce>
    152c:	92 60       	ori	r25, 0x02	; 2
    152e:	4d cf       	rjmp	.-358    	; 0x13ca <_ZN12WiiExtension15read_controllerEP10Controller+0x338>
    1530:	9e 7f       	andi	r25, 0xFE	; 254
    bit_write(classic.dpadUp(), controller->digital_buttons_1, XBOX_DPAD_UP);
    1532:	a4 cf       	rjmp	.-184    	; 0x147c <_ZN12WiiExtension15read_controllerEP10Controller+0x3ea>
    1534:	9d 7f       	andi	r25, 0xFD	; 253
    bit_write(classic.dpadDown(), controller->digital_buttons_1,
    1536:	aa cf       	rjmp	.-172    	; 0x148c <_ZN12WiiExtension15read_controllerEP10Controller+0x3fa>
    1538:	9b 7f       	andi	r25, 0xFB	; 251
    bit_write(classic.dpadLeft(), controller->digital_buttons_1,
    153a:	b0 cf       	rjmp	.-160    	; 0x149c <_ZN12WiiExtension15read_controllerEP10Controller+0x40a>
    153c:	97 7f       	andi	r25, 0xF7	; 247
    bit_write(classic.dpadRight(), controller->digital_buttons_1,
    153e:	b6 cf       	rjmp	.-148    	; 0x14ac <_ZN12WiiExtension15read_controllerEP10Controller+0x41a>
    1540:	9f 7e       	andi	r25, 0xEF	; 239
    bit_write(classic.buttonStart(), controller->digital_buttons_1, XBOX_START);
    1542:	bc cf       	rjmp	.-136    	; 0x14bc <_ZN12WiiExtension15read_controllerEP10Controller+0x42a>
    1544:	9f 7d       	andi	r25, 0xDF	; 223
    bit_write(classic.buttonSelect(), controller->digital_buttons_1, XBOX_BACK);
    1546:	c2 cf       	rjmp	.-124    	; 0x14cc <_ZN12WiiExtension15read_controllerEP10Controller+0x43a>
    1548:	9b 7f       	andi	r25, 0xFB	; 251
    bit_write(classic.buttonHome(), controller->digital_buttons_2, XBOX_HOME);
    154a:	c7 cf       	rjmp	.-114    	; 0x14da <_ZN12WiiExtension15read_controllerEP10Controller+0x448>
    154c:	9f 7e       	andi	r25, 0xEF	; 239
    bit_write(classic.buttonA(), controller->digital_buttons_2, XBOX_A);
    154e:	cc cf       	rjmp	.-104    	; 0x14e8 <_ZN12WiiExtension15read_controllerEP10Controller+0x456>
    1550:	9f 7d       	andi	r25, 0xDF	; 223
    bit_write(classic.buttonB(), controller->digital_buttons_2, XBOX_B);
    1552:	d1 cf       	rjmp	.-94     	; 0x14f6 <_ZN12WiiExtension15read_controllerEP10Controller+0x464>
    1554:	9f 77       	andi	r25, 0x7F	; 127
    bit_write(classic.buttonY(), controller->digital_buttons_2, XBOX_Y);
    1556:	d6 cf       	rjmp	.-84     	; 0x1504 <_ZN12WiiExtension15read_controllerEP10Controller+0x472>
    1558:	9f 7b       	andi	r25, 0xBF	; 191
    bit_write(classic.buttonX(), controller->digital_buttons_2, XBOX_X);
    155a:	db cf       	rjmp	.-74     	; 0x1512 <_ZN12WiiExtension15read_controllerEP10Controller+0x480>
    155c:	9e 7f       	andi	r25, 0xFE	; 254
    bit_write(classic.buttonZL(), controller->digital_buttons_2, XBOX_LB);
    155e:	e0 cf       	rjmp	.-64     	; 0x1520 <_ZN12WiiExtension15read_controllerEP10Controller+0x48e>
    1560:	9d 7f       	andi	r25, 0xFD	; 253
    bit_write(classic.buttonZR(), controller->digital_buttons_2, XBOX_RB);
    1562:	33 cf       	rjmp	.-410    	; 0x13ca <_ZN12WiiExtension15read_controllerEP10Controller+0x338>

00001564 <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared4joyXEv>:

constexpr BitMap    Nunchuk_Shared::Maps::ButtonC;
constexpr BitMap    Nunchuk_Shared::Maps::ButtonZ;

uint8_t Nunchuk_Shared::joyX() const {
	return getControlData(Maps::JoyX);
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	74 c4       	rjmp	.+2280   	; 0x1e50 <_ZNK19ExtensionController14getControlDataEh>

00001568 <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared4joyYEv>:
}

uint8_t Nunchuk_Shared::joyY() const {
	return getControlData(Maps::JoyY);
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	72 c4       	rjmp	.+2276   	; 0x1e50 <_ZNK19ExtensionController14getControlDataEh>

0000156c <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared6accelXEv>:
}

uint16_t Nunchuk_Shared::accelX() const {
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	ec 01       	movw	r28, r24
	return (getControlData(Maps::AccelX_MSB) << 2) | getControlData(Maps::AccelX_LSB);
    1572:	62 e0       	ldi	r22, 0x02	; 2
    1574:	6d d4       	rcall	.+2266   	; 0x1e50 <_ZNK19ExtensionController14getControlDataEh>
	typedef NintendoExtensionCtrl::CtrlIndex CtrlIndex;
	typedef NintendoExtensionCtrl::ByteMap   ByteMap;
	typedef NintendoExtensionCtrl::BitMap    BitMap;

	uint8_t getControlData(const ByteMap map) const {
		return (data.controlData[map.index] & map.mask) >> map.offset;
    1576:	ea 81       	ldd	r30, Y+2	; 0x02
    1578:	fb 81       	ldd	r31, Y+3	; 0x03
    157a:	27 81       	ldd	r18, Z+7	; 0x07
    157c:	2c 70       	andi	r18, 0x0C	; 12
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	35 95       	asr	r19
    1582:	27 95       	ror	r18
    1584:	35 95       	asr	r19
    1586:	27 95       	ror	r18
    1588:	44 e0       	ldi	r20, 0x04	; 4
    158a:	84 9f       	mul	r24, r20
    158c:	c0 01       	movw	r24, r0
    158e:	11 24       	eor	r1, r1
}
    1590:	82 2b       	or	r24, r18
    1592:	93 2b       	or	r25, r19
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared6accelYEv>:

uint16_t Nunchuk_Shared::accelY() const {
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	ec 01       	movw	r28, r24
	return (getControlData(Maps::AccelY_MSB) << 2) | getControlData(Maps::AccelY_LSB);
    15a0:	63 e0       	ldi	r22, 0x03	; 3
    15a2:	56 d4       	rcall	.+2220   	; 0x1e50 <_ZNK19ExtensionController14getControlDataEh>
    15a4:	ea 81       	ldd	r30, Y+2	; 0x02
    15a6:	fb 81       	ldd	r31, Y+3	; 0x03
    15a8:	27 81       	ldd	r18, Z+7	; 0x07
    15aa:	20 73       	andi	r18, 0x30	; 48
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	94 e0       	ldi	r25, 0x04	; 4
    15b0:	35 95       	asr	r19
    15b2:	27 95       	ror	r18
    15b4:	9a 95       	dec	r25
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared6accelYEv+0x16>
    15b8:	44 e0       	ldi	r20, 0x04	; 4
    15ba:	84 9f       	mul	r24, r20
    15bc:	c0 01       	movw	r24, r0
    15be:	11 24       	eor	r1, r1
}
    15c0:	82 2b       	or	r24, r18
    15c2:	93 2b       	or	r25, r19
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared6accelZEv>:

uint16_t Nunchuk_Shared::accelZ() const {
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	ec 01       	movw	r28, r24
	return (getControlData(Maps::AccelZ_MSB) << 2) | getControlData(Maps::AccelZ_LSB);
    15d0:	64 e0       	ldi	r22, 0x04	; 4
    15d2:	3e d4       	rcall	.+2172   	; 0x1e50 <_ZNK19ExtensionController14getControlDataEh>
    15d4:	ea 81       	ldd	r30, Y+2	; 0x02
    15d6:	fb 81       	ldd	r31, Y+3	; 0x03
    15d8:	27 81       	ldd	r18, Z+7	; 0x07
    15da:	20 7c       	andi	r18, 0xC0	; 192
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	96 e0       	ldi	r25, 0x06	; 6
    15e0:	35 95       	asr	r19
    15e2:	27 95       	ror	r18
    15e4:	9a 95       	dec	r25
    15e6:	e1 f7       	brne	.-8      	; 0x15e0 <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared6accelZEv+0x16>
    15e8:	44 e0       	ldi	r20, 0x04	; 4
    15ea:	84 9f       	mul	r24, r20
    15ec:	c0 01       	movw	r24, r0
    15ee:	11 24       	eor	r1, r1
}
    15f0:	82 2b       	or	r24, r18
    15f2:	93 2b       	or	r25, r19
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	08 95       	ret

000015fa <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared7buttonCEv>:
		}
		return dataOut;
	}

	boolean getControlBit(const BitMap map) const {
		return !(data.controlData[map.index] & (1 << map.position));  // Inverted logic, '0' is pressed
    15fa:	dc 01       	movw	r26, r24
    15fc:	12 96       	adiw	r26, 0x02	; 2
    15fe:	ed 91       	ld	r30, X+
    1600:	fc 91       	ld	r31, X
    1602:	87 81       	ldd	r24, Z+7	; 0x07
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	95 95       	asr	r25
    1608:	87 95       	ror	r24
    160a:	80 95       	com	r24
    160c:	90 95       	com	r25

boolean Nunchuk_Shared::buttonC() const {
	return getControlBit(Maps::ButtonC);
}
    160e:	81 70       	andi	r24, 0x01	; 1
    1610:	08 95       	ret

00001612 <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared7buttonZEv>:
    1612:	dc 01       	movw	r26, r24
    1614:	12 96       	adiw	r26, 0x02	; 2
    1616:	ed 91       	ld	r30, X+
    1618:	fc 91       	ld	r31, X
    161a:	87 81       	ldd	r24, Z+7	; 0x07
    161c:	80 95       	com	r24

boolean Nunchuk_Shared::buttonZ() const {
	return getControlBit(Maps::ButtonZ);
}
    161e:	81 70       	andi	r24, 0x01	; 1
    1620:	08 95       	ret

00001622 <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared9rollAngleEv>:

float Nunchuk_Shared::rollAngle() const {
    1622:	cf 92       	push	r12
    1624:	df 92       	push	r13
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	ec 01       	movw	r28, r24
	return atan2((float)accelX() - 511.0, (float)accelZ() - 511.0) * 180.0 / M_PI;
    1634:	ca df       	rcall	.-108    	; 0x15ca <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared6accelZEv>
    1636:	8c 01       	movw	r16, r24
    1638:	ce 01       	movw	r24, r28
    163a:	98 df       	rcall	.-208    	; 0x156c <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared6accelXEv>
    163c:	ec 01       	movw	r28, r24
    163e:	b8 01       	movw	r22, r16
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	0e 94 36 21 	call	0x426c	; 0x426c <__floatunsisf>
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e8       	ldi	r19, 0x80	; 128
    164c:	4f ef       	ldi	r20, 0xFF	; 255
    164e:	53 e4       	ldi	r21, 0x43	; 67
    1650:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__subsf3>
    1654:	6b 01       	movw	r12, r22
    1656:	7c 01       	movw	r14, r24
    1658:	be 01       	movw	r22, r28
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	0e 94 36 21 	call	0x426c	; 0x426c <__floatunsisf>
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e8       	ldi	r19, 0x80	; 128
    1666:	4f ef       	ldi	r20, 0xFF	; 255
    1668:	53 e4       	ldi	r21, 0x43	; 67
    166a:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__subsf3>
    166e:	a7 01       	movw	r20, r14
    1670:	96 01       	movw	r18, r12
    1672:	0e 94 4b 20 	call	0x4096	; 0x4096 <atan2>
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	44 e3       	ldi	r20, 0x34	; 52
    167c:	53 e4       	ldi	r21, 0x43	; 67
    167e:	0e 94 18 22 	call	0x4430	; 0x4430 <__mulsf3>
    1682:	2b ed       	ldi	r18, 0xDB	; 219
    1684:	3f e0       	ldi	r19, 0x0F	; 15
    1686:	49 e4       	ldi	r20, 0x49	; 73
    1688:	50 e4       	ldi	r21, 0x40	; 64
    168a:	0e 94 a2 20 	call	0x4144	; 0x4144 <__divsf3>
}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	08 95       	ret

000016a0 <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared10pitchAngleEv>:

float Nunchuk_Shared::pitchAngle() const {
    16a0:	cf 92       	push	r12
    16a2:	df 92       	push	r13
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	ec 01       	movw	r28, r24
	// Inverted so pulling back is a positive pitch
	return -atan2((float)accelY() - 511.0, (float)accelZ() - 511.0) * 180.0 / M_PI;
    16b2:	8b df       	rcall	.-234    	; 0x15ca <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared6accelZEv>
    16b4:	8c 01       	movw	r16, r24
    16b6:	ce 01       	movw	r24, r28
    16b8:	70 df       	rcall	.-288    	; 0x159a <_ZNK21NintendoExtensionCtrl14Nunchuk_Shared6accelYEv>
    16ba:	ec 01       	movw	r28, r24
    16bc:	b8 01       	movw	r22, r16
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	0e 94 36 21 	call	0x426c	; 0x426c <__floatunsisf>
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e8       	ldi	r19, 0x80	; 128
    16ca:	4f ef       	ldi	r20, 0xFF	; 255
    16cc:	53 e4       	ldi	r21, 0x43	; 67
    16ce:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__subsf3>
    16d2:	6b 01       	movw	r12, r22
    16d4:	7c 01       	movw	r14, r24
    16d6:	be 01       	movw	r22, r28
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	0e 94 36 21 	call	0x426c	; 0x426c <__floatunsisf>
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e8       	ldi	r19, 0x80	; 128
    16e4:	4f ef       	ldi	r20, 0xFF	; 255
    16e6:	53 e4       	ldi	r21, 0x43	; 67
    16e8:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__subsf3>
    16ec:	a7 01       	movw	r20, r14
    16ee:	96 01       	movw	r18, r12
    16f0:	0e 94 4b 20 	call	0x4096	; 0x4096 <atan2>
    16f4:	90 58       	subi	r25, 0x80	; 128
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	44 e3       	ldi	r20, 0x34	; 52
    16fc:	53 e4       	ldi	r21, 0x43	; 67
    16fe:	0e 94 18 22 	call	0x4430	; 0x4430 <__mulsf3>
    1702:	2b ed       	ldi	r18, 0xDB	; 219
    1704:	3f e0       	ldi	r19, 0x0F	; 15
    1706:	49 e4       	ldi	r20, 0x49	; 73
    1708:	50 e4       	ldi	r21, 0x40	; 64
    170a:	0e 94 a2 20 	call	0x4144	; 0x4144 <__divsf3>
}
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	cf 90       	pop	r12
    171e:	08 95       	ret

00001720 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared4joyXEv>:
		return (data.controlData[map.index] & map.mask) >> map.offset;
    1720:	dc 01       	movw	r26, r24
    1722:	12 96       	adiw	r26, 0x02	; 2
    1724:	ed 91       	ld	r30, X+
    1726:	fc 91       	ld	r31, X
    1728:	82 81       	ldd	r24, Z+2	; 0x02
constexpr ByteMap GuitarController_Shared::Maps::Whammy;
constexpr ByteMap GuitarController_Shared::Maps::Touchbar;

uint8_t GuitarController_Shared::joyX() const {
	return getControlData(Maps::JoyX);
}
    172a:	8f 73       	andi	r24, 0x3F	; 63
    172c:	08 95       	ret

0000172e <_ZNK21NintendoExtensionCtrl23GuitarController_Shared4joyYEv>:
    172e:	dc 01       	movw	r26, r24
    1730:	12 96       	adiw	r26, 0x02	; 2
    1732:	ed 91       	ld	r30, X+
    1734:	fc 91       	ld	r31, X
    1736:	83 81       	ldd	r24, Z+3	; 0x03

uint8_t GuitarController_Shared::joyY() const {
	return getControlData(Maps::JoyY);
}
    1738:	8f 73       	andi	r24, 0x3F	; 63
    173a:	08 95       	ret

0000173c <_ZNK21NintendoExtensionCtrl23GuitarController_Shared7strumUpEv>:
		return !(data.controlData[map.index] & (1 << map.position));  // Inverted logic, '0' is pressed
    173c:	dc 01       	movw	r26, r24
    173e:	12 96       	adiw	r26, 0x02	; 2
    1740:	ed 91       	ld	r30, X+
    1742:	fc 91       	ld	r31, X
    1744:	87 81       	ldd	r24, Z+7	; 0x07
    1746:	80 95       	com	r24
	return strumUp() | strumDown();
}

boolean GuitarController_Shared::strumUp() const {
	return getControlBit(Maps::StrumUp);
}
    1748:	81 70       	andi	r24, 0x01	; 1
    174a:	08 95       	ret

0000174c <_ZNK21NintendoExtensionCtrl23GuitarController_Shared9strumDownEv>:
    174c:	dc 01       	movw	r26, r24
    174e:	12 96       	adiw	r26, 0x02	; 2
    1750:	ed 91       	ld	r30, X+
    1752:	fc 91       	ld	r31, X
    1754:	86 81       	ldd	r24, Z+6	; 0x06
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	26 e0       	ldi	r18, 0x06	; 6
    175a:	95 95       	asr	r25
    175c:	87 95       	ror	r24
    175e:	2a 95       	dec	r18
    1760:	e1 f7       	brne	.-8      	; 0x175a <_ZNK21NintendoExtensionCtrl23GuitarController_Shared9strumDownEv+0xe>
    1762:	80 95       	com	r24
    1764:	90 95       	com	r25

boolean GuitarController_Shared::strumDown() const {
	return getControlBit(Maps::StrumDown);
}
    1766:	81 70       	andi	r24, 0x01	; 1
    1768:	08 95       	ret

0000176a <_ZNK21NintendoExtensionCtrl23GuitarController_Shared9fretGreenEv>:
    176a:	dc 01       	movw	r26, r24
    176c:	12 96       	adiw	r26, 0x02	; 2
    176e:	ed 91       	ld	r30, X+
    1770:	fc 91       	ld	r31, X
    1772:	87 81       	ldd	r24, Z+7	; 0x07
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	24 e0       	ldi	r18, 0x04	; 4
    1778:	95 95       	asr	r25
    177a:	87 95       	ror	r24
    177c:	2a 95       	dec	r18
    177e:	e1 f7       	brne	.-8      	; 0x1778 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared9fretGreenEv+0xe>
    1780:	80 95       	com	r24
    1782:	90 95       	com	r25

boolean GuitarController_Shared::fretGreen() const {
	return getControlBit(Maps::FretGreen);
}
    1784:	81 70       	andi	r24, 0x01	; 1
    1786:	08 95       	ret

00001788 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared7fretRedEv>:
    1788:	dc 01       	movw	r26, r24
    178a:	12 96       	adiw	r26, 0x02	; 2
    178c:	ed 91       	ld	r30, X+
    178e:	fc 91       	ld	r31, X
    1790:	87 81       	ldd	r24, Z+7	; 0x07
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	26 e0       	ldi	r18, 0x06	; 6
    1796:	95 95       	asr	r25
    1798:	87 95       	ror	r24
    179a:	2a 95       	dec	r18
    179c:	e1 f7       	brne	.-8      	; 0x1796 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared7fretRedEv+0xe>
    179e:	80 95       	com	r24
    17a0:	90 95       	com	r25

boolean GuitarController_Shared::fretRed() const {
	return getControlBit(Maps::FretRed);
}
    17a2:	81 70       	andi	r24, 0x01	; 1
    17a4:	08 95       	ret

000017a6 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared10fretYellowEv>:
    17a6:	dc 01       	movw	r26, r24
    17a8:	12 96       	adiw	r26, 0x02	; 2
    17aa:	ed 91       	ld	r30, X+
    17ac:	fc 91       	ld	r31, X
    17ae:	87 81       	ldd	r24, Z+7	; 0x07
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	23 e0       	ldi	r18, 0x03	; 3
    17b4:	95 95       	asr	r25
    17b6:	87 95       	ror	r24
    17b8:	2a 95       	dec	r18
    17ba:	e1 f7       	brne	.-8      	; 0x17b4 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared10fretYellowEv+0xe>
    17bc:	80 95       	com	r24
    17be:	90 95       	com	r25

boolean GuitarController_Shared::fretYellow() const {
	return getControlBit(Maps::FretYellow);
}
    17c0:	81 70       	andi	r24, 0x01	; 1
    17c2:	08 95       	ret

000017c4 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared8fretBlueEv>:
    17c4:	dc 01       	movw	r26, r24
    17c6:	12 96       	adiw	r26, 0x02	; 2
    17c8:	ed 91       	ld	r30, X+
    17ca:	fc 91       	ld	r31, X
    17cc:	87 81       	ldd	r24, Z+7	; 0x07
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	25 e0       	ldi	r18, 0x05	; 5
    17d2:	95 95       	asr	r25
    17d4:	87 95       	ror	r24
    17d6:	2a 95       	dec	r18
    17d8:	e1 f7       	brne	.-8      	; 0x17d2 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared8fretBlueEv+0xe>
    17da:	80 95       	com	r24
    17dc:	90 95       	com	r25

boolean GuitarController_Shared::fretBlue() const {
	return getControlBit(Maps::FretBlue);
}
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	08 95       	ret

000017e2 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared10fretOrangeEv>:
    17e2:	dc 01       	movw	r26, r24
    17e4:	12 96       	adiw	r26, 0x02	; 2
    17e6:	ed 91       	ld	r30, X+
    17e8:	fc 91       	ld	r31, X
    17ea:	87 81       	ldd	r24, Z+7	; 0x07
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	88 0f       	add	r24, r24
    17f0:	89 2f       	mov	r24, r25
    17f2:	88 1f       	adc	r24, r24
    17f4:	99 0b       	sbc	r25, r25
    17f6:	b1 e0       	ldi	r27, 0x01	; 1
    17f8:	8b 27       	eor	r24, r27

boolean GuitarController_Shared::fretOrange() const {
	return getControlBit(Maps::FretOrange);
}
    17fa:	81 70       	andi	r24, 0x01	; 1
    17fc:	08 95       	ret

000017fe <_ZNK21NintendoExtensionCtrl23GuitarController_Shared9whammyBarEv>:
		return (data.controlData[map.index] & map.mask) >> map.offset;
    17fe:	dc 01       	movw	r26, r24
    1800:	12 96       	adiw	r26, 0x02	; 2
    1802:	ed 91       	ld	r30, X+
    1804:	fc 91       	ld	r31, X
    1806:	85 81       	ldd	r24, Z+5	; 0x05

uint8_t GuitarController_Shared::whammyBar() const {
	return getControlData(Maps::Whammy);
}
    1808:	8f 71       	andi	r24, 0x1F	; 31
    180a:	08 95       	ret

0000180c <_ZNK21NintendoExtensionCtrl23GuitarController_Shared10buttonPlusEv>:
		return !(data.controlData[map.index] & (1 << map.position));  // Inverted logic, '0' is pressed
    180c:	dc 01       	movw	r26, r24
    180e:	12 96       	adiw	r26, 0x02	; 2
    1810:	ed 91       	ld	r30, X+
    1812:	fc 91       	ld	r31, X
    1814:	86 81       	ldd	r24, Z+6	; 0x06
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	95 95       	asr	r25
    181a:	87 95       	ror	r24
    181c:	95 95       	asr	r25
    181e:	87 95       	ror	r24
    1820:	80 95       	com	r24
    1822:	90 95       	com	r25
	return touchbar() >= 26;
}

boolean GuitarController_Shared::buttonPlus() const {
	return getControlBit(Maps::ButtonPlus);
}
    1824:	81 70       	andi	r24, 0x01	; 1
    1826:	08 95       	ret

00001828 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared11buttonMinusEv>:
    1828:	dc 01       	movw	r26, r24
    182a:	12 96       	adiw	r26, 0x02	; 2
    182c:	ed 91       	ld	r30, X+
    182e:	fc 91       	ld	r31, X
    1830:	86 81       	ldd	r24, Z+6	; 0x06
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	24 e0       	ldi	r18, 0x04	; 4
    1836:	95 95       	asr	r25
    1838:	87 95       	ror	r24
    183a:	2a 95       	dec	r18
    183c:	e1 f7       	brne	.-8      	; 0x1836 <_ZNK21NintendoExtensionCtrl23GuitarController_Shared11buttonMinusEv+0xe>
    183e:	80 95       	com	r24
    1840:	90 95       	com	r25

boolean GuitarController_Shared::buttonMinus() const {
	return getControlBit(Maps::ButtonMinus);
}
    1842:	81 70       	andi	r24, 0x01	; 1
    1844:	08 95       	ret

00001846 <_ZNK21NintendoExtensionCtrl28DJTurntableController_Shared13TurntableLeft9turntableEv>:
	return turntable() != 0 || buttonGreen() || buttonRed() || buttonBlue();
}

// Left Turntable
int8_t DJTurntableController_Shared::TurntableLeft::turntable() const {
	uint8_t turnData = base.getControlData(Maps::Left_Turntable);
    1846:	dc 01       	movw	r26, r24
    1848:	14 96       	adiw	r26, 0x04	; 4
    184a:	ed 91       	ld	r30, X+
    184c:	fc 91       	ld	r31, X
    184e:	02 80       	ldd	r0, Z+2	; 0x02
    1850:	f3 81       	ldd	r31, Z+3	; 0x03
    1852:	e0 2d       	mov	r30, r0
		return (data.controlData[map.index] & map.mask) >> map.offset;
    1854:	85 81       	ldd	r24, Z+5	; 0x05
    1856:	8f 71       	andi	r24, 0x1F	; 31
    1858:	96 81       	ldd	r25, Z+6	; 0x06
				if (turnSign) {  // If sign bit is 1...
    185a:	90 fd       	sbrc	r25, 0
					turnData |= 0xE0;  // Flip all sign-related bits to '1's
    185c:	80 6e       	ori	r24, 0xE0	; 224
	boolean turnSign = base.getControlData(Maps::Left_TurntableSign);
	return getTurntableSpeed(turnData, turnSign);
}
    185e:	08 95       	ret

00001860 <_ZNK21NintendoExtensionCtrl28DJTurntableController_Shared13TurntableLeft11buttonGreenEv>:

boolean DJTurntableController_Shared::TurntableLeft::buttonGreen() const {
	return base.getControlBit(Maps::Left_ButtonGreen);
    1860:	dc 01       	movw	r26, r24
    1862:	14 96       	adiw	r26, 0x04	; 4
    1864:	ed 91       	ld	r30, X+
    1866:	fc 91       	ld	r31, X
		return !(data.controlData[map.index] & (1 << map.position));  // Inverted logic, '0' is pressed
    1868:	02 80       	ldd	r0, Z+2	; 0x02
    186a:	f3 81       	ldd	r31, Z+3	; 0x03
    186c:	e0 2d       	mov	r30, r0
    186e:	87 81       	ldd	r24, Z+7	; 0x07
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	23 e0       	ldi	r18, 0x03	; 3
    1874:	95 95       	asr	r25
    1876:	87 95       	ror	r24
    1878:	2a 95       	dec	r18
    187a:	e1 f7       	brne	.-8      	; 0x1874 <_ZNK21NintendoExtensionCtrl28DJTurntableController_Shared13TurntableLeft11buttonGreenEv+0x14>
    187c:	80 95       	com	r24
    187e:	90 95       	com	r25
}
    1880:	81 70       	andi	r24, 0x01	; 1
    1882:	08 95       	ret

00001884 <_ZNK21NintendoExtensionCtrl28DJTurntableController_Shared13TurntableLeft9buttonRedEv>:

boolean DJTurntableController_Shared::TurntableLeft::buttonRed() const {
	return base.getControlBit(Maps::Left_ButtonRed);
    1884:	dc 01       	movw	r26, r24
    1886:	14 96       	adiw	r26, 0x04	; 4
    1888:	ed 91       	ld	r30, X+
    188a:	fc 91       	ld	r31, X
    188c:	02 80       	ldd	r0, Z+2	; 0x02
    188e:	f3 81       	ldd	r31, Z+3	; 0x03
    1890:	e0 2d       	mov	r30, r0
    1892:	86 81       	ldd	r24, Z+6	; 0x06
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	25 e0       	ldi	r18, 0x05	; 5
    1898:	95 95       	asr	r25
    189a:	87 95       	ror	r24
    189c:	2a 95       	dec	r18
    189e:	e1 f7       	brne	.-8      	; 0x1898 <_ZNK21NintendoExtensionCtrl28DJTurntableController_Shared13TurntableLeft9buttonRedEv+0x14>
    18a0:	80 95       	com	r24
    18a2:	90 95       	com	r25
}
    18a4:	81 70       	andi	r24, 0x01	; 1
    18a6:	08 95       	ret

000018a8 <_ZNK21NintendoExtensionCtrl28DJTurntableController_Shared13TurntableLeft10buttonBlueEv>:

boolean DJTurntableController_Shared::TurntableLeft::buttonBlue() const {
	return base.getControlBit(Maps::Left_ButtonBlue);
    18a8:	dc 01       	movw	r26, r24
    18aa:	14 96       	adiw	r26, 0x04	; 4
    18ac:	ed 91       	ld	r30, X+
    18ae:	fc 91       	ld	r31, X
    18b0:	02 80       	ldd	r0, Z+2	; 0x02
    18b2:	f3 81       	ldd	r31, Z+3	; 0x03
    18b4:	e0 2d       	mov	r30, r0
    18b6:	87 81       	ldd	r24, Z+7	; 0x07
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	88 0f       	add	r24, r24
    18bc:	89 2f       	mov	r24, r25
    18be:	88 1f       	adc	r24, r24
    18c0:	99 0b       	sbc	r25, r25
    18c2:	b1 e0       	ldi	r27, 0x01	; 1
    18c4:	8b 27       	eor	r24, r27
}
    18c6:	81 70       	andi	r24, 0x01	; 1
    18c8:	08 95       	ret

000018ca <_ZNK21NintendoExtensionCtrl28DJTurntableController_Shared14TurntableRight11buttonGreenEv>:
	boolean turnSign = base.getControlData(Maps::Right_TurntableSign);
	return getTurntableSpeed(turnData, turnSign);
}

boolean DJTurntableController_Shared::TurntableRight::buttonGreen() const {
	return base.getControlBit(Maps::Right_ButtonGreen);
    18ca:	dc 01       	movw	r26, r24
    18cc:	14 96       	adiw	r26, 0x04	; 4
    18ce:	ed 91       	ld	r30, X+
    18d0:	fc 91       	ld	r31, X
    18d2:	02 80       	ldd	r0, Z+2	; 0x02
    18d4:	f3 81       	ldd	r31, Z+3	; 0x03
    18d6:	e0 2d       	mov	r30, r0
    18d8:	87 81       	ldd	r24, Z+7	; 0x07
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	25 e0       	ldi	r18, 0x05	; 5
    18de:	95 95       	asr	r25
    18e0:	87 95       	ror	r24
    18e2:	2a 95       	dec	r18
    18e4:	e1 f7       	brne	.-8      	; 0x18de <_ZNK21NintendoExtensionCtrl28DJTurntableController_Shared14TurntableRight11buttonGreenEv+0x14>
    18e6:	80 95       	com	r24
    18e8:	90 95       	com	r25
}
    18ea:	81 70       	andi	r24, 0x01	; 1
    18ec:	08 95       	ret

000018ee <_ZNK21NintendoExtensionCtrl28DJTurntableController_Shared14TurntableRight9buttonRedEv>:

boolean DJTurntableController_Shared::TurntableRight::buttonRed() const {
	return base.getControlBit(Maps::Right_ButtonRed);
    18ee:	dc 01       	movw	r26, r24
    18f0:	14 96       	adiw	r26, 0x04	; 4
    18f2:	ed 91       	ld	r30, X+
    18f4:	fc 91       	ld	r31, X
    18f6:	02 80       	ldd	r0, Z+2	; 0x02
    18f8:	f3 81       	ldd	r31, Z+3	; 0x03
    18fa:	e0 2d       	mov	r30, r0
    18fc:	86 81       	ldd	r24, Z+6	; 0x06
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	95 95       	asr	r25
    1902:	87 95       	ror	r24
    1904:	80 95       	com	r24
    1906:	90 95       	com	r25
}
    1908:	81 70       	andi	r24, 0x01	; 1
    190a:	08 95       	ret

0000190c <_ZNK21NintendoExtensionCtrl28DJTurntableController_Shared14TurntableRight10buttonBlueEv>:

boolean DJTurntableController_Shared::TurntableRight::buttonBlue() const {
	return base.getControlBit(Maps::Right_ButtonBlue);
    190c:	dc 01       	movw	r26, r24
    190e:	14 96       	adiw	r26, 0x04	; 4
    1910:	ed 91       	ld	r30, X+
    1912:	fc 91       	ld	r31, X
    1914:	02 80       	ldd	r0, Z+2	; 0x02
    1916:	f3 81       	ldd	r31, Z+3	; 0x03
    1918:	e0 2d       	mov	r30, r0
    191a:	87 81       	ldd	r24, Z+7	; 0x07
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	95 95       	asr	r25
    1920:	87 95       	ror	r24
    1922:	95 95       	asr	r25
    1924:	87 95       	ror	r24
    1926:	80 95       	com	r24
    1928:	90 95       	com	r25
}
    192a:	81 70       	andi	r24, 0x01	; 1
    192c:	08 95       	ret

0000192e <_ZNK21NintendoExtensionCtrl28DJTurntableController_Shared14TurntableRight9turntableEv>:
			dataOut |= (data.controlData[map[i].index] & map[i].mask) >> map[i].offset;
    192e:	dc 01       	movw	r26, r24
    1930:	14 96       	adiw	r26, 0x04	; 4
    1932:	ed 91       	ld	r30, X+
    1934:	fc 91       	ld	r31, X
    1936:	02 80       	ldd	r0, Z+2	; 0x02
    1938:	f3 81       	ldd	r31, Z+3	; 0x03
    193a:	e0 2d       	mov	r30, r0
    193c:	44 81       	ldd	r20, Z+4	; 0x04
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	80 7c       	andi	r24, 0xC0	; 192
    1942:	98 2f       	mov	r25, r24
    1944:	96 95       	lsr	r25
    1946:	96 95       	lsr	r25
    1948:	96 95       	lsr	r25
    194a:	83 81       	ldd	r24, Z+3	; 0x03
    194c:	80 7c       	andi	r24, 0xC0	; 192
    194e:	82 95       	swap	r24
    1950:	86 95       	lsr	r24
    1952:	87 70       	andi	r24, 0x07	; 7
    1954:	89 2b       	or	r24, r25
    1956:	24 2f       	mov	r18, r20
    1958:	20 78       	andi	r18, 0x80	; 128
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	22 0f       	add	r18, r18
    195e:	23 2f       	mov	r18, r19
    1960:	22 1f       	adc	r18, r18
    1962:	33 0b       	sbc	r19, r19
    1964:	82 2b       	or	r24, r18
				if (turnSign) {  // If sign bit is 1...
    1966:	40 fd       	sbrc	r20, 0
					turnData |= 0xE0;  // Flip all sign-related bits to '1's
    1968:	80 6e       	ori	r24, 0xE0	; 224
}
    196a:	08 95       	ret

0000196c <_ZNK21NintendoExtensionCtrl21DrumController_Shared4joyXEv>:
		return (data.controlData[map.index] & map.mask) >> map.offset;
    196c:	dc 01       	movw	r26, r24
    196e:	12 96       	adiw	r26, 0x02	; 2
    1970:	ed 91       	ld	r30, X+
    1972:	fc 91       	ld	r31, X
    1974:	82 81       	ldd	r24, Z+2	; 0x02
constexpr ByteMap DrumController_Shared::Maps::VelocityID;
constexpr BitMap  DrumController_Shared::Maps::VelocityAvailable;

uint8_t DrumController_Shared::joyX() const {
	return getControlData(Maps::JoyX);
}
    1976:	8f 73       	andi	r24, 0x3F	; 63
    1978:	08 95       	ret

0000197a <_ZNK21NintendoExtensionCtrl21DrumController_Shared4joyYEv>:
    197a:	dc 01       	movw	r26, r24
    197c:	12 96       	adiw	r26, 0x02	; 2
    197e:	ed 91       	ld	r30, X+
    1980:	fc 91       	ld	r31, X
    1982:	83 81       	ldd	r24, Z+3	; 0x03

uint8_t DrumController_Shared::joyY() const {
	return getControlData(Maps::JoyY);
}
    1984:	8f 73       	andi	r24, 0x3F	; 63
    1986:	08 95       	ret

00001988 <_ZNK21NintendoExtensionCtrl21DrumController_Shared7drumRedEv>:
		return !(data.controlData[map.index] & (1 << map.position));  // Inverted logic, '0' is pressed
    1988:	dc 01       	movw	r26, r24
    198a:	12 96       	adiw	r26, 0x02	; 2
    198c:	ed 91       	ld	r30, X+
    198e:	fc 91       	ld	r31, X
    1990:	87 81       	ldd	r24, Z+7	; 0x07
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	26 e0       	ldi	r18, 0x06	; 6
    1996:	95 95       	asr	r25
    1998:	87 95       	ror	r24
    199a:	2a 95       	dec	r18
    199c:	e1 f7       	brne	.-8      	; 0x1996 <_ZNK21NintendoExtensionCtrl21DrumController_Shared7drumRedEv+0xe>
    199e:	80 95       	com	r24
    19a0:	90 95       	com	r25

boolean DrumController_Shared::drumRed() const {
	return getControlBit(Maps::DrumRed);
}
    19a2:	81 70       	andi	r24, 0x01	; 1
    19a4:	08 95       	ret

000019a6 <_ZNK21NintendoExtensionCtrl21DrumController_Shared8drumBlueEv>:
    19a6:	dc 01       	movw	r26, r24
    19a8:	12 96       	adiw	r26, 0x02	; 2
    19aa:	ed 91       	ld	r30, X+
    19ac:	fc 91       	ld	r31, X
    19ae:	87 81       	ldd	r24, Z+7	; 0x07
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	23 e0       	ldi	r18, 0x03	; 3
    19b4:	95 95       	asr	r25
    19b6:	87 95       	ror	r24
    19b8:	2a 95       	dec	r18
    19ba:	e1 f7       	brne	.-8      	; 0x19b4 <_ZNK21NintendoExtensionCtrl21DrumController_Shared8drumBlueEv+0xe>
    19bc:	80 95       	com	r24
    19be:	90 95       	com	r25

boolean DrumController_Shared::drumBlue() const {
	return getControlBit(Maps::DrumBlue);
}
    19c0:	81 70       	andi	r24, 0x01	; 1
    19c2:	08 95       	ret

000019c4 <_ZNK21NintendoExtensionCtrl21DrumController_Shared9drumGreenEv>:
    19c4:	dc 01       	movw	r26, r24
    19c6:	12 96       	adiw	r26, 0x02	; 2
    19c8:	ed 91       	ld	r30, X+
    19ca:	fc 91       	ld	r31, X
    19cc:	87 81       	ldd	r24, Z+7	; 0x07
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	24 e0       	ldi	r18, 0x04	; 4
    19d2:	95 95       	asr	r25
    19d4:	87 95       	ror	r24
    19d6:	2a 95       	dec	r18
    19d8:	e1 f7       	brne	.-8      	; 0x19d2 <_ZNK21NintendoExtensionCtrl21DrumController_Shared9drumGreenEv+0xe>
    19da:	80 95       	com	r24
    19dc:	90 95       	com	r25

boolean DrumController_Shared::drumGreen() const {
	return getControlBit(Maps::DrumGreen);
}
    19de:	81 70       	andi	r24, 0x01	; 1
    19e0:	08 95       	ret

000019e2 <_ZNK21NintendoExtensionCtrl21DrumController_Shared12cymbalYellowEv>:
    19e2:	dc 01       	movw	r26, r24
    19e4:	12 96       	adiw	r26, 0x02	; 2
    19e6:	ed 91       	ld	r30, X+
    19e8:	fc 91       	ld	r31, X
    19ea:	87 81       	ldd	r24, Z+7	; 0x07
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	25 e0       	ldi	r18, 0x05	; 5
    19f0:	95 95       	asr	r25
    19f2:	87 95       	ror	r24
    19f4:	2a 95       	dec	r18
    19f6:	e1 f7       	brne	.-8      	; 0x19f0 <_ZNK21NintendoExtensionCtrl21DrumController_Shared12cymbalYellowEv+0xe>
    19f8:	80 95       	com	r24
    19fa:	90 95       	com	r25

boolean DrumController_Shared::cymbalYellow() const {
	return getControlBit(Maps::CymbalYellow);
}
    19fc:	81 70       	andi	r24, 0x01	; 1
    19fe:	08 95       	ret

00001a00 <_ZNK21NintendoExtensionCtrl21DrumController_Shared12cymbalOrangeEv>:
    1a00:	dc 01       	movw	r26, r24
    1a02:	12 96       	adiw	r26, 0x02	; 2
    1a04:	ed 91       	ld	r30, X+
    1a06:	fc 91       	ld	r31, X
    1a08:	87 81       	ldd	r24, Z+7	; 0x07
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	88 0f       	add	r24, r24
    1a0e:	89 2f       	mov	r24, r25
    1a10:	88 1f       	adc	r24, r24
    1a12:	99 0b       	sbc	r25, r25
    1a14:	b1 e0       	ldi	r27, 0x01	; 1
    1a16:	8b 27       	eor	r24, r27

boolean DrumController_Shared::cymbalOrange() const {
	return getControlBit(Maps::CymbalOrange);
}
    1a18:	81 70       	andi	r24, 0x01	; 1
    1a1a:	08 95       	ret

00001a1c <_ZNK21NintendoExtensionCtrl21DrumController_Shared9bassPedalEv>:
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	12 96       	adiw	r26, 0x02	; 2
    1a20:	ed 91       	ld	r30, X+
    1a22:	fc 91       	ld	r31, X
    1a24:	87 81       	ldd	r24, Z+7	; 0x07
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	95 95       	asr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	95 95       	asr	r25
    1a2e:	87 95       	ror	r24
    1a30:	80 95       	com	r24
    1a32:	90 95       	com	r25

boolean DrumController_Shared::bassPedal() const {
	return getControlBit(Maps::Pedal);
}
    1a34:	81 70       	andi	r24, 0x01	; 1
    1a36:	08 95       	ret

00001a38 <_ZNK21NintendoExtensionCtrl21DrumController_Shared10buttonPlusEv>:
    1a38:	dc 01       	movw	r26, r24
    1a3a:	12 96       	adiw	r26, 0x02	; 2
    1a3c:	ed 91       	ld	r30, X+
    1a3e:	fc 91       	ld	r31, X
    1a40:	86 81       	ldd	r24, Z+6	; 0x06
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	95 95       	asr	r25
    1a46:	87 95       	ror	r24
    1a48:	95 95       	asr	r25
    1a4a:	87 95       	ror	r24
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25

boolean DrumController_Shared::buttonPlus() const {
	return getControlBit(Maps::ButtonPlus);
}
    1a50:	81 70       	andi	r24, 0x01	; 1
    1a52:	08 95       	ret

00001a54 <_ZNK21NintendoExtensionCtrl21DrumController_Shared11buttonMinusEv>:
    1a54:	dc 01       	movw	r26, r24
    1a56:	12 96       	adiw	r26, 0x02	; 2
    1a58:	ed 91       	ld	r30, X+
    1a5a:	fc 91       	ld	r31, X
    1a5c:	86 81       	ldd	r24, Z+6	; 0x06
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	24 e0       	ldi	r18, 0x04	; 4
    1a62:	95 95       	asr	r25
    1a64:	87 95       	ror	r24
    1a66:	2a 95       	dec	r18
    1a68:	e1 f7       	brne	.-8      	; 0x1a62 <_ZNK21NintendoExtensionCtrl21DrumController_Shared11buttonMinusEv+0xe>
    1a6a:	80 95       	com	r24
    1a6c:	90 95       	com	r25

boolean DrumController_Shared::buttonMinus() const {
	return getControlBit(Maps::ButtonMinus);
}
    1a6e:	81 70       	andi	r24, 0x01	; 1
    1a70:	08 95       	ret

00001a72 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8leftJoyXEv>:
		return (data.controlData[map.index] & map.mask) >> map.offset;
    1a72:	dc 01       	movw	r26, r24
    1a74:	12 96       	adiw	r26, 0x02	; 2
    1a76:	ed 91       	ld	r30, X+
    1a78:	fc 91       	ld	r31, X
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
constexpr BitMap ClassicController_Shared::Maps::ButtonMinus;
constexpr BitMap ClassicController_Shared::Maps::ButtonHome;

uint8_t ClassicController_Shared::leftJoyX() const {
  return getControlData(Maps::LeftJoyX);
}
    1a7c:	8f 73       	andi	r24, 0x3F	; 63
    1a7e:	08 95       	ret

00001a80 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8leftJoyYEv>:
    1a80:	dc 01       	movw	r26, r24
    1a82:	12 96       	adiw	r26, 0x02	; 2
    1a84:	ed 91       	ld	r30, X+
    1a86:	fc 91       	ld	r31, X
    1a88:	83 81       	ldd	r24, Z+3	; 0x03

uint8_t ClassicController_Shared::leftJoyY() const {
  return getControlData(Maps::LeftJoyY);
}
    1a8a:	8f 73       	andi	r24, 0x3F	; 63
    1a8c:	08 95       	ret

00001a8e <_ZNK21NintendoExtensionCtrl24ClassicController_Shared9rightJoyXEv>:
			dataOut |= (data.controlData[map[i].index] & map[i].mask) >> map[i].offset;
    1a8e:	dc 01       	movw	r26, r24
    1a90:	12 96       	adiw	r26, 0x02	; 2
    1a92:	ed 91       	ld	r30, X+
    1a94:	fc 91       	ld	r31, X
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	80 7c       	andi	r24, 0xC0	; 192
    1a9a:	98 2f       	mov	r25, r24
    1a9c:	96 95       	lsr	r25
    1a9e:	96 95       	lsr	r25
    1aa0:	96 95       	lsr	r25
    1aa2:	83 81       	ldd	r24, Z+3	; 0x03
    1aa4:	80 7c       	andi	r24, 0xC0	; 192
    1aa6:	82 95       	swap	r24
    1aa8:	86 95       	lsr	r24
    1aaa:	87 70       	andi	r24, 0x07	; 7
    1aac:	89 2b       	or	r24, r25
    1aae:	24 81       	ldd	r18, Z+4	; 0x04
    1ab0:	20 78       	andi	r18, 0x80	; 128
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	22 0f       	add	r18, r18
    1ab6:	23 2f       	mov	r18, r19
    1ab8:	22 1f       	adc	r18, r18
    1aba:	33 0b       	sbc	r19, r19

uint8_t ClassicController_Shared::rightJoyX() const {
  return getControlData(Maps::RightJoyX);
}
    1abc:	82 2b       	or	r24, r18
    1abe:	08 95       	ret

00001ac0 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared9rightJoyYEv>:
		return (data.controlData[map.index] & map.mask) >> map.offset;
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	12 96       	adiw	r26, 0x02	; 2
    1ac4:	ed 91       	ld	r30, X+
    1ac6:	fc 91       	ld	r31, X
    1ac8:	84 81       	ldd	r24, Z+4	; 0x04

uint8_t ClassicController_Shared::rightJoyY() const {
  return getControlData(Maps::RightJoyY);
}
    1aca:	8f 71       	andi	r24, 0x1F	; 31
    1acc:	08 95       	ret

00001ace <_ZNK21NintendoExtensionCtrl24ClassicController_Shared6dpadUpEv>:
		return !(data.controlData[map.index] & (1 << map.position));  // Inverted logic, '0' is pressed
    1ace:	dc 01       	movw	r26, r24
    1ad0:	12 96       	adiw	r26, 0x02	; 2
    1ad2:	ed 91       	ld	r30, X+
    1ad4:	fc 91       	ld	r31, X
    1ad6:	87 81       	ldd	r24, Z+7	; 0x07
    1ad8:	80 95       	com	r24

boolean ClassicController_Shared::dpadUp() const {
  return getControlBit(Maps::DpadUp);
}
    1ada:	81 70       	andi	r24, 0x01	; 1
    1adc:	08 95       	ret

00001ade <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8dpadDownEv>:
    1ade:	dc 01       	movw	r26, r24
    1ae0:	12 96       	adiw	r26, 0x02	; 2
    1ae2:	ed 91       	ld	r30, X+
    1ae4:	fc 91       	ld	r31, X
    1ae6:	86 81       	ldd	r24, Z+6	; 0x06
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	26 e0       	ldi	r18, 0x06	; 6
    1aec:	95 95       	asr	r25
    1aee:	87 95       	ror	r24
    1af0:	2a 95       	dec	r18
    1af2:	e1 f7       	brne	.-8      	; 0x1aec <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8dpadDownEv+0xe>
    1af4:	80 95       	com	r24
    1af6:	90 95       	com	r25

boolean ClassicController_Shared::dpadDown() const {
  return getControlBit(Maps::DpadDown);
}
    1af8:	81 70       	andi	r24, 0x01	; 1
    1afa:	08 95       	ret

00001afc <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8dpadLeftEv>:
    1afc:	dc 01       	movw	r26, r24
    1afe:	12 96       	adiw	r26, 0x02	; 2
    1b00:	ed 91       	ld	r30, X+
    1b02:	fc 91       	ld	r31, X
    1b04:	87 81       	ldd	r24, Z+7	; 0x07
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	95 95       	asr	r25
    1b0a:	87 95       	ror	r24
    1b0c:	80 95       	com	r24
    1b0e:	90 95       	com	r25

boolean ClassicController_Shared::dpadLeft() const {
  return getControlBit(Maps::DpadLeft);
}
    1b10:	81 70       	andi	r24, 0x01	; 1
    1b12:	08 95       	ret

00001b14 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared9dpadRightEv>:
    1b14:	dc 01       	movw	r26, r24
    1b16:	12 96       	adiw	r26, 0x02	; 2
    1b18:	ed 91       	ld	r30, X+
    1b1a:	fc 91       	ld	r31, X
    1b1c:	86 81       	ldd	r24, Z+6	; 0x06
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	88 0f       	add	r24, r24
    1b22:	89 2f       	mov	r24, r25
    1b24:	88 1f       	adc	r24, r24
    1b26:	99 0b       	sbc	r25, r25
    1b28:	b1 e0       	ldi	r27, 0x01	; 1
    1b2a:	8b 27       	eor	r24, r27

boolean ClassicController_Shared::dpadRight() const {
  return getControlBit(Maps::DpadRight);
}
    1b2c:	81 70       	andi	r24, 0x01	; 1
    1b2e:	08 95       	ret

00001b30 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared7buttonAEv>:
    1b30:	dc 01       	movw	r26, r24
    1b32:	12 96       	adiw	r26, 0x02	; 2
    1b34:	ed 91       	ld	r30, X+
    1b36:	fc 91       	ld	r31, X
    1b38:	87 81       	ldd	r24, Z+7	; 0x07
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	24 e0       	ldi	r18, 0x04	; 4
    1b3e:	95 95       	asr	r25
    1b40:	87 95       	ror	r24
    1b42:	2a 95       	dec	r18
    1b44:	e1 f7       	brne	.-8      	; 0x1b3e <_ZNK21NintendoExtensionCtrl24ClassicController_Shared7buttonAEv+0xe>
    1b46:	80 95       	com	r24
    1b48:	90 95       	com	r25

boolean ClassicController_Shared::buttonA() const {
  return getControlBit(Maps::ButtonA);
}
    1b4a:	81 70       	andi	r24, 0x01	; 1
    1b4c:	08 95       	ret

00001b4e <_ZNK21NintendoExtensionCtrl24ClassicController_Shared7buttonBEv>:
    1b4e:	dc 01       	movw	r26, r24
    1b50:	12 96       	adiw	r26, 0x02	; 2
    1b52:	ed 91       	ld	r30, X+
    1b54:	fc 91       	ld	r31, X
    1b56:	87 81       	ldd	r24, Z+7	; 0x07
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	26 e0       	ldi	r18, 0x06	; 6
    1b5c:	95 95       	asr	r25
    1b5e:	87 95       	ror	r24
    1b60:	2a 95       	dec	r18
    1b62:	e1 f7       	brne	.-8      	; 0x1b5c <_ZNK21NintendoExtensionCtrl24ClassicController_Shared7buttonBEv+0xe>
    1b64:	80 95       	com	r24
    1b66:	90 95       	com	r25

boolean ClassicController_Shared::buttonB() const {
  return getControlBit(Maps::ButtonB);
}
    1b68:	81 70       	andi	r24, 0x01	; 1
    1b6a:	08 95       	ret

00001b6c <_ZNK21NintendoExtensionCtrl24ClassicController_Shared7buttonXEv>:
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	12 96       	adiw	r26, 0x02	; 2
    1b70:	ed 91       	ld	r30, X+
    1b72:	fc 91       	ld	r31, X
    1b74:	87 81       	ldd	r24, Z+7	; 0x07
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	23 e0       	ldi	r18, 0x03	; 3
    1b7a:	95 95       	asr	r25
    1b7c:	87 95       	ror	r24
    1b7e:	2a 95       	dec	r18
    1b80:	e1 f7       	brne	.-8      	; 0x1b7a <_ZNK21NintendoExtensionCtrl24ClassicController_Shared7buttonXEv+0xe>
    1b82:	80 95       	com	r24
    1b84:	90 95       	com	r25

boolean ClassicController_Shared::buttonX() const {
  return getControlBit(Maps::ButtonX);
}
    1b86:	81 70       	andi	r24, 0x01	; 1
    1b88:	08 95       	ret

00001b8a <_ZNK21NintendoExtensionCtrl24ClassicController_Shared7buttonYEv>:
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	12 96       	adiw	r26, 0x02	; 2
    1b8e:	ed 91       	ld	r30, X+
    1b90:	fc 91       	ld	r31, X
    1b92:	87 81       	ldd	r24, Z+7	; 0x07
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	25 e0       	ldi	r18, 0x05	; 5
    1b98:	95 95       	asr	r25
    1b9a:	87 95       	ror	r24
    1b9c:	2a 95       	dec	r18
    1b9e:	e1 f7       	brne	.-8      	; 0x1b98 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared7buttonYEv+0xe>
    1ba0:	80 95       	com	r24
    1ba2:	90 95       	com	r25

boolean ClassicController_Shared::buttonY() const {
  return getControlBit(Maps::ButtonY);
}
    1ba4:	81 70       	andi	r24, 0x01	; 1
    1ba6:	08 95       	ret

00001ba8 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8triggerLEv>:
			dataOut |= (data.controlData[map[i].index] & map[i].mask) >> map[i].offset;
    1ba8:	dc 01       	movw	r26, r24
    1baa:	12 96       	adiw	r26, 0x02	; 2
    1bac:	ed 91       	ld	r30, X+
    1bae:	fc 91       	ld	r31, X
    1bb0:	94 81       	ldd	r25, Z+4	; 0x04
    1bb2:	90 76       	andi	r25, 0x60	; 96
    1bb4:	96 95       	lsr	r25
    1bb6:	96 95       	lsr	r25
    1bb8:	85 81       	ldd	r24, Z+5	; 0x05
    1bba:	82 95       	swap	r24
    1bbc:	86 95       	lsr	r24
    1bbe:	87 70       	andi	r24, 0x07	; 7

uint8_t ClassicController_Shared::triggerL() const {
  return getControlData(Maps::TriggerL);
}
    1bc0:	89 2b       	or	r24, r25
    1bc2:	08 95       	ret

00001bc4 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8triggerREv>:
		return (data.controlData[map.index] & map.mask) >> map.offset;
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	12 96       	adiw	r26, 0x02	; 2
    1bc8:	ed 91       	ld	r30, X+
    1bca:	fc 91       	ld	r31, X
    1bcc:	85 81       	ldd	r24, Z+5	; 0x05

uint8_t ClassicController_Shared::triggerR() const {
  return getControlData(Maps::TriggerR);
}
    1bce:	8f 71       	andi	r24, 0x1F	; 31
    1bd0:	08 95       	ret

00001bd2 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8buttonZLEv>:
		return !(data.controlData[map.index] & (1 << map.position));  // Inverted logic, '0' is pressed
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	12 96       	adiw	r26, 0x02	; 2
    1bd6:	ed 91       	ld	r30, X+
    1bd8:	fc 91       	ld	r31, X
    1bda:	87 81       	ldd	r24, Z+7	; 0x07
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	88 0f       	add	r24, r24
    1be0:	89 2f       	mov	r24, r25
    1be2:	88 1f       	adc	r24, r24
    1be4:	99 0b       	sbc	r25, r25
    1be6:	b1 e0       	ldi	r27, 0x01	; 1
    1be8:	8b 27       	eor	r24, r27
  return getControlBit(Maps::ButtonR);
}

boolean ClassicController_Shared::buttonZL() const {
  return getControlBit(Maps::ButtonZL);
}
    1bea:	81 70       	andi	r24, 0x01	; 1
    1bec:	08 95       	ret

00001bee <_ZNK21NintendoExtensionCtrl24ClassicController_Shared8buttonZREv>:
    1bee:	dc 01       	movw	r26, r24
    1bf0:	12 96       	adiw	r26, 0x02	; 2
    1bf2:	ed 91       	ld	r30, X+
    1bf4:	fc 91       	ld	r31, X
    1bf6:	87 81       	ldd	r24, Z+7	; 0x07
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	95 95       	asr	r25
    1bfc:	87 95       	ror	r24
    1bfe:	95 95       	asr	r25
    1c00:	87 95       	ror	r24
    1c02:	80 95       	com	r24
    1c04:	90 95       	com	r25

boolean ClassicController_Shared::buttonZR() const {
  return getControlBit(Maps::ButtonZR);
}
    1c06:	81 70       	andi	r24, 0x01	; 1
    1c08:	08 95       	ret

00001c0a <_ZNK21NintendoExtensionCtrl24ClassicController_Shared10buttonPlusEv>:
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	12 96       	adiw	r26, 0x02	; 2
    1c0e:	ed 91       	ld	r30, X+
    1c10:	fc 91       	ld	r31, X
    1c12:	86 81       	ldd	r24, Z+6	; 0x06
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	95 95       	asr	r25
    1c18:	87 95       	ror	r24
    1c1a:	95 95       	asr	r25
    1c1c:	87 95       	ror	r24
    1c1e:	80 95       	com	r24
    1c20:	90 95       	com	r25

boolean ClassicController_Shared::buttonSelect() const { return buttonMinus(); }

boolean ClassicController_Shared::buttonPlus() const {
  return getControlBit(Maps::ButtonPlus);
}
    1c22:	81 70       	andi	r24, 0x01	; 1
    1c24:	08 95       	ret

00001c26 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared11buttonStartEv>:
boolean ClassicController_Shared::buttonStart() const { return buttonPlus(); }
    1c26:	f1 cf       	rjmp	.-30     	; 0x1c0a <_ZNK21NintendoExtensionCtrl24ClassicController_Shared10buttonPlusEv>

00001c28 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared11buttonMinusEv>:
    1c28:	dc 01       	movw	r26, r24
    1c2a:	12 96       	adiw	r26, 0x02	; 2
    1c2c:	ed 91       	ld	r30, X+
    1c2e:	fc 91       	ld	r31, X
    1c30:	86 81       	ldd	r24, Z+6	; 0x06
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	24 e0       	ldi	r18, 0x04	; 4
    1c36:	95 95       	asr	r25
    1c38:	87 95       	ror	r24
    1c3a:	2a 95       	dec	r18
    1c3c:	e1 f7       	brne	.-8      	; 0x1c36 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared11buttonMinusEv+0xe>
    1c3e:	80 95       	com	r24
    1c40:	90 95       	com	r25

boolean ClassicController_Shared::buttonMinus() const {
  return getControlBit(Maps::ButtonMinus);
}
    1c42:	81 70       	andi	r24, 0x01	; 1
    1c44:	08 95       	ret

00001c46 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared12buttonSelectEv>:
boolean ClassicController_Shared::buttonSelect() const { return buttonMinus(); }
    1c46:	f0 cf       	rjmp	.-32     	; 0x1c28 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared11buttonMinusEv>

00001c48 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared10buttonHomeEv>:
    1c48:	dc 01       	movw	r26, r24
    1c4a:	12 96       	adiw	r26, 0x02	; 2
    1c4c:	ed 91       	ld	r30, X+
    1c4e:	fc 91       	ld	r31, X
    1c50:	86 81       	ldd	r24, Z+6	; 0x06
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	23 e0       	ldi	r18, 0x03	; 3
    1c56:	95 95       	asr	r25
    1c58:	87 95       	ror	r24
    1c5a:	2a 95       	dec	r18
    1c5c:	e1 f7       	brne	.-8      	; 0x1c56 <_ZNK21NintendoExtensionCtrl24ClassicController_Shared10buttonHomeEv+0xe>
    1c5e:	80 95       	com	r24
    1c60:	90 95       	com	r25

boolean ClassicController_Shared::buttonHome() const {
  return getControlBit(Maps::ButtonHome);
}
    1c62:	81 70       	andi	r24, 0x01	; 1
    1c64:	08 95       	ret

00001c66 <_ZN21NintendoExtensionCtrl10verifyDataEPKhh>:

boolean verifyData(const uint8_t *dataIn, uint8_t dataSize) {
  byte orCheck = 0x00;  // Check if data is zeroed (bad connection)
  byte andCheck = 0xFF; // Check if data is maxed (bad init)

  for (int i = 0; i < dataSize; i++) {
    1c66:	68 0f       	add	r22, r24
    1c68:	79 2f       	mov	r23, r25
    1c6a:	71 1d       	adc	r23, r1
  byte andCheck = 0xFF; // Check if data is maxed (bad init)
    1c6c:	2f ef       	ldi	r18, 0xFF	; 255
  byte orCheck = 0x00;  // Check if data is zeroed (bad connection)
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
  for (int i = 0; i < dataSize; i++) {
    1c70:	86 17       	cp	r24, r22
    1c72:	97 07       	cpc	r25, r23
    1c74:	31 f0       	breq	.+12     	; 0x1c82 <_ZN21NintendoExtensionCtrl10verifyDataEPKhh+0x1c>
    orCheck |= dataIn[i];
    1c76:	fc 01       	movw	r30, r24
    1c78:	41 91       	ld	r20, Z+
    1c7a:	cf 01       	movw	r24, r30
    1c7c:	34 2b       	or	r19, r20
    andCheck &= dataIn[i];
    1c7e:	24 23       	and	r18, r20
  for (int i = 0; i < dataSize; i++) {
    1c80:	f7 cf       	rjmp	.-18     	; 0x1c70 <_ZN21NintendoExtensionCtrl10verifyDataEPKhh+0xa>
  }

  if (orCheck == 0x00 || andCheck == 0xFF) {
    1c82:	33 23       	and	r19, r19
    1c84:	19 f0       	breq	.+6      	; 0x1c8c <_ZN21NintendoExtensionCtrl10verifyDataEPKhh+0x26>
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	2f 3f       	cpi	r18, 0xFF	; 255
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <_ZN21NintendoExtensionCtrl10verifyDataEPKhh+0x28>
    return false; // No data or bad data
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
  }

  return true;
}
    1c8e:	08 95       	ret

00001c90 <_ZN19ExtensionControllerC1ERNS_13ExtensionDataE>:

#include "ExtensionController.h"
#include <string.h>
using namespace NintendoExtensionCtrl;

ExtensionController::ExtensionController(ExtensionData& dataRef)
    1c90:	fc 01       	movw	r30, r24
	: ExtensionController(dataRef, ExtensionType::AnyController) {}

ExtensionController::ExtensionController(ExtensionData& dataRef, ExtensionType conID)
	: id(conID), data(dataRef)  {}
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	91 83       	std	Z+1, r25	; 0x01
    1c98:	80 83       	st	Z, r24
    1c9a:	73 83       	std	Z+3, r23	; 0x03
    1c9c:	62 83       	std	Z+2, r22	; 0x02
    1c9e:	86 e0       	ldi	r24, 0x06	; 6
    1ca0:	84 83       	std	Z+4, r24	; 0x04
	: ExtensionController(dataRef, ExtensionType::AnyController) {}
    1ca2:	08 95       	ret

00001ca4 <_ZN19ExtensionControllerC1ERNS_13ExtensionDataE13ExtensionType>:
ExtensionController::ExtensionController(ExtensionData& dataRef, ExtensionType conID)
    1ca4:	fc 01       	movw	r30, r24
	: id(conID), data(dataRef)  {}
    1ca6:	51 83       	std	Z+1, r21	; 0x01
    1ca8:	40 83       	st	Z, r20
    1caa:	73 83       	std	Z+3, r23	; 0x03
    1cac:	62 83       	std	Z+2, r22	; 0x02
    1cae:	86 e0       	ldi	r24, 0x06	; 6
    1cb0:	84 83       	std	Z+4, r24	; 0x04
    1cb2:	08 95       	ret

00001cb4 <_ZN19ExtensionController10disconnectEv>:

	return success;
}

void ExtensionController::disconnect() {
	data.connectedType = ExtensionType::NoController;  // Nothing connected
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	12 96       	adiw	r26, 0x02	; 2
    1cb8:	ed 91       	ld	r30, X+
    1cba:	fc 91       	ld	r31, X
    1cbc:	13 97       	sbiw	r26, 0x03	; 3
    1cbe:	11 82       	std	Z+1, r1	; 0x01
    1cc0:	10 82       	st	Z, r1
	memset(&data.controlData, 0x00, ExtensionData::ControlDataSize);  // Clear control data
    1cc2:	12 96       	adiw	r26, 0x02	; 2
    1cc4:	ed 91       	ld	r30, X+
    1cc6:	fc 91       	ld	r31, X
    1cc8:	32 96       	adiw	r30, 0x02	; 2
    1cca:	85 e1       	ldi	r24, 0x15	; 21
    1ccc:	df 01       	movw	r26, r30
    1cce:	1d 92       	st	X+, r1
    1cd0:	8a 95       	dec	r24
    1cd2:	e9 f7       	brne	.-6      	; 0x1cce <_ZN19ExtensionController10disconnectEv+0x1a>
}
    1cd4:	08 95       	ret

00001cd6 <_ZN19ExtensionController18identifyControllerEv>:
void ExtensionController::reset() {
	disconnect();
	requestSize = MinRequestSize;  // Request size back to minimum
}

void ExtensionController::identifyController() {
    1cd6:	ef 92       	push	r14
    1cd8:	ff 92       	push	r15
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <_ZN19ExtensionController18identifyControllerEv+0xe>
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <_ZN19ExtensionController18identifyControllerEv+0x10>
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <_ZN19ExtensionController18identifyControllerEv+0x12>
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
	data.connectedType = NintendoExtensionCtrl::identifyController();  // Polls the controller for its identity
    1cec:	fc 01       	movw	r30, r24
    1cee:	e2 80       	ldd	r14, Z+2	; 0x02
    1cf0:	f3 80       	ldd	r15, Z+3	; 0x03
  return I2Cdev::readBytes(I2C_Addr, 0x00, size, controlData);
}

// Identity
inline boolean requestIdentity(uint8_t *idData) {
  return I2Cdev::readBytes(I2C_Addr, 0xFA, ID_Size, idData);
    1cf2:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_ZN6I2Cdev11readTimeoutE>
    1cf6:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_ZN6I2Cdev11readTimeoutE+0x1>
    1cfa:	9e 01       	movw	r18, r28
    1cfc:	2f 5f       	subi	r18, 0xFF	; 255
    1cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1d00:	46 e0       	ldi	r20, 0x06	; 6
    1d02:	6a ef       	ldi	r22, 0xFA	; 250
    1d04:	82 e5       	ldi	r24, 0x52	; 82
    1d06:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <_ZN6I2Cdev9readBytesEhhhPhj>
}

inline ExtensionType identifyController() {
  uint8_t idData[ID_Size];

  if (!requestIdentity(idData)) {
    1d0a:	88 23       	and	r24, r24
    1d0c:	a9 f1       	breq	.+106    	; 0x1d78 <_ZN19ExtensionController18identifyControllerEv+0xa2>
	DJTurntableController,
};

namespace NintendoExtensionCtrl {
	inline ExtensionType identifyController(const uint8_t * idData) {
		if (idData[2] == 0xA4 && idData[3] == 0x20) {  // All valid IDs
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	84 3a       	cpi	r24, 0xA4	; 164
    1d12:	f1 f5       	brne	.+124    	; 0x1d90 <_ZN19ExtensionController18identifyControllerEv+0xba>
    1d14:	8c 81       	ldd	r24, Y+4	; 0x04
    1d16:	80 32       	cpi	r24, 0x20	; 32
    1d18:	d9 f5       	brne	.+118    	; 0x1d90 <_ZN19ExtensionController18identifyControllerEv+0xba>
			// Nunchuk ID: 0x0000
			if (idData[4] == 0x00 && idData[5] == 0x00) {
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	81 11       	cpse	r24, r1
    1d1e:	06 c0       	rjmp	.+12     	; 0x1d2c <_ZN19ExtensionController18identifyControllerEv+0x56>
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	91 11       	cpse	r25, r1
    1d24:	08 c0       	rjmp	.+16     	; 0x1d36 <_ZN19ExtensionController18identifyControllerEv+0x60>
				return ExtensionType::Nunchuk;
    1d26:	83 e0       	ldi	r24, 0x03	; 3
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	16 c0       	rjmp	.+44     	; 0x1d58 <_ZN19ExtensionController18identifyControllerEv+0x82>
			}

			// Classic Con. ID: 0x0101
			else if (idData[4] == 0x01 && idData[5] == 0x01) {
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	19 f4       	brne	.+6      	; 0x1d36 <_ZN19ExtensionController18identifyControllerEv+0x60>
    1d30:	9e 81       	ldd	r25, Y+6	; 0x06
    1d32:	91 30       	cpi	r25, 0x01	; 1
    1d34:	21 f1       	breq	.+72     	; 0x1d7e <_ZN19ExtensionController18identifyControllerEv+0xa8>
				return ExtensionType::ClassicController;
			}

			// Guitar Hero Controllers: 0x##00, 0xA420, 0x0103
			else if (idData[1] == 0x00
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	91 11       	cpse	r25, r1
    1d3a:	2a c0       	rjmp	.+84     	; 0x1d90 <_ZN19ExtensionController18identifyControllerEv+0xba>
				&& idData[4] == 0x01 && idData[5] == 0x03) {
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	41 f5       	brne	.+80     	; 0x1d90 <_ZN19ExtensionController18identifyControllerEv+0xba>
    1d40:	8e 81       	ldd	r24, Y+6	; 0x06
    1d42:	83 30       	cpi	r24, 0x03	; 3
    1d44:	29 f5       	brne	.+74     	; 0x1d90 <_ZN19ExtensionController18identifyControllerEv+0xba>

				// Guitar: 0x00
				if (idData[0] == 0x00) {
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	88 23       	and	r24, r24
    1d4a:	e1 f0       	breq	.+56     	; 0x1d84 <_ZN19ExtensionController18identifyControllerEv+0xae>
					return ExtensionType::GuitarController;
				}
				// Drums: 0x01
				else if (idData[0] == 0x01) {
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	e9 f0       	breq	.+58     	; 0x1d8a <_ZN19ExtensionController18identifyControllerEv+0xb4>
					return ExtensionType::DrumController;
				}
				// DJ Turntable: 0x03
				else if (idData[0] == 0x03) {
    1d50:	83 30       	cpi	r24, 0x03	; 3
    1d52:	f1 f4       	brne	.+60     	; 0x1d90 <_ZN19ExtensionController18identifyControllerEv+0xba>
					return ExtensionType::DJTurntableController;
    1d54:	87 e0       	ldi	r24, 0x07	; 7
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	f7 01       	movw	r30, r14
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	80 83       	st	Z, r24
}
    1d5e:	26 96       	adiw	r28, 0x06	; 6
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	1f 91       	pop	r17
    1d70:	0f 91       	pop	r16
    1d72:	ff 90       	pop	r15
    1d74:	ef 90       	pop	r14
    1d76:	08 95       	ret
    return ExtensionType::NoController; // Bad response from device
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	ed cf       	rjmp	.-38     	; 0x1d58 <_ZN19ExtensionController18identifyControllerEv+0x82>
				return ExtensionType::ClassicController;
    1d7e:	84 e0       	ldi	r24, 0x04	; 4
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	ea cf       	rjmp	.-44     	; 0x1d58 <_ZN19ExtensionController18identifyControllerEv+0x82>
					return ExtensionType::GuitarController;
    1d84:	85 e0       	ldi	r24, 0x05	; 5
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	e7 cf       	rjmp	.-50     	; 0x1d58 <_ZN19ExtensionController18identifyControllerEv+0x82>
					return ExtensionType::DrumController;
    1d8a:	86 e0       	ldi	r24, 0x06	; 6
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	e4 cf       	rjmp	.-56     	; 0x1d58 <_ZN19ExtensionController18identifyControllerEv+0x82>
				}
			}
		}

		return ExtensionType::UnknownController;  // No matches
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	e1 cf       	rjmp	.-62     	; 0x1d58 <_ZN19ExtensionController18identifyControllerEv+0x82>

00001d96 <_ZNK19ExtensionController19controllerIDMatchesEv>:

boolean ExtensionController::controllerIDMatches() const {
	if (data.connectedType == id) {
    1d96:	dc 01       	movw	r26, r24
    1d98:	12 96       	adiw	r26, 0x02	; 2
    1d9a:	ed 91       	ld	r30, X+
    1d9c:	fc 91       	ld	r31, X
    1d9e:	13 97       	sbiw	r26, 0x03	; 3
    1da0:	20 81       	ld	r18, Z
    1da2:	31 81       	ldd	r19, Z+1	; 0x01
    1da4:	8d 91       	ld	r24, X+
    1da6:	9c 91       	ld	r25, X
    1da8:	28 17       	cp	r18, r24
    1daa:	39 07       	cpc	r19, r25
    1dac:	39 f0       	breq	.+14     	; 0x1dbc <_ZNK19ExtensionController19controllerIDMatchesEv+0x26>
		return true;  // Match!
	}
	else if (id == ExtensionType::AnyController && data.connectedType != ExtensionType::NoController) {
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	19 f4       	brne	.+6      	; 0x1db8 <_ZNK19ExtensionController19controllerIDMatchesEv+0x22>
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	23 2b       	or	r18, r19
    1db6:	09 f4       	brne	.+2      	; 0x1dba <_ZNK19ExtensionController19controllerIDMatchesEv+0x24>
		return true;  // No enforcing and some sort of controller connected
	}

	return false;  // Enforced types or no controller connected
    1db8:	80 e0       	ldi	r24, 0x00	; 0
}
    1dba:	08 95       	ret
		return true;  // Match!
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	08 95       	ret

00001dc0 <_ZNK19ExtensionController17getControllerTypeEv>:

ExtensionType ExtensionController::getControllerType() const {
	return data.connectedType;
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	12 96       	adiw	r26, 0x02	; 2
    1dc4:	ed 91       	ld	r30, X+
    1dc6:	fc 91       	ld	r31, X
}
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	08 95       	ret

00001dce <_ZN19ExtensionController6updateEv>:

boolean ExtensionController::update() {
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	ec 01       	movw	r28, r24
	if (controllerIDMatches() && requestControlData(requestSize, data.controlData)) {
    1dd8:	de df       	rcall	.-68     	; 0x1d96 <_ZNK19ExtensionController19controllerIDMatchesEv>
    1dda:	88 23       	and	r24, r24
    1ddc:	c1 f0       	breq	.+48     	; 0x1e0e <_ZN19ExtensionController6updateEv+0x40>
  return I2Cdev::readBytes(I2C_Addr, 0x00, size, controlData);
    1dde:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_ZN6I2Cdev11readTimeoutE>
    1de2:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_ZN6I2Cdev11readTimeoutE+0x1>
    1de6:	2a 81       	ldd	r18, Y+2	; 0x02
    1de8:	3b 81       	ldd	r19, Y+3	; 0x03
    1dea:	2e 5f       	subi	r18, 0xFE	; 254
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	4c 81       	ldd	r20, Y+4	; 0x04
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	82 e5       	ldi	r24, 0x52	; 82
    1df4:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <_ZN6I2Cdev9readBytesEhhhPhj>
    1df8:	88 23       	and	r24, r24
    1dfa:	49 f0       	breq	.+18     	; 0x1e0e <_ZN19ExtensionController6updateEv+0x40>
		return verifyData(data.controlData, requestSize);
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1e00:	6c 81       	ldd	r22, Y+4	; 0x04
    1e02:	02 96       	adiw	r24, 0x02	; 2
	}
	
	return false;  // Something went wrong :(
}
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
		return verifyData(data.controlData, requestSize);
    1e0a:	0f 91       	pop	r16
    1e0c:	2c cf       	rjmp	.-424    	; 0x1c66 <_ZN21NintendoExtensionCtrl10verifyDataEPKhh>
}
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	08 95       	ret

00001e1a <_ZN19ExtensionController9reconnectEv>:
boolean ExtensionController::reconnect() {
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	ec 01       	movw	r28, r24
  I2Cdev::TWIWriteRegister(I2C_Addr, 0xF0, 0x55);
    1e20:	45 e5       	ldi	r20, 0x55	; 85
    1e22:	60 ef       	ldi	r22, 0xF0	; 240
    1e24:	82 e5       	ldi	r24, 0x52	; 82
    1e26:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN6I2Cdev16TWIWriteRegisterEhhh>
  I2Cdev::TWIWriteRegister(I2C_Addr, 0xFB, 0x00);
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	6b ef       	ldi	r22, 0xFB	; 251
    1e2e:	82 e5       	ldi	r24, 0x52	; 82
    1e30:	0e 94 35 1a 	call	0x346a	; 0x346a <_ZN6I2Cdev16TWIWriteRegisterEhhh>
		identifyController();
    1e34:	ce 01       	movw	r24, r28
    1e36:	4f df       	rcall	.-354    	; 0x1cd6 <_ZN19ExtensionController18identifyControllerEv>
		success = update();  // Seed with initial values
    1e38:	ce 01       	movw	r24, r28
}
    1e3a:	df 91       	pop	r29
		success = update();  // Seed with initial values
    1e3c:	cf 91       	pop	r28
    1e3e:	c7 cf       	rjmp	.-114    	; 0x1dce <_ZN19ExtensionController6updateEv>

00001e40 <_ZN19ExtensionController7connectEv>:
boolean ExtensionController::connect() {
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	ec 01       	movw	r28, r24
	disconnect();  // Clear current data
    1e46:	36 df       	rcall	.-404    	; 0x1cb4 <_ZN19ExtensionController10disconnectEv>
	return reconnect();
    1e48:	ce 01       	movw	r24, r28
}
    1e4a:	df 91       	pop	r29
	return reconnect();
    1e4c:	cf 91       	pop	r28
    1e4e:	e5 cf       	rjmp	.-54     	; 0x1e1a <_ZN19ExtensionController9reconnectEv>

00001e50 <_ZNK19ExtensionController14getControlDataEh>:

uint8_t ExtensionController::getControlData(uint8_t controlIndex) const {
	return data.controlData[controlIndex];
    1e50:	dc 01       	movw	r26, r24
    1e52:	12 96       	adiw	r26, 0x02	; 2
    1e54:	ed 91       	ld	r30, X+
    1e56:	fc 91       	ld	r31, X
    1e58:	e6 0f       	add	r30, r22
    1e5a:	f1 1d       	adc	r31, r1
}
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	08 95       	ret

00001e60 <_ZNK19ExtensionController16getExtensionDataEv>:
	data.controlData[index] = val;
}

ExtensionController::ExtensionData & ExtensionController::getExtensionData() const {
	return data;
}
    1e60:	fc 01       	movw	r30, r24
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	08 95       	ret

00001e68 <_Z17dmp_select_devicei>:
struct dmp_s *dmp;
static int deviceIndex = 0;

int dmp_select_device(int device)
{
  if ((device < 0) || (device >= MPU_MAX_DEVICES))
    1e68:	82 30       	cpi	r24, 0x02	; 2
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	78 f4       	brcc	.+30     	; 0x1e8c <_Z17dmp_select_devicei+0x24>
    return -1;

  deviceIndex = device;
  dmp = dmpArray + device;
    1e6e:	4b e0       	ldi	r20, 0x0B	; 11
    1e70:	48 9f       	mul	r20, r24
    1e72:	90 01       	movw	r18, r0
    1e74:	49 9f       	mul	r20, r25
    1e76:	30 0d       	add	r19, r0
    1e78:	11 24       	eor	r1, r1
    1e7a:	2a 54       	subi	r18, 0x4A	; 74
    1e7c:	3e 4f       	sbci	r19, 0xFE	; 254
    1e7e:	30 93 b5 01 	sts	0x01B5, r19	; 0x8001b5 <dmp+0x1>
    1e82:	20 93 b4 01 	sts	0x01B4, r18	; 0x8001b4 <dmp>
  return 0;
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	08 95       	ret
    return -1;
    1e8c:	8f ef       	ldi	r24, 0xFF	; 255
    1e8e:	9f ef       	ldi	r25, 0xFF	; 255
}
    1e90:	08 95       	ret

00001e92 <_Z19dmp_init_structuresv>:

void dmp_init_structures()
{
  dmp->tap_cb = NULL;
    1e92:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <dmp>
    1e96:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <dmp+0x1>
    1e9a:	11 82       	std	Z+1, r1	; 0x01
    1e9c:	10 82       	st	Z, r1
  dmp->android_orient_cb = NULL;
    1e9e:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <dmp>
    1ea2:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <dmp+0x1>
    1ea6:	13 82       	std	Z+3, r1	; 0x03
    1ea8:	12 82       	std	Z+2, r1	; 0x02
  dmp->orient = 0;
    1eaa:	15 82       	std	Z+5, r1	; 0x05
    1eac:	14 82       	std	Z+4, r1	; 0x04
  dmp->feature_mask = 0;
    1eae:	17 82       	std	Z+7, r1	; 0x07
    1eb0:	16 82       	std	Z+6, r1	; 0x06
  dmp->fifo_rate = 0;
    1eb2:	11 86       	std	Z+9, r1	; 0x09
    1eb4:	10 86       	std	Z+8, r1	; 0x08
  dmp->packet_length = 0;
    1eb6:	12 86       	std	Z+10, r1	; 0x0a
}
    1eb8:	08 95       	ret

00001eba <_Z31dmp_load_motion_driver_firmwarev>:
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
    1eba:	28 ec       	ldi	r18, 0xC8	; 200
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	54 e0       	ldi	r21, 0x04	; 4
    1ec2:	65 e6       	ldi	r22, 0x65	; 101
    1ec4:	72 e0       	ldi	r23, 0x02	; 2
    1ec6:	86 ef       	ldi	r24, 0xF6	; 246
    1ec8:	9b e0       	ldi	r25, 0x0B	; 11
    1eca:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <_Z17mpu_load_firmwaretPKhtt>

00001ece <_Z17dmp_set_fifo_ratet>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	64 97       	sbiw	r28, 0x14	; 20
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	8c 01       	movw	r16, r24
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
    1ee8:	8c e0       	ldi	r24, 0x0C	; 12
    1eea:	e5 e1       	ldi	r30, 0x15	; 21
    1eec:	f1 e0       	ldi	r31, 0x01	; 1
    1eee:	de 01       	movw	r26, r28
    1ef0:	11 96       	adiw	r26, 0x01	; 1
    1ef2:	01 90       	ld	r0, Z+
    1ef4:	0d 92       	st	X+, r0
    1ef6:	8a 95       	dec	r24
    1ef8:	e1 f7       	brne	.-8      	; 0x1ef2 <_Z17dmp_set_fifo_ratet+0x24>
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
    1efa:	09 3c       	cpi	r16, 0xC9	; 201
    1efc:	11 05       	cpc	r17, r1
    1efe:	68 f0       	brcs	.+26     	; 0x1f1a <_Z17dmp_set_fifo_ratet+0x4c>
        return -1;
    1f00:	8f ef       	ldi	r24, 0xFF	; 255
    1f02:	9f ef       	ldi	r25, 0xFF	; 255
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        return -1;

    dmp->fifo_rate = rate;
    return 0;
}
    1f04:	64 96       	adiw	r28, 0x14	; 20
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	08 95       	ret
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
    1f1a:	1d 86       	std	Y+13, r1	; 0x0d
    div = DMP_SAMPLE_RATE / rate - 1;
    1f1c:	88 ec       	ldi	r24, 0xC8	; 200
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	b8 01       	movw	r22, r16
    1f22:	0e 94 b7 23 	call	0x476e	; 0x476e <__udivmodhi4>
    1f26:	61 50       	subi	r22, 0x01	; 1
    1f28:	71 09       	sbc	r23, r1
    tmp[1] = (unsigned char)(div & 0xFF);
    1f2a:	6e 87       	std	Y+14, r22	; 0x0e
    if (mpu_write_mem(D_0_22, 2, tmp))
    1f2c:	ae 01       	movw	r20, r28
    1f2e:	43 5f       	subi	r20, 0xF3	; 243
    1f30:	5f 4f       	sbci	r21, 0xFF	; 255
    1f32:	62 e0       	ldi	r22, 0x02	; 2
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	86 e1       	ldi	r24, 0x16	; 22
    1f38:	92 e0       	ldi	r25, 0x02	; 2
    1f3a:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <_Z13mpu_write_memttPh>
    1f3e:	89 2b       	or	r24, r25
    1f40:	f9 f6       	brne	.-66     	; 0x1f00 <_Z17dmp_set_fifo_ratet+0x32>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
    1f42:	ae 01       	movw	r20, r28
    1f44:	4f 5f       	subi	r20, 0xFF	; 255
    1f46:	5f 4f       	sbci	r21, 0xFF	; 255
    1f48:	6c e0       	ldi	r22, 0x0C	; 12
    1f4a:	70 e0       	ldi	r23, 0x00	; 0
    1f4c:	81 ec       	ldi	r24, 0xC1	; 193
    1f4e:	9a e0       	ldi	r25, 0x0A	; 10
    1f50:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <_Z13mpu_write_memttPh>
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	a1 f6       	brne	.-88     	; 0x1f00 <_Z17dmp_set_fifo_ratet+0x32>
    dmp->fifo_rate = rate;
    1f58:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <dmp>
    1f5c:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <dmp+0x1>
    1f60:	11 87       	std	Z+9, r17	; 0x09
    1f62:	00 87       	std	Z+8, r16	; 0x08
    return 0;
    1f64:	cf cf       	rjmp	.-98     	; 0x1f04 <_Z17dmp_set_fifo_ratet+0x36>

00001f66 <_Z19dmp_enable_gyro_calh>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	29 97       	sbiw	r28, 0x09	; 9
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    if (enable) {
    1f7a:	88 23       	and	r24, r24
    1f7c:	d1 f0       	breq	.+52     	; 0x1fb2 <_Z19dmp_enable_gyro_calh+0x4c>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
    1f7e:	89 e0       	ldi	r24, 0x09	; 9
    1f80:	e1 e2       	ldi	r30, 0x21	; 33
    1f82:	f1 e0       	ldi	r31, 0x01	; 1
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
    1f84:	de 01       	movw	r26, r28
    1f86:	11 96       	adiw	r26, 0x01	; 1
    1f88:	01 90       	ld	r0, Z+
    1f8a:	0d 92       	st	X+, r0
    1f8c:	8a 95       	dec	r24
    1f8e:	e1 f7       	brne	.-8      	; 0x1f88 <_Z19dmp_enable_gyro_calh+0x22>
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    1f90:	ae 01       	movw	r20, r28
    1f92:	4f 5f       	subi	r20, 0xFF	; 255
    1f94:	5f 4f       	sbci	r21, 0xFF	; 255
    1f96:	69 e0       	ldi	r22, 0x09	; 9
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	88 eb       	ldi	r24, 0xB8	; 184
    1f9c:	94 e0       	ldi	r25, 0x04	; 4
    1f9e:	e5 d7       	rcall	.+4042   	; 0x2f6a <_Z13mpu_write_memttPh>
    }
}
    1fa0:	29 96       	adiw	r28, 0x09	; 9
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	08 95       	ret
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
    1fb2:	89 e0       	ldi	r24, 0x09	; 9
    1fb4:	ea e2       	ldi	r30, 0x2A	; 42
    1fb6:	f1 e0       	ldi	r31, 0x01	; 1
    1fb8:	e5 cf       	rjmp	.-54     	; 0x1f84 <_Z19dmp_enable_gyro_calh+0x1e>

00001fba <_Z18dmp_enable_lp_quath>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <_Z18dmp_enable_lp_quath+0x6>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <_Z18dmp_enable_lp_quath+0x8>
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    unsigned char regs[4];
    if (enable) {
    1fc6:	88 23       	and	r24, r24
    1fc8:	c1 f0       	breq	.+48     	; 0x1ffa <_Z18dmp_enable_lp_quath+0x40>
        regs[0] = DINBC0;
    1fca:	80 ec       	ldi	r24, 0xC0	; 192
    1fcc:	89 83       	std	Y+1, r24	; 0x01
        regs[1] = DINBC2;
    1fce:	82 ec       	ldi	r24, 0xC2	; 194
    1fd0:	8a 83       	std	Y+2, r24	; 0x02
        regs[2] = DINBC4;
    1fd2:	84 ec       	ldi	r24, 0xC4	; 196
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
        regs[3] = DINBC6;
    1fd6:	86 ec       	ldi	r24, 0xC6	; 198
    1fd8:	8c 83       	std	Y+4, r24	; 0x04
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
    1fda:	ae 01       	movw	r20, r28
    1fdc:	4f 5f       	subi	r20, 0xFF	; 255
    1fde:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe0:	64 e0       	ldi	r22, 0x04	; 4
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	88 e9       	ldi	r24, 0x98	; 152
    1fe6:	9a e0       	ldi	r25, 0x0A	; 10
    1fe8:	c0 d7       	rcall	.+3968   	; 0x2f6a <_Z13mpu_write_memttPh>

    return mpu_reset_fifo();
    1fea:	50 d2       	rcall	.+1184   	; 0x248c <_Z14mpu_reset_fifov>
    1fec:	0f 90       	pop	r0
}
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	08 95       	ret
    1ffa:	44 e0       	ldi	r20, 0x04	; 4
        memset(regs, 0x8B, 4);
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	6b e8       	ldi	r22, 0x8B	; 139
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	ce 01       	movw	r24, r28
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <memset>
    200a:	e7 cf       	rjmp	.-50     	; 0x1fda <_Z18dmp_enable_lp_quath+0x20>

0000200c <_Z21dmp_enable_6x_lp_quath>:
    200c:	cf 93       	push	r28
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
    200e:	df 93       	push	r29
    2010:	00 d0       	rcall	.+0      	; 0x2012 <_Z21dmp_enable_6x_lp_quath+0x6>
    2012:	00 d0       	rcall	.+0      	; 0x2014 <_Z21dmp_enable_6x_lp_quath+0x8>
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    unsigned char regs[4];
    if (enable) {
    2018:	88 23       	and	r24, r24
    201a:	c1 f0       	breq	.+48     	; 0x204c <_Z21dmp_enable_6x_lp_quath+0x40>
        regs[0] = DINA20;
    201c:	80 e2       	ldi	r24, 0x20	; 32
    201e:	89 83       	std	Y+1, r24	; 0x01
        regs[1] = DINA28;
    2020:	88 e2       	ldi	r24, 0x28	; 40
    2022:	8a 83       	std	Y+2, r24	; 0x02
        regs[2] = DINA30;
    2024:	80 e3       	ldi	r24, 0x30	; 48
    2026:	8b 83       	std	Y+3, r24	; 0x03
        regs[3] = DINA38;
    2028:	88 e3       	ldi	r24, 0x38	; 56
    202a:	8c 83       	std	Y+4, r24	; 0x04
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
    202c:	ae 01       	movw	r20, r28
    202e:	4f 5f       	subi	r20, 0xFF	; 255
    2030:	5f 4f       	sbci	r21, 0xFF	; 255
    2032:	64 e0       	ldi	r22, 0x04	; 4
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	8e e9       	ldi	r24, 0x9E	; 158
    2038:	9a e0       	ldi	r25, 0x0A	; 10
    203a:	97 d7       	rcall	.+3886   	; 0x2f6a <_Z13mpu_write_memttPh>

    return mpu_reset_fifo();
    203c:	27 d2       	rcall	.+1102   	; 0x248c <_Z14mpu_reset_fifov>
    203e:	0f 90       	pop	r0
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	08 95       	ret
    204c:	44 e0       	ldi	r20, 0x04	; 4
        memset(regs, 0xA3, 4);
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	63 ea       	ldi	r22, 0xA3	; 163
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	ce 01       	movw	r24, r28
    2056:	01 96       	adiw	r24, 0x01	; 1
    2058:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <memset>
    205c:	e7 cf       	rjmp	.-50     	; 0x202c <_Z21dmp_enable_6x_lp_quath+0x20>

0000205e <_Z18dmp_enable_featuret>:
    205e:	af 92       	push	r10
{
    2060:	bf 92       	push	r11
    2062:	cf 92       	push	r12
    2064:	df 92       	push	r13
    2066:	ef 92       	push	r14
    2068:	ff 92       	push	r15
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	2a 97       	sbiw	r28, 0x0a	; 10
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	8c 01       	movw	r16, r24
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	89 83       	std	Y+1, r24	; 0x01
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    2088:	8a ec       	ldi	r24, 0xCA	; 202
    208a:	8a 83       	std	Y+2, r24	; 0x02
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    208c:	83 ee       	ldi	r24, 0xE3	; 227
    208e:	8b 83       	std	Y+3, r24	; 0x03
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    2090:	89 e0       	ldi	r24, 0x09	; 9
    2092:	8c 83       	std	Y+4, r24	; 0x04
    mpu_write_mem(D_0_104, 4, tmp);
    2094:	ae 01       	movw	r20, r28
    2096:	4f 5f       	subi	r20, 0xFF	; 255
    2098:	5f 4f       	sbci	r21, 0xFF	; 255
    209a:	64 e0       	ldi	r22, 0x04	; 4
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	88 e6       	ldi	r24, 0x68	; 104
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	63 d7       	rcall	.+3782   	; 0x2f6a <_Z13mpu_write_memttPh>
    tmp[0] = 0xA3;
    20a4:	83 ea       	ldi	r24, 0xA3	; 163
    20a6:	89 83       	std	Y+1, r24	; 0x01
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
    20a8:	68 01       	movw	r12, r16
    20aa:	90 e4       	ldi	r25, 0x40	; 64
    20ac:	c9 22       	and	r12, r25
    20ae:	dd 24       	eor	r13, r13
    20b0:	06 ff       	sbrs	r16, 6
    20b2:	88 c0       	rjmp	.+272    	; 0x21c4 <_Z18dmp_enable_featuret+0x166>
        tmp[1] = 0xC0;
    20b4:	80 ec       	ldi	r24, 0xC0	; 192
    20b6:	8a 83       	std	Y+2, r24	; 0x02
        tmp[2] = 0xC8;
    20b8:	88 ec       	ldi	r24, 0xC8	; 200
    20ba:	8b 83       	std	Y+3, r24	; 0x03
        tmp[3] = 0xC2;
    20bc:	82 ec       	ldi	r24, 0xC2	; 194
        tmp[3] = 0xA3;
    20be:	8c 83       	std	Y+4, r24	; 0x04
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
    20c0:	58 01       	movw	r10, r16
    20c2:	80 e8       	ldi	r24, 0x80	; 128
    20c4:	a8 22       	and	r10, r24
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	b8 22       	and	r11, r24
    20ca:	a1 14       	cp	r10, r1
    20cc:	b1 04       	cpc	r11, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <_Z18dmp_enable_featuret+0x74>
    20d0:	7c c0       	rjmp	.+248    	; 0x21ca <_Z18dmp_enable_featuret+0x16c>
        tmp[4] = 0xC4;
    20d2:	84 ec       	ldi	r24, 0xC4	; 196
    20d4:	8d 83       	std	Y+5, r24	; 0x05
        tmp[5] = 0xCC;
    20d6:	8c ec       	ldi	r24, 0xCC	; 204
    20d8:	8e 83       	std	Y+6, r24	; 0x06
        tmp[6] = 0xC6;
    20da:	86 ec       	ldi	r24, 0xC6	; 198
        tmp[6] = 0xA3;
    20dc:	8f 83       	std	Y+7, r24	; 0x07
    tmp[7] = 0xA3;
    20de:	83 ea       	ldi	r24, 0xA3	; 163
    20e0:	88 87       	std	Y+8, r24	; 0x08
    tmp[8] = 0xA3;
    20e2:	89 87       	std	Y+9, r24	; 0x09
    tmp[9] = 0xA3;
    20e4:	8a 87       	std	Y+10, r24	; 0x0a
    mpu_write_mem(CFG_15,10,tmp);
    20e6:	ae 01       	movw	r20, r28
    20e8:	4f 5f       	subi	r20, 0xFF	; 255
    20ea:	5f 4f       	sbci	r21, 0xFF	; 255
    20ec:	6a e0       	ldi	r22, 0x0A	; 10
    20ee:	70 e0       	ldi	r23, 0x00	; 0
    20f0:	87 ea       	ldi	r24, 0xA7	; 167
    20f2:	9a e0       	ldi	r25, 0x0A	; 10
    20f4:	3a d7       	rcall	.+3700   	; 0x2f6a <_Z13mpu_write_memttPh>
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
    20f6:	78 01       	movw	r14, r16
    20f8:	93 e0       	ldi	r25, 0x03	; 3
    20fa:	e9 22       	and	r14, r25
    20fc:	ff 24       	eor	r15, r15
        tmp[0] = DINA20;
    20fe:	80 e2       	ldi	r24, 0x20	; 32
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
    2100:	e1 14       	cp	r14, r1
    2102:	f1 04       	cpc	r15, r1
    2104:	09 f4       	brne	.+2      	; 0x2108 <_Z18dmp_enable_featuret+0xaa>
        tmp[0] = 0xD8;
    2106:	88 ed       	ldi	r24, 0xD8	; 216
    2108:	89 83       	std	Y+1, r24	; 0x01
    mpu_write_mem(CFG_27,1,tmp);
    210a:	ae 01       	movw	r20, r28
    210c:	4f 5f       	subi	r20, 0xFF	; 255
    210e:	5f 4f       	sbci	r21, 0xFF	; 255
    2110:	61 e0       	ldi	r22, 0x01	; 1
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	86 eb       	ldi	r24, 0xB6	; 182
    2116:	9a e0       	ldi	r25, 0x0A	; 10
    2118:	28 d7       	rcall	.+3664   	; 0x2f6a <_Z13mpu_write_memttPh>
    if (mask & DMP_FEATURE_GYRO_CAL)
    211a:	81 e0       	ldi	r24, 0x01	; 1
        dmp_enable_gyro_cal(0);
    211c:	05 ff       	sbrs	r16, 5
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	22 df       	rcall	.-444    	; 0x1f66 <_Z19dmp_enable_gyro_calh>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
    2122:	a1 14       	cp	r10, r1
    2124:	b1 04       	cpc	r11, r1
    2126:	91 f0       	breq	.+36     	; 0x214c <_Z18dmp_enable_featuret+0xee>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
    2128:	10 ff       	sbrs	r17, 0
    212a:	53 c0       	rjmp	.+166    	; 0x21d2 <_Z18dmp_enable_featuret+0x174>
            tmp[0] = 0xB2;
    212c:	82 eb       	ldi	r24, 0xB2	; 178
    212e:	89 83       	std	Y+1, r24	; 0x01
            tmp[1] = 0x8B;
    2130:	8b e8       	ldi	r24, 0x8B	; 139
    2132:	8a 83       	std	Y+2, r24	; 0x02
            tmp[2] = 0xB6;
    2134:	86 eb       	ldi	r24, 0xB6	; 182
    2136:	8b 83       	std	Y+3, r24	; 0x03
            tmp[3] = 0x9B;
    2138:	8b e9       	ldi	r24, 0x9B	; 155
            tmp[3] = DINA90;
    213a:	8c 83       	std	Y+4, r24	; 0x04
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
    213c:	ae 01       	movw	r20, r28
    213e:	4f 5f       	subi	r20, 0xFF	; 255
    2140:	5f 4f       	sbci	r21, 0xFF	; 255
    2142:	64 e0       	ldi	r22, 0x04	; 4
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	82 ea       	ldi	r24, 0xA2	; 162
    2148:	9a e0       	ldi	r25, 0x0A	; 10
        dmp_enable_lp_quat(1);
    214a:	0f d7       	rcall	.+3614   	; 0x2f6a <_Z13mpu_write_memttPh>
    if (mask & DMP_FEATURE_LP_QUAT)
    214c:	81 e0       	ldi	r24, 0x01	; 1
        dmp_enable_lp_quat(0);
    214e:	02 ff       	sbrs	r16, 2
    2150:	80 e0       	ldi	r24, 0x00	; 0
        dmp_enable_6x_lp_quat(1);
    2152:	33 df       	rcall	.-410    	; 0x1fba <_Z18dmp_enable_lp_quath>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
    2154:	81 e0       	ldi	r24, 0x01	; 1
        dmp_enable_6x_lp_quat(0);
    2156:	04 ff       	sbrs	r16, 4
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	58 df       	rcall	.-336    	; 0x200c <_Z21dmp_enable_6x_lp_quath>
    dmp->feature_mask = mask | DMP_FEATURE_PEDOMETER;
    215c:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <dmp>
    2160:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <dmp+0x1>
    2164:	c8 01       	movw	r24, r16
    2166:	88 60       	ori	r24, 0x08	; 8
    2168:	97 83       	std	Z+7, r25	; 0x07
    mpu_reset_fifo();
    216a:	86 83       	std	Z+6, r24	; 0x06
    216c:	8f d1       	rcall	.+798    	; 0x248c <_Z14mpu_reset_fifov>
    dmp->packet_length = 0;
    216e:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <dmp>
    2172:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <dmp+0x1>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
    2176:	cd 28       	or	r12, r13
    2178:	a1 f5       	brne	.+104    	; 0x21e2 <_Z18dmp_enable_featuret+0x184>
    dmp->packet_length = 0;
    217a:	12 86       	std	Z+10, r1	; 0x0a
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
    217c:	ab 28       	or	r10, r11
    217e:	19 f0       	breq	.+6      	; 0x2186 <_Z18dmp_enable_featuret+0x128>
        dmp->packet_length += 6;
    2180:	82 85       	ldd	r24, Z+10	; 0x0a
    2182:	8a 5f       	subi	r24, 0xFA	; 250
    2184:	82 87       	std	Z+10, r24	; 0x0a
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
    2186:	04 71       	andi	r16, 0x14	; 20
    2188:	11 27       	eor	r17, r17
    218a:	01 2b       	or	r16, r17
    218c:	19 f0       	breq	.+6      	; 0x2194 <_Z18dmp_enable_featuret+0x136>
        dmp->packet_length += 16;
    218e:	82 85       	ldd	r24, Z+10	; 0x0a
    2190:	80 5f       	subi	r24, 0xF0	; 240
    2192:	82 87       	std	Z+10, r24	; 0x0a
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
    2194:	ef 28       	or	r14, r15
    2196:	19 f0       	breq	.+6      	; 0x219e <_Z18dmp_enable_featuret+0x140>
        dmp->packet_length += 4;
    2198:	82 85       	ldd	r24, Z+10	; 0x0a
    219a:	8c 5f       	subi	r24, 0xFC	; 252
    219c:	82 87       	std	Z+10, r24	; 0x0a
}
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	2a 96       	adiw	r28, 0x0a	; 10
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	df 90       	pop	r13
    21bc:	cf 90       	pop	r12
    21be:	bf 90       	pop	r11
    21c0:	af 90       	pop	r10
    21c2:	08 95       	ret
        tmp[1] = 0xA3;
    21c4:	8a 83       	std	Y+2, r24	; 0x02
        tmp[2] = 0xA3;
    21c6:	8b 83       	std	Y+3, r24	; 0x03
    21c8:	7a cf       	rjmp	.-268    	; 0x20be <_Z18dmp_enable_featuret+0x60>
        tmp[4] = 0xA3;
    21ca:	83 ea       	ldi	r24, 0xA3	; 163
    21cc:	8d 83       	std	Y+5, r24	; 0x05
        tmp[5] = 0xA3;
    21ce:	8e 83       	std	Y+6, r24	; 0x06
    21d0:	85 cf       	rjmp	.-246    	; 0x20dc <_Z18dmp_enable_featuret+0x7e>
            tmp[0] = DINAC0;
    21d2:	80 eb       	ldi	r24, 0xB0	; 176
    21d4:	89 83       	std	Y+1, r24	; 0x01
            tmp[1] = DINA80;
    21d6:	80 e8       	ldi	r24, 0x80	; 128
    21d8:	8a 83       	std	Y+2, r24	; 0x02
            tmp[2] = DINAC2;
    21da:	84 eb       	ldi	r24, 0xB4	; 180
    21dc:	8b 83       	std	Y+3, r24	; 0x03
            tmp[3] = DINA90;
    21de:	80 e9       	ldi	r24, 0x90	; 144
    21e0:	ac cf       	rjmp	.-168    	; 0x213a <_Z18dmp_enable_featuret+0xdc>
        dmp->packet_length += 6;
    21e2:	86 e0       	ldi	r24, 0x06	; 6
    21e4:	82 87       	std	Z+10, r24	; 0x0a
    21e6:	ca cf       	rjmp	.-108    	; 0x217c <_Z18dmp_enable_featuret+0x11e>

000021e8 <_ZL14set_int_enableh>:
 *  If the DMP is on, the DMP interrupt is enabled. Otherwise, the data ready
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable) {
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	0f 92       	push	r0
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
  unsigned char tmp;

  if (st->chip_cfg.dmp_on) {
    21f2:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    21f6:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    21fa:	95 8d       	ldd	r25, Z+29	; 0x1d
    21fc:	99 23       	and	r25, r25
    21fe:	e1 f0       	breq	.+56     	; 0x2238 <_ZL14set_int_enableh+0x50>
    if (enable)
    2200:	88 23       	and	r24, r24
    2202:	19 f0       	breq	.+6      	; 0x220a <_ZL14set_int_enableh+0x22>
      tmp = BIT_DMP_INT_EN;
    2204:	82 e0       	ldi	r24, 0x02	; 2
    if (!st->chip_cfg.sensors)
      return -1;
    if (enable && st->chip_cfg.int_enable)
      return 0;
    if (enable)
      tmp = BIT_DATA_RDY_EN;
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	01 c0       	rjmp	.+2      	; 0x220c <_ZL14set_int_enableh+0x24>
      tmp = 0x00;
    220a:	19 82       	std	Y+1, r1	; 0x01
    if (i2c_write(st->hw->addr, st->reg->int_enable, 1, &tmp))
    220c:	a0 81       	ld	r26, Z
    220e:	b1 81       	ldd	r27, Z+1	; 0x01
    2210:	02 80       	ldd	r0, Z+2	; 0x02
    2212:	f3 81       	ldd	r31, Z+3	; 0x03
    2214:	e0 2d       	mov	r30, r0
    2216:	9e 01       	movw	r18, r28
    2218:	2f 5f       	subi	r18, 0xFF	; 255
    221a:	3f 4f       	sbci	r19, 0xFF	; 255
    221c:	41 e0       	ldi	r20, 0x01	; 1
    221e:	51 96       	adiw	r26, 0x11	; 17
    2220:	6c 91       	ld	r22, X
    2222:	80 81       	ld	r24, Z
    2224:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2228:	81 11       	cpse	r24, r1
    222a:	10 c0       	rjmp	.+32     	; 0x224c <_ZL14set_int_enableh+0x64>
      return -1;
    222c:	8f ef       	ldi	r24, 0xFF	; 255
    222e:	9f ef       	ldi	r25, 0xFF	; 255
    if (i2c_write(st->hw->addr, st->reg->int_enable, 1, &tmp))
      return -1;
    st->chip_cfg.int_enable = tmp;
  }
  return 0;
}
    2230:	0f 90       	pop	r0
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	08 95       	ret
    if (!st->chip_cfg.sensors)
    2238:	96 81       	ldd	r25, Z+6	; 0x06
    223a:	99 23       	and	r25, r25
    223c:	b9 f3       	breq	.-18     	; 0x222c <_ZL14set_int_enableh+0x44>
    if (enable && st->chip_cfg.int_enable)
    223e:	88 23       	and	r24, r24
    2240:	21 f3       	breq	.-56     	; 0x220a <_ZL14set_int_enableh+0x22>
    2242:	84 85       	ldd	r24, Z+12	; 0x0c
    2244:	81 11       	cpse	r24, r1
    2246:	08 c0       	rjmp	.+16     	; 0x2258 <_ZL14set_int_enableh+0x70>
      tmp = BIT_DATA_RDY_EN;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	dd cf       	rjmp	.-70     	; 0x2206 <_ZL14set_int_enableh+0x1e>
    st->chip_cfg.int_enable = tmp;
    224c:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2250:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	84 87       	std	Z+12, r24	; 0x0c
      return 0;
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	e9 cf       	rjmp	.-46     	; 0x2230 <_ZL14set_int_enableh+0x48>

0000225e <_Z17mpu_select_devicei>:
  if ((device < 0) || (device >= MPU_MAX_DEVICES))
    225e:	82 30       	cpi	r24, 0x02	; 2
    2260:	91 05       	cpc	r25, r1
    2262:	b8 f5       	brcc	.+110    	; 0x22d2 <_Z17mpu_select_devicei+0x74>
  deviceIndex = device;
    2264:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <_ZL11deviceIndex+0x1>
    2268:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <_ZL11deviceIndex>
  reg = regArray + device;
    226c:	4e e1       	ldi	r20, 0x1E	; 30
    226e:	48 9f       	mul	r20, r24
    2270:	90 01       	movw	r18, r0
    2272:	49 9f       	mul	r20, r25
    2274:	30 0d       	add	r19, r0
    2276:	11 24       	eor	r1, r1
    2278:	24 58       	subi	r18, 0x84	; 132
    227a:	3d 4f       	sbci	r19, 0xFD	; 253
    227c:	30 93 d3 01 	sts	0x01D3, r19	; 0x8001d3 <reg+0x1>
    2280:	20 93 d2 01 	sts	0x01D2, r18	; 0x8001d2 <reg>
  hw = hwArray + device;
    2284:	4a e0       	ldi	r20, 0x0A	; 10
    2286:	48 9f       	mul	r20, r24
    2288:	90 01       	movw	r18, r0
    228a:	49 9f       	mul	r20, r25
    228c:	30 0d       	add	r19, r0
    228e:	11 24       	eor	r1, r1
    2290:	28 59       	subi	r18, 0x98	; 152
    2292:	3d 4f       	sbci	r19, 0xFD	; 253
    2294:	30 93 d1 01 	sts	0x01D1, r19	; 0x8001d1 <hw+0x1>
    2298:	20 93 d0 01 	sts	0x01D0, r18	; 0x8001d0 <hw>
  test = testArray + device;
    229c:	47 e2       	ldi	r20, 0x27	; 39
    229e:	48 9f       	mul	r20, r24
    22a0:	90 01       	movw	r18, r0
    22a2:	49 9f       	mul	r20, r25
    22a4:	30 0d       	add	r19, r0
    22a6:	11 24       	eor	r1, r1
    22a8:	26 5e       	subi	r18, 0xE6	; 230
    22aa:	3d 4f       	sbci	r19, 0xFD	; 253
    22ac:	30 93 cf 01 	sts	0x01CF, r19	; 0x8001cf <test+0x1>
    22b0:	20 93 ce 01 	sts	0x01CE, r18	; 0x8001ce <test>
  st = gyroArray + device;
    22b4:	43 e2       	ldi	r20, 0x23	; 35
    22b6:	48 9f       	mul	r20, r24
    22b8:	90 01       	movw	r18, r0
    22ba:	49 9f       	mul	r20, r25
    22bc:	30 0d       	add	r19, r0
    22be:	11 24       	eor	r1, r1
    22c0:	2c 52       	subi	r18, 0x2C	; 44
    22c2:	3e 4f       	sbci	r19, 0xFE	; 254
    22c4:	30 93 cd 01 	sts	0x01CD, r19	; 0x8001cd <st+0x1>
    22c8:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <st>
  return 0;
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	08 95       	ret
    return -1;
    22d2:	8f ef       	ldi	r24, 0xFF	; 255
    22d4:	9f ef       	ldi	r25, 0xFF	; 255
}
    22d6:	08 95       	ret

000022d8 <_Z19mpu_init_structuresv>:
  reg->who_am_i = 0x75;
    22d8:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <reg>
    22dc:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <reg+0x1>
    22e0:	85 e7       	ldi	r24, 0x75	; 117
    22e2:	80 83       	st	Z, r24
  reg->rate_div = 0x19;
    22e4:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <reg>
    22e8:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <reg+0x1>
    22ec:	89 e1       	ldi	r24, 0x19	; 25
    22ee:	81 83       	std	Z+1, r24	; 0x01
  reg->lpf = 0x1A;
    22f0:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <reg>
    22f4:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <reg+0x1>
    22f8:	8a e1       	ldi	r24, 0x1A	; 26
    22fa:	82 83       	std	Z+2, r24	; 0x02
  reg->prod_id = 0x0C;
    22fc:	8c e0       	ldi	r24, 0x0C	; 12
    22fe:	83 83       	std	Z+3, r24	; 0x03
  reg->user_ctrl = 0x6A;
    2300:	8a e6       	ldi	r24, 0x6A	; 106
    2302:	84 83       	std	Z+4, r24	; 0x04
  reg->fifo_en = 0x23;
    2304:	83 e2       	ldi	r24, 0x23	; 35
    2306:	85 83       	std	Z+5, r24	; 0x05
  reg->gyro_cfg = 0x1B;
    2308:	8b e1       	ldi	r24, 0x1B	; 27
    230a:	86 83       	std	Z+6, r24	; 0x06
  reg->accel_cfg = 0x1C;
    230c:	8c e1       	ldi	r24, 0x1C	; 28
    230e:	87 83       	std	Z+7, r24	; 0x07
  reg->motion_thr = 0x1F;
    2310:	8f e1       	ldi	r24, 0x1F	; 31
    2312:	82 87       	std	Z+10, r24	; 0x0a
  reg->motion_dur = 0x20;
    2314:	80 e2       	ldi	r24, 0x20	; 32
    2316:	83 87       	std	Z+11, r24	; 0x0b
  reg->fifo_count_h = 0x72;
    2318:	82 e7       	ldi	r24, 0x72	; 114
    231a:	84 87       	std	Z+12, r24	; 0x0c
  reg->fifo_r_w = 0x74;
    231c:	84 e7       	ldi	r24, 0x74	; 116
    231e:	85 87       	std	Z+13, r24	; 0x0d
  reg->raw_gyro = 0x43;
    2320:	83 e4       	ldi	r24, 0x43	; 67
    2322:	86 87       	std	Z+14, r24	; 0x0e
  reg->raw_accel = 0x3B;
    2324:	8b e3       	ldi	r24, 0x3B	; 59
    2326:	87 87       	std	Z+15, r24	; 0x0f
  reg->temp = 0x41;
    2328:	81 e4       	ldi	r24, 0x41	; 65
    232a:	80 8b       	std	Z+16, r24	; 0x10
  reg->int_enable = 0x38;
    232c:	88 e3       	ldi	r24, 0x38	; 56
    232e:	81 8b       	std	Z+17, r24	; 0x11
  reg->dmp_int_status = 0x39;
    2330:	89 e3       	ldi	r24, 0x39	; 57
    2332:	82 8b       	std	Z+18, r24	; 0x12
  reg->int_status = 0x3A;
    2334:	8a e3       	ldi	r24, 0x3A	; 58
    2336:	83 8b       	std	Z+19, r24	; 0x13
  reg->pwr_mgmt_1 = 0x6B;
    2338:	8b e6       	ldi	r24, 0x6B	; 107
    233a:	85 8b       	std	Z+21, r24	; 0x15
  reg->pwr_mgmt_2 = 0x6C;
    233c:	8c e6       	ldi	r24, 0x6C	; 108
    233e:	86 8b       	std	Z+22, r24	; 0x16
  reg->int_pin_cfg = 0x37;
    2340:	87 e3       	ldi	r24, 0x37	; 55
    2342:	87 8b       	std	Z+23, r24	; 0x17
  reg->mem_r_w = 0x6F;
    2344:	8f e6       	ldi	r24, 0x6F	; 111
    2346:	80 8f       	std	Z+24, r24	; 0x18
  reg->accel_offs = 0x06;
    2348:	86 e0       	ldi	r24, 0x06	; 6
    234a:	81 8f       	std	Z+25, r24	; 0x19
  reg->i2c_mst = 0x24;
    234c:	84 e2       	ldi	r24, 0x24	; 36
    234e:	82 8f       	std	Z+26, r24	; 0x1a
  reg->bank_sel = 0x6D;
    2350:	8d e6       	ldi	r24, 0x6D	; 109
    2352:	83 8f       	std	Z+27, r24	; 0x1b
  reg->mem_start_addr = 0x6E;
    2354:	8e e6       	ldi	r24, 0x6E	; 110
    2356:	84 8f       	std	Z+28, r24	; 0x1c
  reg->prgm_start_h = 0x70;
    2358:	80 e7       	ldi	r24, 0x70	; 112
    235a:	85 8f       	std	Z+29, r24	; 0x1d
  switch (deviceIndex) {
    235c:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <_ZL11deviceIndex>
    2360:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <_ZL11deviceIndex+0x1>
    2364:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <hw>
    2368:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <hw+0x1>
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	09 f4       	brne	.+2      	; 0x2372 <_Z19mpu_init_structuresv+0x9a>
    2370:	88 c0       	rjmp	.+272    	; 0x2482 <_Z19mpu_init_structuresv+0x1aa>
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	09 f4       	brne	.+2      	; 0x2378 <_Z19mpu_init_structuresv+0xa0>
    2376:	88 c0       	rjmp	.+272    	; 0x2488 <_Z19mpu_init_structuresv+0x1b0>
  hw->max_fifo = 1024;
    2378:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <hw>
    237c:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <hw+0x1>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	94 e0       	ldi	r25, 0x04	; 4
    2384:	92 83       	std	Z+2, r25	; 0x02
    2386:	81 83       	std	Z+1, r24	; 0x01
  hw->num_reg = 118;
    2388:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <hw>
    238c:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <hw+0x1>
    2390:	86 e7       	ldi	r24, 0x76	; 118
    2392:	83 83       	std	Z+3, r24	; 0x03
  hw->temp_sens = 340;
    2394:	84 e5       	ldi	r24, 0x54	; 84
    2396:	91 e0       	ldi	r25, 0x01	; 1
    2398:	95 83       	std	Z+5, r25	; 0x05
    239a:	84 83       	std	Z+4, r24	; 0x04
  hw->temp_offset = -521;
    239c:	87 ef       	ldi	r24, 0xF7	; 247
    239e:	9d ef       	ldi	r25, 0xFD	; 253
    23a0:	97 83       	std	Z+7, r25	; 0x07
    23a2:	86 83       	std	Z+6, r24	; 0x06
  hw->bank_size = 256;
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	91 87       	std	Z+9, r25	; 0x09
    23aa:	80 87       	std	Z+8, r24	; 0x08
  test->gyro_sens = 32768 / 250;
    23ac:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <test>
    23b0:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <test+0x1>
    23b4:	83 e8       	ldi	r24, 0x83	; 131
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a0 e0       	ldi	r26, 0x00	; 0
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	80 83       	st	Z, r24
    23be:	91 83       	std	Z+1, r25	; 0x01
    23c0:	a2 83       	std	Z+2, r26	; 0x02
    23c2:	b3 83       	std	Z+3, r27	; 0x03
  test->accel_sens = 32768 / 16;
    23c4:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <test>
    23c8:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <test+0x1>
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	98 e0       	ldi	r25, 0x08	; 8
    23d0:	a0 e0       	ldi	r26, 0x00	; 0
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	84 83       	std	Z+4, r24	; 0x04
    23d6:	95 83       	std	Z+5, r25	; 0x05
    23d8:	a6 83       	std	Z+6, r26	; 0x06
    23da:	b7 83       	std	Z+7, r27	; 0x07
  test->reg_rate_div = 0;     /* 1kHz. */
    23dc:	10 86       	std	Z+8, r1	; 0x08
  test->reg_lpf = 1;          /* 188Hz. */
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	81 87       	std	Z+9, r24	; 0x09
  test->reg_gyro_fsr = 0;     /* 250dps. */
    23e2:	12 86       	std	Z+10, r1	; 0x0a
  test->reg_accel_fsr = 0x18; /* 16g. */
    23e4:	88 e1       	ldi	r24, 0x18	; 24
    23e6:	83 87       	std	Z+11, r24	; 0x0b
  test->wait_ms = 50;
    23e8:	82 e3       	ldi	r24, 0x32	; 50
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	95 87       	std	Z+13, r25	; 0x0d
    23ee:	84 87       	std	Z+12, r24	; 0x0c
  test->packet_thresh = 5; /* 5% */
    23f0:	85 e0       	ldi	r24, 0x05	; 5
    23f2:	86 87       	std	Z+14, r24	; 0x0e
  test->min_dps = 10.f;
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a0 e2       	ldi	r26, 0x20	; 32
    23fa:	b1 e4       	ldi	r27, 0x41	; 65
    23fc:	87 87       	std	Z+15, r24	; 0x0f
    23fe:	90 8b       	std	Z+16, r25	; 0x10
    2400:	a1 8b       	std	Z+17, r26	; 0x11
    2402:	b2 8b       	std	Z+18, r27	; 0x12
  test->max_dps = 105.f;
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a2 ed       	ldi	r26, 0xD2	; 210
    240a:	b2 e4       	ldi	r27, 0x42	; 66
    240c:	83 8b       	std	Z+19, r24	; 0x13
    240e:	94 8b       	std	Z+20, r25	; 0x14
    2410:	a5 8b       	std	Z+21, r26	; 0x15
    2412:	b6 8b       	std	Z+22, r27	; 0x16
  test->max_gyro_var = 0.14f;
    2414:	89 e2       	ldi	r24, 0x29	; 41
    2416:	9c e5       	ldi	r25, 0x5C	; 92
    2418:	af e0       	ldi	r26, 0x0F	; 15
    241a:	be e3       	ldi	r27, 0x3E	; 62
    241c:	87 8b       	std	Z+23, r24	; 0x17
    241e:	90 8f       	std	Z+24, r25	; 0x18
    2420:	a1 8f       	std	Z+25, r26	; 0x19
    2422:	b2 8f       	std	Z+26, r27	; 0x1a
  test->min_g = 0.3f;
    2424:	4a e9       	ldi	r20, 0x9A	; 154
    2426:	59 e9       	ldi	r21, 0x99	; 153
    2428:	69 e9       	ldi	r22, 0x99	; 153
    242a:	7e e3       	ldi	r23, 0x3E	; 62
    242c:	43 8f       	std	Z+27, r20	; 0x1b
    242e:	54 8f       	std	Z+28, r21	; 0x1c
    2430:	65 8f       	std	Z+29, r22	; 0x1d
    2432:	76 8f       	std	Z+30, r23	; 0x1e
  test->max_g = 0.95f;
    2434:	43 e3       	ldi	r20, 0x33	; 51
    2436:	53 e3       	ldi	r21, 0x33	; 51
    2438:	63 e7       	ldi	r22, 0x73	; 115
    243a:	7f e3       	ldi	r23, 0x3F	; 63
    243c:	47 8f       	std	Z+31, r20	; 0x1f
    243e:	50 a3       	std	Z+32, r21	; 0x20
    2440:	61 a3       	std	Z+33, r22	; 0x21
    2442:	72 a3       	std	Z+34, r23	; 0x22
  test->max_accel_var = 0.14f;
    2444:	83 a3       	std	Z+35, r24	; 0x23
    2446:	94 a3       	std	Z+36, r25	; 0x24
    2448:	a5 a3       	std	Z+37, r26	; 0x25
    244a:	b6 a3       	std	Z+38, r27	; 0x26
  st->reg = reg;
    244c:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2450:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2454:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <reg>
    2458:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <reg+0x1>
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
  st->hw = hw;
    2460:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2464:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2468:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <hw>
    246c:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <hw+0x1>
    2470:	93 83       	std	Z+3, r25	; 0x03
    2472:	82 83       	std	Z+2, r24	; 0x02
  st->test = test;
    2474:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <test>
    2478:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <test+0x1>
    247c:	92 a3       	std	Z+34, r25	; 0x22
    247e:	81 a3       	std	Z+33, r24	; 0x21
};
    2480:	08 95       	ret
    hw->addr = 0x68;
    2482:	88 e6       	ldi	r24, 0x68	; 104
    hw->addr = 0x69;
    2484:	80 83       	st	Z, r24
    break;
    2486:	78 cf       	rjmp	.-272    	; 0x2378 <_Z19mpu_init_structuresv+0xa0>
    hw->addr = 0x69;
    2488:	89 e6       	ldi	r24, 0x69	; 105
    248a:	fc cf       	rjmp	.-8      	; 0x2484 <_Z19mpu_init_structuresv+0x1ac>

0000248c <_Z14mpu_reset_fifov>:

/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void) {
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	0f 92       	push	r0
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;

  if (!(st->chip_cfg.sensors))
    2496:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    249a:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    249e:	86 81       	ldd	r24, Z+6	; 0x06
    24a0:	81 11       	cpse	r24, r1
    24a2:	06 c0       	rjmp	.+12     	; 0x24b0 <_Z14mpu_reset_fifov+0x24>
    return -1;
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	9f ef       	ldi	r25, 0xFF	; 255
      return -1;
    if (i2c_write(st->hw->addr, st->reg->fifo_en, 1, &st->chip_cfg.fifo_enable))
      return -1;
  }
  return 0;
}
    24a8:	0f 90       	pop	r0
    24aa:	df 91       	pop	r29
    24ac:	cf 91       	pop	r28
    24ae:	08 95       	ret
  data = 0;
    24b0:	19 82       	std	Y+1, r1	; 0x01
  if (i2c_write(st->hw->addr, st->reg->int_enable, 1, &data))
    24b2:	a0 81       	ld	r26, Z
    24b4:	b1 81       	ldd	r27, Z+1	; 0x01
    24b6:	02 80       	ldd	r0, Z+2	; 0x02
    24b8:	f3 81       	ldd	r31, Z+3	; 0x03
    24ba:	e0 2d       	mov	r30, r0
    24bc:	9e 01       	movw	r18, r28
    24be:	2f 5f       	subi	r18, 0xFF	; 255
    24c0:	3f 4f       	sbci	r19, 0xFF	; 255
    24c2:	41 e0       	ldi	r20, 0x01	; 1
    24c4:	51 96       	adiw	r26, 0x11	; 17
    24c6:	6c 91       	ld	r22, X
    24c8:	80 81       	ld	r24, Z
    24ca:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    24ce:	88 23       	and	r24, r24
    24d0:	49 f3       	breq	.-46     	; 0x24a4 <_Z14mpu_reset_fifov+0x18>
  if (i2c_write(st->hw->addr, st->reg->fifo_en, 1, &data))
    24d2:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    24d6:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    24da:	a0 81       	ld	r26, Z
    24dc:	b1 81       	ldd	r27, Z+1	; 0x01
    24de:	02 80       	ldd	r0, Z+2	; 0x02
    24e0:	f3 81       	ldd	r31, Z+3	; 0x03
    24e2:	e0 2d       	mov	r30, r0
    24e4:	9e 01       	movw	r18, r28
    24e6:	2f 5f       	subi	r18, 0xFF	; 255
    24e8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ea:	41 e0       	ldi	r20, 0x01	; 1
    24ec:	15 96       	adiw	r26, 0x05	; 5
    24ee:	6c 91       	ld	r22, X
    24f0:	80 81       	ld	r24, Z
    24f2:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    24f6:	88 23       	and	r24, r24
    24f8:	a9 f2       	breq	.-86     	; 0x24a4 <_Z14mpu_reset_fifov+0x18>
  if (i2c_write(st->hw->addr, st->reg->user_ctrl, 1, &data))
    24fa:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    24fe:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2502:	a0 81       	ld	r26, Z
    2504:	b1 81       	ldd	r27, Z+1	; 0x01
    2506:	02 80       	ldd	r0, Z+2	; 0x02
    2508:	f3 81       	ldd	r31, Z+3	; 0x03
    250a:	e0 2d       	mov	r30, r0
    250c:	9e 01       	movw	r18, r28
    250e:	2f 5f       	subi	r18, 0xFF	; 255
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	41 e0       	ldi	r20, 0x01	; 1
    2514:	14 96       	adiw	r26, 0x04	; 4
    2516:	6c 91       	ld	r22, X
    2518:	80 81       	ld	r24, Z
    251a:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    251e:	88 23       	and	r24, r24
    2520:	09 f2       	breq	.-126    	; 0x24a4 <_Z14mpu_reset_fifov+0x18>
  if (st->chip_cfg.dmp_on) {
    2522:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2526:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    252a:	a2 81       	ldd	r26, Z+2	; 0x02
    252c:	b3 81       	ldd	r27, Z+3	; 0x03
    252e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2530:	88 23       	and	r24, r24
    2532:	09 f4       	brne	.+2      	; 0x2536 <_Z14mpu_reset_fifov+0xaa>
    2534:	62 c0       	rjmp	.+196    	; 0x25fa <_Z14mpu_reset_fifov+0x16e>
    data = BIT_FIFO_RST | BIT_DMP_RST;
    2536:	8c e0       	ldi	r24, 0x0C	; 12
    2538:	89 83       	std	Y+1, r24	; 0x01
    if (i2c_write(st->hw->addr, st->reg->user_ctrl, 1, &data))
    253a:	01 90       	ld	r0, Z+
    253c:	f0 81       	ld	r31, Z
    253e:	e0 2d       	mov	r30, r0
    2540:	9e 01       	movw	r18, r28
    2542:	2f 5f       	subi	r18, 0xFF	; 255
    2544:	3f 4f       	sbci	r19, 0xFF	; 255
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	64 81       	ldd	r22, Z+4	; 0x04
    254a:	8c 91       	ld	r24, X
    254c:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2550:	88 23       	and	r24, r24
    2552:	09 f4       	brne	.+2      	; 0x2556 <_Z14mpu_reset_fifov+0xca>
    2554:	a7 cf       	rjmp	.-178    	; 0x24a4 <_Z14mpu_reset_fifov+0x18>
    data = BIT_DMP_EN | BIT_FIFO_EN;
    2556:	80 ec       	ldi	r24, 0xC0	; 192
    2558:	89 83       	std	Y+1, r24	; 0x01
    if (st->chip_cfg.sensors & INV_XYZ_COMPASS)
    255a:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    255e:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2562:	86 81       	ldd	r24, Z+6	; 0x06
    2564:	80 ff       	sbrs	r24, 0
    2566:	02 c0       	rjmp	.+4      	; 0x256c <_Z14mpu_reset_fifov+0xe0>
      data |= BIT_AUX_IF_EN;
    2568:	80 ee       	ldi	r24, 0xE0	; 224
    256a:	89 83       	std	Y+1, r24	; 0x01
    if (i2c_write(st->hw->addr, st->reg->user_ctrl, 1, &data))
    256c:	a0 81       	ld	r26, Z
    256e:	b1 81       	ldd	r27, Z+1	; 0x01
    2570:	02 80       	ldd	r0, Z+2	; 0x02
    2572:	f3 81       	ldd	r31, Z+3	; 0x03
    2574:	e0 2d       	mov	r30, r0
    2576:	9e 01       	movw	r18, r28
    2578:	2f 5f       	subi	r18, 0xFF	; 255
    257a:	3f 4f       	sbci	r19, 0xFF	; 255
    257c:	41 e0       	ldi	r20, 0x01	; 1
    257e:	14 96       	adiw	r26, 0x04	; 4
    2580:	6c 91       	ld	r22, X
    2582:	80 81       	ld	r24, Z
    2584:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2588:	88 23       	and	r24, r24
    258a:	09 f4       	brne	.+2      	; 0x258e <_Z14mpu_reset_fifov+0x102>
    258c:	8b cf       	rjmp	.-234    	; 0x24a4 <_Z14mpu_reset_fifov+0x18>
    if (st->chip_cfg.int_enable)
    258e:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2592:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2596:	84 85       	ldd	r24, Z+12	; 0x0c
    2598:	88 23       	and	r24, r24
    259a:	69 f1       	breq	.+90     	; 0x25f6 <_Z14mpu_reset_fifov+0x16a>
      data = BIT_DMP_INT_EN;
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	89 83       	std	Y+1, r24	; 0x01
    if (i2c_write(st->hw->addr, st->reg->int_enable, 1, &data))
    25a0:	a0 81       	ld	r26, Z
    25a2:	b1 81       	ldd	r27, Z+1	; 0x01
    25a4:	02 80       	ldd	r0, Z+2	; 0x02
    25a6:	f3 81       	ldd	r31, Z+3	; 0x03
    25a8:	e0 2d       	mov	r30, r0
    25aa:	9e 01       	movw	r18, r28
    25ac:	2f 5f       	subi	r18, 0xFF	; 255
    25ae:	3f 4f       	sbci	r19, 0xFF	; 255
    25b0:	41 e0       	ldi	r20, 0x01	; 1
    25b2:	51 96       	adiw	r26, 0x11	; 17
    25b4:	6c 91       	ld	r22, X
    25b6:	80 81       	ld	r24, Z
    25b8:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    25bc:	88 23       	and	r24, r24
    25be:	09 f4       	brne	.+2      	; 0x25c2 <_Z14mpu_reset_fifov+0x136>
    25c0:	71 cf       	rjmp	.-286    	; 0x24a4 <_Z14mpu_reset_fifov+0x18>
    data = 0;
    25c2:	19 82       	std	Y+1, r1	; 0x01
    if (i2c_write(st->hw->addr, st->reg->fifo_en, 1, &data))
    25c4:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    25c8:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    25cc:	a0 81       	ld	r26, Z
    25ce:	b1 81       	ldd	r27, Z+1	; 0x01
    25d0:	02 80       	ldd	r0, Z+2	; 0x02
    25d2:	f3 81       	ldd	r31, Z+3	; 0x03
    25d4:	e0 2d       	mov	r30, r0
    25d6:	9e 01       	movw	r18, r28
    25d8:	2f 5f       	subi	r18, 0xFF	; 255
    25da:	3f 4f       	sbci	r19, 0xFF	; 255
    if (i2c_write(st->hw->addr, st->reg->fifo_en, 1, &st->chip_cfg.fifo_enable))
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	15 96       	adiw	r26, 0x05	; 5
    25e0:	6c 91       	ld	r22, X
    25e2:	80 81       	ld	r24, Z
    25e4:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    25e8:	91 e0       	ldi	r25, 0x01	; 1
    25ea:	89 27       	eor	r24, r25
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	91 95       	neg	r25
    25f0:	81 95       	neg	r24
    25f2:	91 09       	sbc	r25, r1
    25f4:	59 cf       	rjmp	.-334    	; 0x24a8 <_Z14mpu_reset_fifov+0x1c>
      data = 0;
    25f6:	19 82       	std	Y+1, r1	; 0x01
    25f8:	d3 cf       	rjmp	.-90     	; 0x25a0 <_Z14mpu_reset_fifov+0x114>
    data = BIT_FIFO_RST;
    25fa:	84 e0       	ldi	r24, 0x04	; 4
    25fc:	89 83       	std	Y+1, r24	; 0x01
    if (i2c_write(st->hw->addr, st->reg->user_ctrl, 1, &data))
    25fe:	01 90       	ld	r0, Z+
    2600:	f0 81       	ld	r31, Z
    2602:	e0 2d       	mov	r30, r0
    2604:	9e 01       	movw	r18, r28
    2606:	2f 5f       	subi	r18, 0xFF	; 255
    2608:	3f 4f       	sbci	r19, 0xFF	; 255
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	64 81       	ldd	r22, Z+4	; 0x04
    260e:	8c 91       	ld	r24, X
    2610:	0e 94 13 1b 	call	0x3626	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2614:	88 23       	and	r24, r24
    2616:	09 f4       	brne	.+2      	; 0x261a <_Z14mpu_reset_fifov+0x18e>
    2618:	45 cf       	rjmp	.-374    	; 0x24a4 <_Z14mpu_reset_fifov+0x18>
    if (st->chip_cfg.bypass_mode || !(st->chip_cfg.sensors & INV_XYZ_COMPASS))
    261a:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    261e:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2622:	85 85       	ldd	r24, Z+13	; 0x0d
    2624:	81 11       	cpse	r24, r1
    2626:	03 c0       	rjmp	.+6      	; 0x262e <_Z14mpu_reset_fifov+0x1a2>
    2628:	86 81       	ldd	r24, Z+6	; 0x06
    262a:	80 fd       	sbrc	r24, 0
    262c:	41 c0       	rjmp	.+130    	; 0x26b0 <_Z14mpu_reset_fifov+0x224>
      data = BIT_FIFO_EN;
    262e:	80 e4       	ldi	r24, 0x40	; 64
      data = BIT_FIFO_EN | BIT_AUX_IF_EN;
    2630:	89 83       	std	Y+1, r24	; 0x01
    if (i2c_write(st->hw->addr, st->reg->user_ctrl, 1, &data))
    2632:	a0 81       	ld	r26, Z
    2634:	b1 81       	ldd	r27, Z+1	; 0x01
    2636:	02 80       	ldd	r0, Z+2	; 0x02
    2638:	f3 81       	ldd	r31, Z+3	; 0x03
    263a:	e0 2d       	mov	r30, r0
    263c:	9e 01       	movw	r18, r28
    263e:	2f 5f       	subi	r18, 0xFF	; 255
    2640:	3f 4f       	sbci	r19, 0xFF	; 255
    2642:	41 e0       	ldi	r20, 0x01	; 1
    2644:	14 96       	adiw	r26, 0x04	; 4
    2646:	6c 91       	ld	r22, X
    2648:	80 81       	ld	r24, Z
    264a:	ed d7       	rcall	.+4058   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    264c:	88 23       	and	r24, r24
    264e:	09 f4       	brne	.+2      	; 0x2652 <_Z14mpu_reset_fifov+0x1c6>
    2650:	29 cf       	rjmp	.-430    	; 0x24a4 <_Z14mpu_reset_fifov+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2652:	2f e7       	ldi	r18, 0x7F	; 127
    2654:	88 e3       	ldi	r24, 0x38	; 56
    2656:	91 e0       	ldi	r25, 0x01	; 1
    2658:	21 50       	subi	r18, 0x01	; 1
    265a:	80 40       	sbci	r24, 0x00	; 0
    265c:	90 40       	sbci	r25, 0x00	; 0
    265e:	e1 f7       	brne	.-8      	; 0x2658 <_Z14mpu_reset_fifov+0x1cc>
    2660:	00 c0       	rjmp	.+0      	; 0x2662 <_Z14mpu_reset_fifov+0x1d6>
    2662:	00 00       	nop
    if (st->chip_cfg.int_enable)
    2664:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2668:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    266c:	84 85       	ldd	r24, Z+12	; 0x0c
    266e:	88 23       	and	r24, r24
    2670:	09 f1       	breq	.+66     	; 0x26b4 <_Z14mpu_reset_fifov+0x228>
      data = BIT_DATA_RDY_EN;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	89 83       	std	Y+1, r24	; 0x01
    if (i2c_write(st->hw->addr, st->reg->int_enable, 1, &data))
    2676:	a0 81       	ld	r26, Z
    2678:	b1 81       	ldd	r27, Z+1	; 0x01
    267a:	02 80       	ldd	r0, Z+2	; 0x02
    267c:	f3 81       	ldd	r31, Z+3	; 0x03
    267e:	e0 2d       	mov	r30, r0
    2680:	9e 01       	movw	r18, r28
    2682:	2f 5f       	subi	r18, 0xFF	; 255
    2684:	3f 4f       	sbci	r19, 0xFF	; 255
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	51 96       	adiw	r26, 0x11	; 17
    268a:	6c 91       	ld	r22, X
    268c:	80 81       	ld	r24, Z
    268e:	cb d7       	rcall	.+3990   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2690:	88 23       	and	r24, r24
    2692:	09 f4       	brne	.+2      	; 0x2696 <_Z14mpu_reset_fifov+0x20a>
    2694:	07 cf       	rjmp	.-498    	; 0x24a4 <_Z14mpu_reset_fifov+0x18>
    if (i2c_write(st->hw->addr, st->reg->fifo_en, 1, &st->chip_cfg.fifo_enable))
    2696:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    269a:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    269e:	9f 01       	movw	r18, r30
    26a0:	25 5f       	subi	r18, 0xF5	; 245
    26a2:	3f 4f       	sbci	r19, 0xFF	; 255
    26a4:	a0 81       	ld	r26, Z
    26a6:	b1 81       	ldd	r27, Z+1	; 0x01
    26a8:	02 80       	ldd	r0, Z+2	; 0x02
    26aa:	f3 81       	ldd	r31, Z+3	; 0x03
    26ac:	e0 2d       	mov	r30, r0
    26ae:	96 cf       	rjmp	.-212    	; 0x25dc <_Z14mpu_reset_fifov+0x150>
      data = BIT_FIFO_EN | BIT_AUX_IF_EN;
    26b0:	80 e6       	ldi	r24, 0x60	; 96
    26b2:	be cf       	rjmp	.-132    	; 0x2630 <_Z14mpu_reset_fifov+0x1a4>
      data = 0;
    26b4:	19 82       	std	Y+1, r1	; 0x01
    26b6:	df cf       	rjmp	.-66     	; 0x2676 <_Z14mpu_reset_fifov+0x1ea>

000026b8 <_Z16mpu_set_gyro_fsrt>:
/**
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr) {
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	0f 92       	push	r0
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;

  if (!(st->chip_cfg.sensors))
    26c2:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    26c6:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    26ca:	26 81       	ldd	r18, Z+6	; 0x06
    26cc:	21 11       	cpse	r18, r1
    26ce:	06 c0       	rjmp	.+12     	; 0x26dc <_Z16mpu_set_gyro_fsrt+0x24>
    break;
  case 2000:
    data = INV_FSR_2000DPS << 3;
    break;
  default:
    return -1;
    26d0:	8f ef       	ldi	r24, 0xFF	; 255
    26d2:	9f ef       	ldi	r25, 0xFF	; 255
    return 0;
  if (i2c_write(st->hw->addr, st->reg->gyro_cfg, 1, &data))
    return -1;
  st->chip_cfg.gyro_fsr = data >> 3;
  return 0;
}
    26d4:	0f 90       	pop	r0
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	08 95       	ret
  switch (fsr) {
    26dc:	84 3f       	cpi	r24, 0xF4	; 244
    26de:	21 e0       	ldi	r18, 0x01	; 1
    26e0:	92 07       	cpc	r25, r18
    26e2:	c1 f1       	breq	.+112    	; 0x2754 <_Z16mpu_set_gyro_fsrt+0x9c>
    26e4:	68 f5       	brcc	.+90     	; 0x2740 <_Z16mpu_set_gyro_fsrt+0x88>
    26e6:	8a 3f       	cpi	r24, 0xFA	; 250
    26e8:	91 05       	cpc	r25, r1
    26ea:	91 f7       	brne	.-28     	; 0x26d0 <_Z16mpu_set_gyro_fsrt+0x18>
    data = INV_FSR_250DPS << 3;
    26ec:	19 82       	std	Y+1, r1	; 0x01
  if (st->chip_cfg.gyro_fsr == (data >> 3))
    26ee:	24 81       	ldd	r18, Z+4	; 0x04
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	33 e0       	ldi	r19, 0x03	; 3
    26f6:	95 95       	asr	r25
    26f8:	87 95       	ror	r24
    26fa:	3a 95       	dec	r19
    26fc:	e1 f7       	brne	.-8      	; 0x26f6 <_Z16mpu_set_gyro_fsrt+0x3e>
    26fe:	28 17       	cp	r18, r24
    2700:	19 06       	cpc	r1, r25
    2702:	d9 f0       	breq	.+54     	; 0x273a <_Z16mpu_set_gyro_fsrt+0x82>
  if (i2c_write(st->hw->addr, st->reg->gyro_cfg, 1, &data))
    2704:	a0 81       	ld	r26, Z
    2706:	b1 81       	ldd	r27, Z+1	; 0x01
    2708:	02 80       	ldd	r0, Z+2	; 0x02
    270a:	f3 81       	ldd	r31, Z+3	; 0x03
    270c:	e0 2d       	mov	r30, r0
    270e:	9e 01       	movw	r18, r28
    2710:	2f 5f       	subi	r18, 0xFF	; 255
    2712:	3f 4f       	sbci	r19, 0xFF	; 255
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	16 96       	adiw	r26, 0x06	; 6
    2718:	6c 91       	ld	r22, X
    271a:	80 81       	ld	r24, Z
    271c:	84 d7       	rcall	.+3848   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    271e:	88 23       	and	r24, r24
    2720:	b9 f2       	breq	.-82     	; 0x26d0 <_Z16mpu_set_gyro_fsrt+0x18>
  st->chip_cfg.gyro_fsr = data >> 3;
    2722:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2726:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	23 e0       	ldi	r18, 0x03	; 3
    2730:	95 95       	asr	r25
    2732:	87 95       	ror	r24
    2734:	2a 95       	dec	r18
    2736:	e1 f7       	brne	.-8      	; 0x2730 <_Z16mpu_set_gyro_fsrt+0x78>
    2738:	84 83       	std	Z+4, r24	; 0x04
    return 0;
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	ca cf       	rjmp	.-108    	; 0x26d4 <_Z16mpu_set_gyro_fsrt+0x1c>
    2740:	88 3e       	cpi	r24, 0xE8	; 232
    2742:	23 e0       	ldi	r18, 0x03	; 3
    2744:	92 07       	cpc	r25, r18
    2746:	49 f0       	breq	.+18     	; 0x275a <_Z16mpu_set_gyro_fsrt+0xa2>
    2748:	80 3d       	cpi	r24, 0xD0	; 208
    274a:	97 40       	sbci	r25, 0x07	; 7
    274c:	09 f0       	breq	.+2      	; 0x2750 <_Z16mpu_set_gyro_fsrt+0x98>
    274e:	c0 cf       	rjmp	.-128    	; 0x26d0 <_Z16mpu_set_gyro_fsrt+0x18>
    data = INV_FSR_2000DPS << 3;
    2750:	88 e1       	ldi	r24, 0x18	; 24
    2752:	01 c0       	rjmp	.+2      	; 0x2756 <_Z16mpu_set_gyro_fsrt+0x9e>
    data = INV_FSR_500DPS << 3;
    2754:	88 e0       	ldi	r24, 0x08	; 8
    data = INV_FSR_2000DPS << 3;
    2756:	89 83       	std	Y+1, r24	; 0x01
    break;
    2758:	ca cf       	rjmp	.-108    	; 0x26ee <_Z16mpu_set_gyro_fsrt+0x36>
    data = INV_FSR_1000DPS << 3;
    275a:	80 e1       	ldi	r24, 0x10	; 16
    275c:	fc cf       	rjmp	.-8      	; 0x2756 <_Z16mpu_set_gyro_fsrt+0x9e>

0000275e <_Z17mpu_set_accel_fsrh>:
/**
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr) {
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	0f 92       	push	r0
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;

  if (!(st->chip_cfg.sensors))
    2768:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    276c:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2770:	96 81       	ldd	r25, Z+6	; 0x06
    2772:	91 11       	cpse	r25, r1
    2774:	06 c0       	rjmp	.+12     	; 0x2782 <_Z17mpu_set_accel_fsrh+0x24>
    break;
  case 16:
    data = INV_FSR_16G << 3;
    break;
  default:
    return -1;
    2776:	8f ef       	ldi	r24, 0xFF	; 255
    2778:	9f ef       	ldi	r25, 0xFF	; 255
    return 0;
  if (i2c_write(st->hw->addr, st->reg->accel_cfg, 1, &data))
    return -1;
  st->chip_cfg.accel_fsr = data >> 3;
  return 0;
}
    277a:	0f 90       	pop	r0
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	08 95       	ret
  switch (fsr) {
    2782:	84 30       	cpi	r24, 0x04	; 4
    2784:	99 f1       	breq	.+102    	; 0x27ec <_Z17mpu_set_accel_fsrh+0x8e>
    2786:	60 f5       	brcc	.+88     	; 0x27e0 <_Z17mpu_set_accel_fsrh+0x82>
    2788:	82 30       	cpi	r24, 0x02	; 2
    278a:	a9 f7       	brne	.-22     	; 0x2776 <_Z17mpu_set_accel_fsrh+0x18>
    data = INV_FSR_2G << 3;
    278c:	19 82       	std	Y+1, r1	; 0x01
  if (st->chip_cfg.accel_fsr == (data >> 3))
    278e:	25 81       	ldd	r18, Z+5	; 0x05
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	33 e0       	ldi	r19, 0x03	; 3
    2796:	95 95       	asr	r25
    2798:	87 95       	ror	r24
    279a:	3a 95       	dec	r19
    279c:	e1 f7       	brne	.-8      	; 0x2796 <_Z17mpu_set_accel_fsrh+0x38>
    279e:	28 17       	cp	r18, r24
    27a0:	19 06       	cpc	r1, r25
    27a2:	d9 f0       	breq	.+54     	; 0x27da <_Z17mpu_set_accel_fsrh+0x7c>
  if (i2c_write(st->hw->addr, st->reg->accel_cfg, 1, &data))
    27a4:	a0 81       	ld	r26, Z
    27a6:	b1 81       	ldd	r27, Z+1	; 0x01
    27a8:	02 80       	ldd	r0, Z+2	; 0x02
    27aa:	f3 81       	ldd	r31, Z+3	; 0x03
    27ac:	e0 2d       	mov	r30, r0
    27ae:	9e 01       	movw	r18, r28
    27b0:	2f 5f       	subi	r18, 0xFF	; 255
    27b2:	3f 4f       	sbci	r19, 0xFF	; 255
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	17 96       	adiw	r26, 0x07	; 7
    27b8:	6c 91       	ld	r22, X
    27ba:	80 81       	ld	r24, Z
    27bc:	34 d7       	rcall	.+3688   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    27be:	88 23       	and	r24, r24
    27c0:	d1 f2       	breq	.-76     	; 0x2776 <_Z17mpu_set_accel_fsrh+0x18>
  st->chip_cfg.accel_fsr = data >> 3;
    27c2:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    27c6:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	23 e0       	ldi	r18, 0x03	; 3
    27d0:	95 95       	asr	r25
    27d2:	87 95       	ror	r24
    27d4:	2a 95       	dec	r18
    27d6:	e1 f7       	brne	.-8      	; 0x27d0 <_Z17mpu_set_accel_fsrh+0x72>
    27d8:	85 83       	std	Z+5, r24	; 0x05
    return 0;
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	cd cf       	rjmp	.-102    	; 0x277a <_Z17mpu_set_accel_fsrh+0x1c>
    27e0:	88 30       	cpi	r24, 0x08	; 8
    27e2:	39 f0       	breq	.+14     	; 0x27f2 <_Z17mpu_set_accel_fsrh+0x94>
    27e4:	80 31       	cpi	r24, 0x10	; 16
    27e6:	39 f6       	brne	.-114    	; 0x2776 <_Z17mpu_set_accel_fsrh+0x18>
    data = INV_FSR_16G << 3;
    27e8:	88 e1       	ldi	r24, 0x18	; 24
    27ea:	01 c0       	rjmp	.+2      	; 0x27ee <_Z17mpu_set_accel_fsrh+0x90>
    data = INV_FSR_4G << 3;
    27ec:	88 e0       	ldi	r24, 0x08	; 8
    data = INV_FSR_16G << 3;
    27ee:	89 83       	std	Y+1, r24	; 0x01
    break;
    27f0:	ce cf       	rjmp	.-100    	; 0x278e <_Z17mpu_set_accel_fsrh+0x30>
    data = INV_FSR_8G << 3;
    27f2:	80 e1       	ldi	r24, 0x10	; 16
    27f4:	fc cf       	rjmp	.-8      	; 0x27ee <_Z17mpu_set_accel_fsrh+0x90>

000027f6 <_Z11mpu_set_lpft>:
 *  @brief      Set digital low pass filter.
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf) {
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	0f 92       	push	r0
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;
  if (!(st->chip_cfg.sensors))
    2800:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2804:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2808:	26 81       	ldd	r18, Z+6	; 0x06
    280a:	21 11       	cpse	r18, r1
    280c:	06 c0       	rjmp	.+12     	; 0x281a <_Z11mpu_set_lpft+0x24>
    return -1;
    280e:	8f ef       	ldi	r24, 0xFF	; 255
    2810:	9f ef       	ldi	r25, 0xFF	; 255
    return 0;
  if (i2c_write(st->hw->addr, st->reg->lpf, 1, &data))
    return -1;
  st->chip_cfg.lpf = data;
  return 0;
}
    2812:	0f 90       	pop	r0
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	08 95       	ret
  if (lpf >= 188)
    281a:	8c 3b       	cpi	r24, 0xBC	; 188
    281c:	91 05       	cpc	r25, r1
    281e:	f0 f0       	brcs	.+60     	; 0x285c <_Z11mpu_set_lpft+0x66>
    data = INV_FILTER_188HZ;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    data = INV_FILTER_5HZ;
    2822:	89 83       	std	Y+1, r24	; 0x01
  if (st->chip_cfg.lpf == data)
    2824:	97 81       	ldd	r25, Z+7	; 0x07
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	98 17       	cp	r25, r24
    282a:	a9 f0       	breq	.+42     	; 0x2856 <_Z11mpu_set_lpft+0x60>
  if (i2c_write(st->hw->addr, st->reg->lpf, 1, &data))
    282c:	a0 81       	ld	r26, Z
    282e:	b1 81       	ldd	r27, Z+1	; 0x01
    2830:	02 80       	ldd	r0, Z+2	; 0x02
    2832:	f3 81       	ldd	r31, Z+3	; 0x03
    2834:	e0 2d       	mov	r30, r0
    2836:	9e 01       	movw	r18, r28
    2838:	2f 5f       	subi	r18, 0xFF	; 255
    283a:	3f 4f       	sbci	r19, 0xFF	; 255
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	12 96       	adiw	r26, 0x02	; 2
    2840:	6c 91       	ld	r22, X
    2842:	80 81       	ld	r24, Z
    2844:	f0 d6       	rcall	.+3552   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2846:	88 23       	and	r24, r24
    2848:	11 f3       	breq	.-60     	; 0x280e <_Z11mpu_set_lpft+0x18>
  st->chip_cfg.lpf = data;
    284a:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    284e:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	87 83       	std	Z+7, r24	; 0x07
    return 0;
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	db cf       	rjmp	.-74     	; 0x2812 <_Z11mpu_set_lpft+0x1c>
  else if (lpf >= 98)
    285c:	82 36       	cpi	r24, 0x62	; 98
    285e:	91 05       	cpc	r25, r1
    2860:	10 f0       	brcs	.+4      	; 0x2866 <_Z11mpu_set_lpft+0x70>
    data = INV_FILTER_98HZ;
    2862:	82 e0       	ldi	r24, 0x02	; 2
    2864:	de cf       	rjmp	.-68     	; 0x2822 <_Z11mpu_set_lpft+0x2c>
  else if (lpf >= 42)
    2866:	8a 32       	cpi	r24, 0x2A	; 42
    2868:	91 05       	cpc	r25, r1
    286a:	10 f0       	brcs	.+4      	; 0x2870 <_Z11mpu_set_lpft+0x7a>
    data = INV_FILTER_42HZ;
    286c:	83 e0       	ldi	r24, 0x03	; 3
    286e:	d9 cf       	rjmp	.-78     	; 0x2822 <_Z11mpu_set_lpft+0x2c>
  else if (lpf >= 20)
    2870:	84 31       	cpi	r24, 0x14	; 20
    2872:	91 05       	cpc	r25, r1
    2874:	10 f0       	brcs	.+4      	; 0x287a <_Z11mpu_set_lpft+0x84>
    data = INV_FILTER_20HZ;
    2876:	84 e0       	ldi	r24, 0x04	; 4
    2878:	d4 cf       	rjmp	.-88     	; 0x2822 <_Z11mpu_set_lpft+0x2c>
  else if (lpf >= 10)
    287a:	0a 97       	sbiw	r24, 0x0a	; 10
    287c:	10 f0       	brcs	.+4      	; 0x2882 <_Z11mpu_set_lpft+0x8c>
    data = INV_FILTER_10HZ;
    287e:	85 e0       	ldi	r24, 0x05	; 5
    2880:	d0 cf       	rjmp	.-96     	; 0x2822 <_Z11mpu_set_lpft+0x2c>
    data = INV_FILTER_5HZ;
    2882:	86 e0       	ldi	r24, 0x06	; 6
    2884:	ce cf       	rjmp	.-100    	; 0x2822 <_Z11mpu_set_lpft+0x2c>

00002886 <_Z18mpu_configure_fifoh>:
 *  \n INV_XYZ_GYRO
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors) {
    2886:	0f 93       	push	r16
    2888:	1f 93       	push	r17
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
  int result = 0;

  /* Compass data isn't going into the FIFO. Stop trying. */
  sensors &= ~INV_XYZ_COMPASS;

  if (st->chip_cfg.dmp_on)
    288e:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2892:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2896:	95 8d       	ldd	r25, Z+29	; 0x1d
    return 0;
    2898:	d0 e0       	ldi	r29, 0x00	; 0
    289a:	c0 e0       	ldi	r28, 0x00	; 0
  if (st->chip_cfg.dmp_on)
    289c:	91 11       	cpse	r25, r1
    289e:	27 c0       	rjmp	.+78     	; 0x28ee <_Z18mpu_configure_fifoh+0x68>
  else {
    if (!(st->chip_cfg.sensors))
    28a0:	96 81       	ldd	r25, Z+6	; 0x06
    28a2:	99 23       	and	r25, r25
    28a4:	f9 f0       	breq	.+62     	; 0x28e4 <_Z18mpu_configure_fifoh+0x5e>
  sensors &= ~INV_XYZ_COMPASS;
    28a6:	18 2f       	mov	r17, r24
    28a8:	1e 7f       	andi	r17, 0xFE	; 254
      return -1;
    prev = st->chip_cfg.fifo_enable;
    28aa:	03 85       	ldd	r16, Z+11	; 0x0b
    st->chip_cfg.fifo_enable = sensors & st->chip_cfg.sensors;
    28ac:	91 23       	and	r25, r17
    28ae:	93 87       	std	Z+11, r25	; 0x0b
    if (st->chip_cfg.fifo_enable != sensors)
    28b0:	c1 e0       	ldi	r28, 0x01	; 1
    28b2:	d0 e0       	ldi	r29, 0x00	; 0
    28b4:	91 13       	cpse	r25, r17
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <_Z18mpu_configure_fifoh+0x36>
    28b8:	d0 e0       	ldi	r29, 0x00	; 0
    28ba:	c0 e0       	ldi	r28, 0x00	; 0
    28bc:	d1 95       	neg	r29
    28be:	c1 95       	neg	r28
    28c0:	d1 09       	sbc	r29, r1
       * asleep.
       */
      result = -1;
    else
      result = 0;
    if (sensors || st->chip_cfg.lp_accel_mode)
    28c2:	11 11       	cpse	r17, r1
    28c4:	03 c0       	rjmp	.+6      	; 0x28cc <_Z18mpu_configure_fifoh+0x46>
    28c6:	87 85       	ldd	r24, Z+15	; 0x0f
    28c8:	88 23       	and	r24, r24
    28ca:	79 f0       	breq	.+30     	; 0x28ea <_Z18mpu_configure_fifoh+0x64>
      set_int_enable(1);
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	8c dc       	rcall	.-1768   	; 0x21e8 <_ZL14set_int_enableh>
    else
      set_int_enable(0);
    if (sensors) {
    28d0:	11 23       	and	r17, r17
      if (mpu_reset_fifo()) {
    28d2:	69 f0       	breq	.+26     	; 0x28ee <_Z18mpu_configure_fifoh+0x68>
    28d4:	db dd       	rcall	.-1098   	; 0x248c <_Z14mpu_reset_fifov>
    28d6:	89 2b       	or	r24, r25
    28d8:	51 f0       	breq	.+20     	; 0x28ee <_Z18mpu_configure_fifoh+0x68>
        st->chip_cfg.fifo_enable = prev;
    28da:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    28de:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    28e2:	03 87       	std	Z+11, r16	; 0x0b
      return -1;
    28e4:	cf ef       	ldi	r28, 0xFF	; 255
    28e6:	df ef       	ldi	r29, 0xFF	; 255
      set_int_enable(0);
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <_Z18mpu_configure_fifoh+0x68>
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	7d dc       	rcall	.-1798   	; 0x21e8 <_ZL14set_int_enableh>
      }
    }
  }

  return result;
}
    28ee:	ce 01       	movw	r24, r28
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	08 95       	ret

000028fa <_Z19mpu_get_power_statePh>:
 *  @brief      Get current power state.
 *  @param[in]  power_on    1 if turned on, 0 if suspended.
 *  @return     0 if successful.
 */
int mpu_get_power_state(unsigned char *power_on) {
  if (st->chip_cfg.sensors)
    28fa:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    28fe:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2902:	26 81       	ldd	r18, Z+6	; 0x06
    2904:	22 23       	and	r18, r18
    2906:	31 f0       	breq	.+12     	; 0x2914 <_Z19mpu_get_power_statePh+0x1a>
    power_on[0] = 1;
    2908:	21 e0       	ldi	r18, 0x01	; 1
    290a:	fc 01       	movw	r30, r24
    290c:	20 83       	st	Z, r18
  else
    power_on[0] = 0;
  return 0;
}
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	08 95       	ret
    power_on[0] = 0;
    2914:	fc 01       	movw	r30, r24
    2916:	10 82       	st	Z, r1
    2918:	fa cf       	rjmp	.-12     	; 0x290e <_Z19mpu_get_power_statePh+0x14>

0000291a <_Z14mpu_set_bypassh>:
/**
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on) {
    291a:	ff 92       	push	r15
    291c:	0f 93       	push	r16
    291e:	1f 93       	push	r17
    2920:	cf 93       	push	r28
    2922:	df 93       	push	r29
    2924:	0f 92       	push	r0
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	f8 2e       	mov	r15, r24
  unsigned char tmp;

  if (st->chip_cfg.bypass_mode == bypass_on)
    292c:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2930:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2934:	85 85       	ldd	r24, Z+13	; 0x0d
    2936:	8f 15       	cp	r24, r15
    2938:	09 f4       	brne	.+2      	; 0x293c <_Z14mpu_set_bypassh+0x22>
    293a:	61 c0       	rjmp	.+194    	; 0x29fe <_Z14mpu_set_bypassh+0xe4>
    return 0;

  if (bypass_on) {
    293c:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_ZN6I2Cdev11readTimeoutE>
    2940:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_ZN6I2Cdev11readTimeoutE+0x1>
    2944:	a0 81       	ld	r26, Z
    2946:	b1 81       	ldd	r27, Z+1	; 0x01
    2948:	14 96       	adiw	r26, 0x04	; 4
    294a:	6c 91       	ld	r22, X
    294c:	02 80       	ldd	r0, Z+2	; 0x02
    294e:	f3 81       	ldd	r31, Z+3	; 0x03
    2950:	e0 2d       	mov	r30, r0
    2952:	80 81       	ld	r24, Z
    if (i2c_read(st->hw->addr, st->reg->user_ctrl, 1, &tmp))
    2954:	9e 01       	movw	r18, r28
    2956:	2f 5f       	subi	r18, 0xFF	; 255
    2958:	3f 4f       	sbci	r19, 0xFF	; 255
    295a:	41 e0       	ldi	r20, 0x01	; 1
  if (bypass_on) {
    295c:	ff 20       	and	r15, r15
    295e:	09 f4       	brne	.+2      	; 0x2962 <_Z14mpu_set_bypassh+0x48>
    2960:	51 c0       	rjmp	.+162    	; 0x2a04 <_Z14mpu_set_bypassh+0xea>
    if (i2c_read(st->hw->addr, st->reg->user_ctrl, 1, &tmp))
    2962:	45 d6       	rcall	.+3210   	; 0x35ee <_ZN6I2Cdev9readBytesEhhhPhj>
    2964:	81 11       	cpse	r24, r1
    2966:	09 c0       	rjmp	.+18     	; 0x297a <_Z14mpu_set_bypassh+0x60>
      return -1;
    2968:	8f ef       	ldi	r24, 0xFF	; 255
    296a:	9f ef       	ldi	r25, 0xFF	; 255
    if (i2c_write(st->hw->addr, st->reg->int_pin_cfg, 1, &tmp))
      return -1;
  }
  st->chip_cfg.bypass_mode = bypass_on;
  return 0;
}
    296c:	0f 90       	pop	r0
    296e:	df 91       	pop	r29
    2970:	cf 91       	pop	r28
    2972:	1f 91       	pop	r17
    2974:	0f 91       	pop	r16
    2976:	ff 90       	pop	r15
    2978:	08 95       	ret
    tmp &= ~BIT_AUX_IF_EN;
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	8f 7d       	andi	r24, 0xDF	; 223
    297e:	89 83       	std	Y+1, r24	; 0x01
    if (i2c_write(st->hw->addr, st->reg->user_ctrl, 1, &tmp))
    2980:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2984:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2988:	a0 81       	ld	r26, Z
    298a:	b1 81       	ldd	r27, Z+1	; 0x01
    298c:	02 80       	ldd	r0, Z+2	; 0x02
    298e:	f3 81       	ldd	r31, Z+3	; 0x03
    2990:	e0 2d       	mov	r30, r0
    2992:	9e 01       	movw	r18, r28
    2994:	2f 5f       	subi	r18, 0xFF	; 255
    2996:	3f 4f       	sbci	r19, 0xFF	; 255
    2998:	41 e0       	ldi	r20, 0x01	; 1
    299a:	14 96       	adiw	r26, 0x04	; 4
    299c:	6c 91       	ld	r22, X
    299e:	80 81       	ld	r24, Z
    29a0:	42 d6       	rcall	.+3204   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    29a2:	88 23       	and	r24, r24
    29a4:	09 f3       	breq	.-62     	; 0x2968 <_Z14mpu_set_bypassh+0x4e>
    29a6:	8f e6       	ldi	r24, 0x6F	; 111
    29a8:	97 e1       	ldi	r25, 0x17	; 23
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <_Z14mpu_set_bypassh+0x90>
    29ae:	00 c0       	rjmp	.+0      	; 0x29b0 <_Z14mpu_set_bypassh+0x96>
    29b0:	00 00       	nop
    tmp = BIT_BYPASS_EN;
    29b2:	82 e0       	ldi	r24, 0x02	; 2
    29b4:	89 83       	std	Y+1, r24	; 0x01
    if (st->chip_cfg.active_low_int)
    29b6:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    29ba:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    29be:	83 8d       	ldd	r24, Z+27	; 0x1b
    29c0:	88 23       	and	r24, r24
    29c2:	11 f0       	breq	.+4      	; 0x29c8 <_Z14mpu_set_bypassh+0xae>
      tmp |= BIT_ACTL;
    29c4:	82 e8       	ldi	r24, 0x82	; 130
      tmp = BIT_ACTL;
    29c6:	89 83       	std	Y+1, r24	; 0x01
    if (st->chip_cfg.latched_int)
    29c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    29ca:	88 23       	and	r24, r24
    29cc:	19 f0       	breq	.+6      	; 0x29d4 <_Z14mpu_set_bypassh+0xba>
      tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	80 63       	ori	r24, 0x30	; 48
    29d2:	89 83       	std	Y+1, r24	; 0x01
    if (i2c_write(st->hw->addr, st->reg->int_pin_cfg, 1, &tmp))
    29d4:	a0 81       	ld	r26, Z
    29d6:	b1 81       	ldd	r27, Z+1	; 0x01
    29d8:	02 80       	ldd	r0, Z+2	; 0x02
    29da:	f3 81       	ldd	r31, Z+3	; 0x03
    29dc:	e0 2d       	mov	r30, r0
    29de:	9e 01       	movw	r18, r28
    29e0:	2f 5f       	subi	r18, 0xFF	; 255
    29e2:	3f 4f       	sbci	r19, 0xFF	; 255
    29e4:	41 e0       	ldi	r20, 0x01	; 1
    29e6:	57 96       	adiw	r26, 0x17	; 23
    29e8:	6c 91       	ld	r22, X
    29ea:	80 81       	ld	r24, Z
    29ec:	1c d6       	rcall	.+3128   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    29ee:	88 23       	and	r24, r24
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <_Z14mpu_set_bypassh+0xda>
    29f2:	ba cf       	rjmp	.-140    	; 0x2968 <_Z14mpu_set_bypassh+0x4e>
  st->chip_cfg.bypass_mode = bypass_on;
    29f4:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    29f8:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    29fc:	f5 86       	std	Z+13, r15	; 0x0d
    return 0;
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    if (i2c_read(st->hw->addr, st->reg->user_ctrl, 1, &tmp))
    2a02:	b4 cf       	rjmp	.-152    	; 0x296c <_Z14mpu_set_bypassh+0x52>
    2a04:	f4 d5       	rcall	.+3048   	; 0x35ee <_ZN6I2Cdev9readBytesEhhhPhj>
    2a06:	88 23       	and	r24, r24
    2a08:	09 f4       	brne	.+2      	; 0x2a0c <_Z14mpu_set_bypassh+0xf2>
    2a0a:	ae cf       	rjmp	.-164    	; 0x2968 <_Z14mpu_set_bypassh+0x4e>
    if (st->chip_cfg.sensors & INV_XYZ_COMPASS)
    2a0c:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2a10:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	96 81       	ldd	r25, Z+6	; 0x06
    2a18:	90 ff       	sbrs	r25, 0
    2a1a:	21 c0       	rjmp	.+66     	; 0x2a5e <_Z14mpu_set_bypassh+0x144>
      tmp |= BIT_AUX_IF_EN;
    2a1c:	80 62       	ori	r24, 0x20	; 32
      tmp &= ~BIT_AUX_IF_EN;
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    if (i2c_write(st->hw->addr, st->reg->user_ctrl, 1, &tmp))
    2a20:	a0 81       	ld	r26, Z
    2a22:	b1 81       	ldd	r27, Z+1	; 0x01
    2a24:	02 80       	ldd	r0, Z+2	; 0x02
    2a26:	f3 81       	ldd	r31, Z+3	; 0x03
    2a28:	e0 2d       	mov	r30, r0
    2a2a:	9e 01       	movw	r18, r28
    2a2c:	2f 5f       	subi	r18, 0xFF	; 255
    2a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a30:	41 e0       	ldi	r20, 0x01	; 1
    2a32:	14 96       	adiw	r26, 0x04	; 4
    2a34:	6c 91       	ld	r22, X
    2a36:	80 81       	ld	r24, Z
    2a38:	f6 d5       	rcall	.+3052   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2a3a:	88 23       	and	r24, r24
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <_Z14mpu_set_bypassh+0x126>
    2a3e:	94 cf       	rjmp	.-216    	; 0x2968 <_Z14mpu_set_bypassh+0x4e>
    2a40:	8f e6       	ldi	r24, 0x6F	; 111
    2a42:	97 e1       	ldi	r25, 0x17	; 23
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <_Z14mpu_set_bypassh+0x12a>
    2a48:	00 c0       	rjmp	.+0      	; 0x2a4a <_Z14mpu_set_bypassh+0x130>
    2a4a:	00 00       	nop
    if (st->chip_cfg.active_low_int)
    2a4c:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2a50:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2a54:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a56:	88 23       	and	r24, r24
    2a58:	21 f0       	breq	.+8      	; 0x2a62 <_Z14mpu_set_bypassh+0x148>
      tmp = BIT_ACTL;
    2a5a:	80 e8       	ldi	r24, 0x80	; 128
    2a5c:	b4 cf       	rjmp	.-152    	; 0x29c6 <_Z14mpu_set_bypassh+0xac>
      tmp &= ~BIT_AUX_IF_EN;
    2a5e:	8f 7d       	andi	r24, 0xDF	; 223
    2a60:	de cf       	rjmp	.-68     	; 0x2a1e <_Z14mpu_set_bypassh+0x104>
      tmp = 0;
    2a62:	19 82       	std	Y+1, r1	; 0x01
    2a64:	b1 cf       	rjmp	.-158    	; 0x29c8 <_Z14mpu_set_bypassh+0xae>

00002a66 <_Z19mpu_set_int_latchedh>:
 *  @brief      Enable latched interrupts.
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable) {
    2a66:	1f 93       	push	r17
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	0f 92       	push	r0
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	18 2f       	mov	r17, r24
  unsigned char tmp;
  if (st->chip_cfg.latched_int == enable)
    2a74:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2a78:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2a7c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a7e:	81 17       	cp	r24, r17
    2a80:	21 f1       	breq	.+72     	; 0x2aca <_Z19mpu_set_int_latchedh+0x64>
    return 0;

  if (enable)
    2a82:	11 23       	and	r17, r17
    2a84:	49 f1       	breq	.+82     	; 0x2ad8 <_Z19mpu_set_int_latchedh+0x72>
    tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
    2a86:	80 e3       	ldi	r24, 0x30	; 48
    2a88:	89 83       	std	Y+1, r24	; 0x01
  else
    tmp = 0;
  if (st->chip_cfg.bypass_mode)
    2a8a:	85 85       	ldd	r24, Z+13	; 0x0d
    2a8c:	88 23       	and	r24, r24
    2a8e:	19 f0       	breq	.+6      	; 0x2a96 <_Z19mpu_set_int_latchedh+0x30>
    tmp |= BIT_BYPASS_EN;
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	82 60       	ori	r24, 0x02	; 2
    2a94:	89 83       	std	Y+1, r24	; 0x01
  if (st->chip_cfg.active_low_int)
    2a96:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a98:	88 23       	and	r24, r24
    2a9a:	19 f0       	breq	.+6      	; 0x2aa2 <_Z19mpu_set_int_latchedh+0x3c>
    tmp |= BIT_ACTL;
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	80 68       	ori	r24, 0x80	; 128
    2aa0:	89 83       	std	Y+1, r24	; 0x01
  if (i2c_write(st->hw->addr, st->reg->int_pin_cfg, 1, &tmp))
    2aa2:	a0 81       	ld	r26, Z
    2aa4:	b1 81       	ldd	r27, Z+1	; 0x01
    2aa6:	02 80       	ldd	r0, Z+2	; 0x02
    2aa8:	f3 81       	ldd	r31, Z+3	; 0x03
    2aaa:	e0 2d       	mov	r30, r0
    2aac:	9e 01       	movw	r18, r28
    2aae:	2f 5f       	subi	r18, 0xFF	; 255
    2ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab2:	41 e0       	ldi	r20, 0x01	; 1
    2ab4:	57 96       	adiw	r26, 0x17	; 23
    2ab6:	6c 91       	ld	r22, X
    2ab8:	80 81       	ld	r24, Z
    2aba:	b5 d5       	rcall	.+2922   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2abc:	88 23       	and	r24, r24
    2abe:	71 f0       	breq	.+28     	; 0x2adc <_Z19mpu_set_int_latchedh+0x76>
    return -1;
  st->chip_cfg.latched_int = enable;
    2ac0:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2ac4:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2ac8:	14 8f       	std	Z+28, r17	; 0x1c
    return 0;
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	80 e0       	ldi	r24, 0x00	; 0
  return 0;
}
    2ace:	0f 90       	pop	r0
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    2ad4:	1f 91       	pop	r17
    2ad6:	08 95       	ret
    tmp = 0;
    2ad8:	19 82       	std	Y+1, r1	; 0x01
    2ada:	d7 cf       	rjmp	.-82     	; 0x2a8a <_Z19mpu_set_int_latchedh+0x24>
    return -1;
    2adc:	8f ef       	ldi	r24, 0xFF	; 255
    2ade:	9f ef       	ldi	r25, 0xFF	; 255
    2ae0:	f6 cf       	rjmp	.-20     	; 0x2ace <_Z19mpu_set_int_latchedh+0x68>

00002ae2 <_Z17mpu_lp_accel_modeh>:
int mpu_lp_accel_mode(unsigned char rate) {
    2ae2:	1f 93       	push	r17
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <_Z17mpu_lp_accel_modeh+0x8>
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	18 2f       	mov	r17, r24
  if (rate > 40)
    2af0:	89 32       	cpi	r24, 0x29	; 41
    2af2:	40 f0       	brcs	.+16     	; 0x2b04 <_Z17mpu_lp_accel_modeh+0x22>
    return -1;
    2af4:	8f ef       	ldi	r24, 0xFF	; 255
    2af6:	9f ef       	ldi	r25, 0xFF	; 255
}
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	df 91       	pop	r29
    2afe:	cf 91       	pop	r28
    2b00:	1f 91       	pop	r17
    2b02:	08 95       	ret
  if (!rate) {
    2b04:	81 11       	cpse	r24, r1
    2b06:	20 c0       	rjmp	.+64     	; 0x2b48 <_Z17mpu_lp_accel_modeh+0x66>
    mpu_set_int_latched(0);
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	ad df       	rcall	.-166    	; 0x2a66 <_Z19mpu_set_int_latchedh>
    tmp[0] = 0;
    2b0c:	19 82       	std	Y+1, r1	; 0x01
    tmp[1] = BIT_STBY_XYZG;
    2b0e:	87 e0       	ldi	r24, 0x07	; 7
    2b10:	8a 83       	std	Y+2, r24	; 0x02
    if (i2c_write(st->hw->addr, st->reg->pwr_mgmt_1, 2, tmp))
    2b12:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2b16:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2b1a:	a0 81       	ld	r26, Z
    2b1c:	b1 81       	ldd	r27, Z+1	; 0x01
    2b1e:	02 80       	ldd	r0, Z+2	; 0x02
    2b20:	f3 81       	ldd	r31, Z+3	; 0x03
    2b22:	e0 2d       	mov	r30, r0
    2b24:	9e 01       	movw	r18, r28
    2b26:	2f 5f       	subi	r18, 0xFF	; 255
    2b28:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2a:	42 e0       	ldi	r20, 0x02	; 2
    2b2c:	55 96       	adiw	r26, 0x15	; 21
    2b2e:	6c 91       	ld	r22, X
    2b30:	80 81       	ld	r24, Z
    2b32:	79 d5       	rcall	.+2802   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2b34:	88 23       	and	r24, r24
    2b36:	f1 f2       	breq	.-68     	; 0x2af4 <_Z17mpu_lp_accel_modeh+0x12>
    st->chip_cfg.lp_accel_mode = 0;
    2b38:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2b3c:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2b40:	17 86       	std	Z+15, r1	; 0x0f
  return 0;
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	80 e0       	ldi	r24, 0x00	; 0
  mpu_set_int_latched(1);
    2b46:	d8 cf       	rjmp	.-80     	; 0x2af8 <_Z17mpu_lp_accel_modeh+0x16>
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	8d df       	rcall	.-230    	; 0x2a66 <_Z19mpu_set_int_latchedh>
  tmp[0] = BIT_LPA_CYCLE;
    2b4c:	80 e2       	ldi	r24, 0x20	; 32
    2b4e:	89 83       	std	Y+1, r24	; 0x01
  if (rate == 1) {
    2b50:	11 30       	cpi	r17, 0x01	; 1
    2b52:	59 f5       	brne	.+86     	; 0x2baa <_Z17mpu_lp_accel_modeh+0xc8>
    mpu_set_lpf(5);
    2b54:	1a 82       	std	Y+2, r1	; 0x02
    2b56:	85 e0       	ldi	r24, 0x05	; 5
    mpu_set_lpf(20);
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	4d de       	rcall	.-870    	; 0x27f6 <_Z11mpu_set_lpft>
  tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	20 e4       	ldi	r18, 0x40	; 64
    2b60:	82 9f       	mul	r24, r18
    2b62:	c0 01       	movw	r24, r0
    2b64:	11 24       	eor	r1, r1
    2b66:	87 60       	ori	r24, 0x07	; 7
    2b68:	8a 83       	std	Y+2, r24	; 0x02
  if (i2c_write(st->hw->addr, st->reg->pwr_mgmt_1, 2, tmp))
    2b6a:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2b6e:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2b72:	a0 81       	ld	r26, Z
    2b74:	b1 81       	ldd	r27, Z+1	; 0x01
    2b76:	02 80       	ldd	r0, Z+2	; 0x02
    2b78:	f3 81       	ldd	r31, Z+3	; 0x03
    2b7a:	e0 2d       	mov	r30, r0
    2b7c:	9e 01       	movw	r18, r28
    2b7e:	2f 5f       	subi	r18, 0xFF	; 255
    2b80:	3f 4f       	sbci	r19, 0xFF	; 255
    2b82:	42 e0       	ldi	r20, 0x02	; 2
    2b84:	55 96       	adiw	r26, 0x15	; 21
    2b86:	6c 91       	ld	r22, X
    2b88:	80 81       	ld	r24, Z
    2b8a:	4d d5       	rcall	.+2714   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2b8c:	88 23       	and	r24, r24
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <_Z17mpu_lp_accel_modeh+0xb0>
    2b90:	b1 cf       	rjmp	.-158    	; 0x2af4 <_Z17mpu_lp_accel_modeh+0x12>
  st->chip_cfg.sensors = INV_XYZ_ACCEL;
    2b92:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2b96:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2b9a:	88 e0       	ldi	r24, 0x08	; 8
  st->chip_cfg.clk_src = 0;
    2b9c:	86 83       	std	Z+6, r24	; 0x06
  st->chip_cfg.lp_accel_mode = 1;
    2b9e:	10 86       	std	Z+8, r1	; 0x08
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
  mpu_configure_fifo(0);
    2ba2:	87 87       	std	Z+15, r24	; 0x0f
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	6f de       	rcall	.-802    	; 0x2886 <_Z18mpu_configure_fifoh>
    2ba8:	cc cf       	rjmp	.-104    	; 0x2b42 <_Z17mpu_lp_accel_modeh+0x60>
  } else if (rate <= 5) {
    2baa:	16 30       	cpi	r17, 0x06	; 6
    2bac:	18 f4       	brcc	.+6      	; 0x2bb4 <_Z17mpu_lp_accel_modeh+0xd2>
    tmp[1] = INV_LPA_5HZ;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	8a 83       	std	Y+2, r24	; 0x02
    2bb2:	d1 cf       	rjmp	.-94     	; 0x2b56 <_Z17mpu_lp_accel_modeh+0x74>
  } else if (rate <= 20) {
    2bb4:	15 31       	cpi	r17, 0x15	; 21
    2bb6:	28 f4       	brcc	.+10     	; 0x2bc2 <_Z17mpu_lp_accel_modeh+0xe0>
    tmp[1] = INV_LPA_20HZ;
    2bb8:	82 e0       	ldi	r24, 0x02	; 2
    2bba:	8a 83       	std	Y+2, r24	; 0x02
    mpu_set_lpf(10);
    2bbc:	8a e0       	ldi	r24, 0x0A	; 10
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	cc cf       	rjmp	.-104    	; 0x2b5a <_Z17mpu_lp_accel_modeh+0x78>
    tmp[1] = INV_LPA_40HZ;
    2bc2:	83 e0       	ldi	r24, 0x03	; 3
    2bc4:	8a 83       	std	Y+2, r24	; 0x02
    mpu_set_lpf(20);
    2bc6:	84 e1       	ldi	r24, 0x14	; 20
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	c7 cf       	rjmp	.-114    	; 0x2b5a <_Z17mpu_lp_accel_modeh+0x78>

00002bcc <_Z19mpu_set_sample_ratet>:
int mpu_set_sample_rate(unsigned short rate) {
    2bcc:	0f 93       	push	r16
    2bce:	1f 93       	push	r17
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	0f 92       	push	r0
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	8c 01       	movw	r16, r24
  if (!(st->chip_cfg.sensors))
    2bdc:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2be0:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2be4:	86 81       	ldd	r24, Z+6	; 0x06
    2be6:	81 11       	cpse	r24, r1
    2be8:	08 c0       	rjmp	.+16     	; 0x2bfa <_Z19mpu_set_sample_ratet+0x2e>
    return -1;
    2bea:	8f ef       	ldi	r24, 0xFF	; 255
    2bec:	9f ef       	ldi	r25, 0xFF	; 255
}
    2bee:	0f 90       	pop	r0
    2bf0:	df 91       	pop	r29
    2bf2:	cf 91       	pop	r28
    2bf4:	1f 91       	pop	r17
    2bf6:	0f 91       	pop	r16
    2bf8:	08 95       	ret
  if (st->chip_cfg.dmp_on)
    2bfa:	85 8d       	ldd	r24, Z+29	; 0x1d
    2bfc:	81 11       	cpse	r24, r1
    2bfe:	f5 cf       	rjmp	.-22     	; 0x2bea <_Z19mpu_set_sample_ratet+0x1e>
    if (st->chip_cfg.lp_accel_mode) {
    2c00:	87 85       	ldd	r24, Z+15	; 0x0f
    2c02:	88 23       	and	r24, r24
    2c04:	59 f0       	breq	.+22     	; 0x2c1c <_Z19mpu_set_sample_ratet+0x50>
      if (rate && (rate <= 40)) {
    2c06:	c8 01       	movw	r24, r16
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	88 97       	sbiw	r24, 0x28	; 40
    2c0c:	28 f4       	brcc	.+10     	; 0x2c18 <_Z19mpu_set_sample_ratet+0x4c>
        mpu_lp_accel_mode(rate);
    2c0e:	80 2f       	mov	r24, r16
    2c10:	68 df       	rcall	.-304    	; 0x2ae2 <_Z17mpu_lp_accel_modeh>
    return 0;
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	eb cf       	rjmp	.-42     	; 0x2bee <_Z19mpu_set_sample_ratet+0x22>
      mpu_lp_accel_mode(0);
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	63 df       	rcall	.-314    	; 0x2ae2 <_Z17mpu_lp_accel_modeh>
    if (rate < 4)
    2c1c:	b8 01       	movw	r22, r16
    2c1e:	09 3e       	cpi	r16, 0xE9	; 233
    2c20:	13 40       	sbci	r17, 0x03	; 3
    2c22:	10 f0       	brcs	.+4      	; 0x2c28 <_Z19mpu_set_sample_ratet+0x5c>
    2c24:	68 ee       	ldi	r22, 0xE8	; 232
    2c26:	73 e0       	ldi	r23, 0x03	; 3
    data = 1000 / rate - 1;
    2c28:	64 30       	cpi	r22, 0x04	; 4
    2c2a:	71 05       	cpc	r23, r1
    2c2c:	10 f4       	brcc	.+4      	; 0x2c32 <_Z19mpu_set_sample_ratet+0x66>
    2c2e:	64 e0       	ldi	r22, 0x04	; 4
    2c30:	70 e0       	ldi	r23, 0x00	; 0
    2c32:	08 ee       	ldi	r16, 0xE8	; 232
    2c34:	13 e0       	ldi	r17, 0x03	; 3
    2c36:	c8 01       	movw	r24, r16
    2c38:	0e 94 b7 23 	call	0x476e	; 0x476e <__udivmodhi4>
    2c3c:	61 50       	subi	r22, 0x01	; 1
    2c3e:	69 83       	std	Y+1, r22	; 0x01
    if (i2c_write(st->hw->addr, st->reg->rate_div, 1, &data))
    2c40:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2c44:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2c48:	a0 81       	ld	r26, Z
    2c4a:	b1 81       	ldd	r27, Z+1	; 0x01
    2c4c:	02 80       	ldd	r0, Z+2	; 0x02
    2c4e:	f3 81       	ldd	r31, Z+3	; 0x03
    2c50:	e0 2d       	mov	r30, r0
    2c52:	9e 01       	movw	r18, r28
    2c54:	2f 5f       	subi	r18, 0xFF	; 255
    2c56:	3f 4f       	sbci	r19, 0xFF	; 255
    2c58:	41 e0       	ldi	r20, 0x01	; 1
    2c5a:	11 96       	adiw	r26, 0x01	; 1
    2c5c:	6c 91       	ld	r22, X
    2c5e:	80 81       	ld	r24, Z
    2c60:	e2 d4       	rcall	.+2500   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2c62:	88 23       	and	r24, r24
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <_Z19mpu_set_sample_ratet+0x9c>
    2c66:	c1 cf       	rjmp	.-126    	; 0x2bea <_Z19mpu_set_sample_ratet+0x1e>
    st->chip_cfg.sample_rate = 1000 / (1 + data);
    2c68:	69 81       	ldd	r22, Y+1	; 0x01
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	6f 5f       	subi	r22, 0xFF	; 255
    2c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c70:	c8 01       	movw	r24, r16
    2c72:	0e 94 cb 23 	call	0x4796	; 0x4796 <__divmodhi4>
    2c76:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2c7a:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2c7e:	72 87       	std	Z+10, r23	; 0x0a
    2c80:	61 87       	std	Z+9, r22	; 0x09
    mpu_set_lpf(st->chip_cfg.sample_rate >> 1);
    2c82:	cb 01       	movw	r24, r22
    2c84:	96 95       	lsr	r25
    2c86:	87 95       	ror	r24
    2c88:	b6 dd       	rcall	.-1172   	; 0x27f6 <_Z11mpu_set_lpft>
    2c8a:	c3 cf       	rjmp	.-122    	; 0x2c12 <_Z19mpu_set_sample_ratet+0x46>

00002c8c <_Z15mpu_set_sensorsh>:
int mpu_set_sensors(unsigned char sensors) {
    2c8c:	1f 93       	push	r17
    2c8e:	cf 93       	push	r28
    2c90:	df 93       	push	r29
    2c92:	0f 92       	push	r0
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	18 2f       	mov	r17, r24
  if (sensors & INV_XYZ_GYRO)
    2c9a:	80 77       	andi	r24, 0x70	; 112
    2c9c:	19 f0       	breq	.+6      	; 0x2ca4 <_Z15mpu_set_sensorsh+0x18>
    data = INV_CLK_PLL;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    data = BIT_SLEEP;
    2ca0:	89 83       	std	Y+1, r24	; 0x01
    2ca2:	03 c0       	rjmp	.+6      	; 0x2caa <_Z15mpu_set_sensorsh+0x1e>
  else if (sensors)
    2ca4:	11 23       	and	r17, r17
    2ca6:	01 f1       	breq	.+64     	; 0x2ce8 <_Z15mpu_set_sensorsh+0x5c>
    data = 0;
    2ca8:	19 82       	std	Y+1, r1	; 0x01
  if (i2c_write(st->hw->addr, st->reg->pwr_mgmt_1, 1, &data)) {
    2caa:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2cae:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2cb2:	a0 81       	ld	r26, Z
    2cb4:	b1 81       	ldd	r27, Z+1	; 0x01
    2cb6:	02 80       	ldd	r0, Z+2	; 0x02
    2cb8:	f3 81       	ldd	r31, Z+3	; 0x03
    2cba:	e0 2d       	mov	r30, r0
    2cbc:	9e 01       	movw	r18, r28
    2cbe:	2f 5f       	subi	r18, 0xFF	; 255
    2cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc2:	41 e0       	ldi	r20, 0x01	; 1
    2cc4:	55 96       	adiw	r26, 0x15	; 21
    2cc6:	6c 91       	ld	r22, X
    2cc8:	80 81       	ld	r24, Z
    2cca:	ad d4       	rcall	.+2394   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2ccc:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2cd0:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2cd4:	81 11       	cpse	r24, r1
    2cd6:	0a c0       	rjmp	.+20     	; 0x2cec <_Z15mpu_set_sensorsh+0x60>
    st->chip_cfg.sensors = 0;
    2cd8:	16 82       	std	Z+6, r1	; 0x06
    return -1;
    2cda:	8f ef       	ldi	r24, 0xFF	; 255
    2cdc:	9f ef       	ldi	r25, 0xFF	; 255
}
    2cde:	0f 90       	pop	r0
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	1f 91       	pop	r17
    2ce6:	08 95       	ret
    data = BIT_SLEEP;
    2ce8:	80 e4       	ldi	r24, 0x40	; 64
    2cea:	da cf       	rjmp	.-76     	; 0x2ca0 <_Z15mpu_set_sensorsh+0x14>
  st->chip_cfg.clk_src = data & ~BIT_SLEEP;
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	8f 7b       	andi	r24, 0xBF	; 191
    2cf0:	80 87       	std	Z+8, r24	; 0x08
  if (!(sensors & INV_X_GYRO))
    2cf2:	16 ff       	sbrs	r17, 6
    2cf4:	24 c0       	rjmp	.+72     	; 0x2d3e <_Z15mpu_set_sensorsh+0xb2>
  data = 0;
    2cf6:	19 82       	std	Y+1, r1	; 0x01
  if (!(sensors & INV_Y_GYRO))
    2cf8:	15 fd       	sbrc	r17, 5
    2cfa:	03 c0       	rjmp	.+6      	; 0x2d02 <_Z15mpu_set_sensorsh+0x76>
    data |= BIT_STBY_YG;
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	82 60       	ori	r24, 0x02	; 2
    2d00:	89 83       	std	Y+1, r24	; 0x01
  if (!(sensors & INV_Z_GYRO))
    2d02:	14 fd       	sbrc	r17, 4
    2d04:	03 c0       	rjmp	.+6      	; 0x2d0c <_Z15mpu_set_sensorsh+0x80>
    data |= BIT_STBY_ZG;
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	81 60       	ori	r24, 0x01	; 1
    2d0a:	89 83       	std	Y+1, r24	; 0x01
  if (!(sensors & INV_XYZ_ACCEL))
    2d0c:	13 fd       	sbrc	r17, 3
    2d0e:	03 c0       	rjmp	.+6      	; 0x2d16 <_Z15mpu_set_sensorsh+0x8a>
    data |= BIT_STBY_XYZA;
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	88 63       	ori	r24, 0x38	; 56
    2d14:	89 83       	std	Y+1, r24	; 0x01
  if (i2c_write(st->hw->addr, st->reg->pwr_mgmt_2, 1, &data)) {
    2d16:	a0 81       	ld	r26, Z
    2d18:	b1 81       	ldd	r27, Z+1	; 0x01
    2d1a:	02 80       	ldd	r0, Z+2	; 0x02
    2d1c:	f3 81       	ldd	r31, Z+3	; 0x03
    2d1e:	e0 2d       	mov	r30, r0
    2d20:	9e 01       	movw	r18, r28
    2d22:	2f 5f       	subi	r18, 0xFF	; 255
    2d24:	3f 4f       	sbci	r19, 0xFF	; 255
    2d26:	41 e0       	ldi	r20, 0x01	; 1
    2d28:	56 96       	adiw	r26, 0x16	; 22
    2d2a:	6c 91       	ld	r22, X
    2d2c:	80 81       	ld	r24, Z
    2d2e:	7b d4       	rcall	.+2294   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2d30:	81 11       	cpse	r24, r1
    2d32:	08 c0       	rjmp	.+16     	; 0x2d44 <_Z15mpu_set_sensorsh+0xb8>
    st->chip_cfg.sensors = 0;
    2d34:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2d38:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2d3c:	cd cf       	rjmp	.-102    	; 0x2cd8 <_Z15mpu_set_sensorsh+0x4c>
    data |= BIT_STBY_XG;
    2d3e:	84 e0       	ldi	r24, 0x04	; 4
    2d40:	89 83       	std	Y+1, r24	; 0x01
    2d42:	da cf       	rjmp	.-76     	; 0x2cf8 <_Z15mpu_set_sensorsh+0x6c>
  if (sensors && (sensors != INV_XYZ_ACCEL))
    2d44:	81 2f       	mov	r24, r17
    2d46:	87 7f       	andi	r24, 0xF7	; 247
    mpu_set_int_latched(0);
    2d48:	11 f0       	breq	.+4      	; 0x2d4e <_Z15mpu_set_sensorsh+0xc2>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	8c de       	rcall	.-744    	; 0x2a66 <_Z19mpu_set_int_latchedh>
  st->chip_cfg.sensors = sensors;
    2d4e:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2d52:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2d56:	16 83       	std	Z+6, r17	; 0x06
  st->chip_cfg.lp_accel_mode = 0;
    2d58:	17 86       	std	Z+15, r1	; 0x0f
    2d5a:	2f e7       	ldi	r18, 0x7F	; 127
    2d5c:	88 e3       	ldi	r24, 0x38	; 56
    2d5e:	91 e0       	ldi	r25, 0x01	; 1
    2d60:	21 50       	subi	r18, 0x01	; 1
    2d62:	80 40       	sbci	r24, 0x00	; 0
    2d64:	90 40       	sbci	r25, 0x00	; 0
    2d66:	e1 f7       	brne	.-8      	; 0x2d60 <_Z15mpu_set_sensorsh+0xd4>
    2d68:	00 c0       	rjmp	.+0      	; 0x2d6a <_Z15mpu_set_sensorsh+0xde>
    2d6a:	00 00       	nop
  return 0;
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	b6 cf       	rjmp	.-148    	; 0x2cde <_Z15mpu_set_sensorsh+0x52>

00002d72 <_Z8mpu_initP11int_param_s>:
int mpu_init(struct int_param_s *int_param) {
    2d72:	0f 93       	push	r16
    2d74:	1f 93       	push	r17
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <_Z8mpu_initP11int_param_s+0xa>
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <_Z8mpu_initP11int_param_s+0xc>
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <_Z8mpu_initP11int_param_s+0xe>
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
  data[0] = BIT_RESET;
    2d84:	80 e8       	ldi	r24, 0x80	; 128
    2d86:	89 83       	std	Y+1, r24	; 0x01
  if (i2c_write(st->hw->addr, st->reg->pwr_mgmt_1, 1, data))
    2d88:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2d8c:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2d90:	a0 81       	ld	r26, Z
    2d92:	b1 81       	ldd	r27, Z+1	; 0x01
    2d94:	02 80       	ldd	r0, Z+2	; 0x02
    2d96:	f3 81       	ldd	r31, Z+3	; 0x03
    2d98:	e0 2d       	mov	r30, r0
    2d9a:	9e 01       	movw	r18, r28
    2d9c:	2f 5f       	subi	r18, 0xFF	; 255
    2d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2da0:	41 e0       	ldi	r20, 0x01	; 1
    2da2:	55 96       	adiw	r26, 0x15	; 21
    2da4:	6c 91       	ld	r22, X
    2da6:	80 81       	ld	r24, Z
    2da8:	3e d4       	rcall	.+2172   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    return -1;
    2daa:	0f ef       	ldi	r16, 0xFF	; 255
    2dac:	1f ef       	ldi	r17, 0xFF	; 255
  if (i2c_write(st->hw->addr, st->reg->pwr_mgmt_1, 1, data))
    2dae:	88 23       	and	r24, r24
    2db0:	09 f4       	brne	.+2      	; 0x2db4 <_Z8mpu_initP11int_param_s+0x42>
    2db2:	ca c0       	rjmp	.+404    	; 0x2f48 <_Z8mpu_initP11int_param_s+0x1d6>
    2db4:	2f ef       	ldi	r18, 0xFF	; 255
    2db6:	80 e7       	ldi	r24, 0x70	; 112
    2db8:	92 e0       	ldi	r25, 0x02	; 2
    2dba:	21 50       	subi	r18, 0x01	; 1
    2dbc:	80 40       	sbci	r24, 0x00	; 0
    2dbe:	90 40       	sbci	r25, 0x00	; 0
    2dc0:	e1 f7       	brne	.-8      	; 0x2dba <_Z8mpu_initP11int_param_s+0x48>
    2dc2:	00 c0       	rjmp	.+0      	; 0x2dc4 <_Z8mpu_initP11int_param_s+0x52>
    2dc4:	00 00       	nop
  data[0] = 0x00;
    2dc6:	19 82       	std	Y+1, r1	; 0x01
  if (i2c_write(st->hw->addr, st->reg->pwr_mgmt_1, 1, data))
    2dc8:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2dcc:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2dd0:	a0 81       	ld	r26, Z
    2dd2:	b1 81       	ldd	r27, Z+1	; 0x01
    2dd4:	02 80       	ldd	r0, Z+2	; 0x02
    2dd6:	f3 81       	ldd	r31, Z+3	; 0x03
    2dd8:	e0 2d       	mov	r30, r0
    2dda:	9e 01       	movw	r18, r28
    2ddc:	2f 5f       	subi	r18, 0xFF	; 255
    2dde:	3f 4f       	sbci	r19, 0xFF	; 255
    2de0:	41 e0       	ldi	r20, 0x01	; 1
    2de2:	55 96       	adiw	r26, 0x15	; 21
    2de4:	6c 91       	ld	r22, X
    2de6:	80 81       	ld	r24, Z
    2de8:	1e d4       	rcall	.+2108   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    return -2;
    2dea:	0e ef       	ldi	r16, 0xFE	; 254
    2dec:	1f ef       	ldi	r17, 0xFF	; 255
  if (i2c_write(st->hw->addr, st->reg->pwr_mgmt_1, 1, data))
    2dee:	88 23       	and	r24, r24
    2df0:	09 f4       	brne	.+2      	; 0x2df4 <_Z8mpu_initP11int_param_s+0x82>
    2df2:	aa c0       	rjmp	.+340    	; 0x2f48 <_Z8mpu_initP11int_param_s+0x1d6>
  if (i2c_read(st->hw->addr, st->reg->accel_offs, 6, data))
    2df4:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2df8:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2dfc:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_ZN6I2Cdev11readTimeoutE>
    2e00:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_ZN6I2Cdev11readTimeoutE+0x1>
    2e04:	a0 81       	ld	r26, Z
    2e06:	b1 81       	ldd	r27, Z+1	; 0x01
    2e08:	02 80       	ldd	r0, Z+2	; 0x02
    2e0a:	f3 81       	ldd	r31, Z+3	; 0x03
    2e0c:	e0 2d       	mov	r30, r0
    2e0e:	9e 01       	movw	r18, r28
    2e10:	2f 5f       	subi	r18, 0xFF	; 255
    2e12:	3f 4f       	sbci	r19, 0xFF	; 255
    2e14:	46 e0       	ldi	r20, 0x06	; 6
    2e16:	59 96       	adiw	r26, 0x19	; 25
    2e18:	6c 91       	ld	r22, X
    2e1a:	80 81       	ld	r24, Z
    2e1c:	e8 d3       	rcall	.+2000   	; 0x35ee <_ZN6I2Cdev9readBytesEhhhPhj>
    return -3;
    2e1e:	0d ef       	ldi	r16, 0xFD	; 253
    2e20:	1f ef       	ldi	r17, 0xFF	; 255
  if (i2c_read(st->hw->addr, st->reg->accel_offs, 6, data))
    2e22:	88 23       	and	r24, r24
    2e24:	09 f4       	brne	.+2      	; 0x2e28 <_Z8mpu_initP11int_param_s+0xb6>
    2e26:	90 c0       	rjmp	.+288    	; 0x2f48 <_Z8mpu_initP11int_param_s+0x1d6>
  rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) | (data[1] & 0x01);
    2e28:	8e 81       	ldd	r24, Y+6	; 0x06
    2e2a:	a4 e0       	ldi	r26, 0x04	; 4
    2e2c:	8a 9f       	mul	r24, r26
    2e2e:	c0 01       	movw	r24, r0
    2e30:	11 24       	eor	r1, r1
    2e32:	84 70       	andi	r24, 0x04	; 4
    2e34:	9c 81       	ldd	r25, Y+4	; 0x04
    2e36:	99 0f       	add	r25, r25
    2e38:	92 70       	andi	r25, 0x02	; 2
    2e3a:	89 2b       	or	r24, r25
    2e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3e:	91 70       	andi	r25, 0x01	; 1
    2e40:	89 2b       	or	r24, r25
  if (rev) {
    2e42:	81 f0       	breq	.+32     	; 0x2e64 <_Z8mpu_initP11int_param_s+0xf2>
      st->chip_cfg.accel_half = 1;
    2e44:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2e48:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    if (rev == 1)
    2e4c:	81 30       	cpi	r24, 0x01	; 1
    2e4e:	91 f1       	breq	.+100    	; 0x2eb4 <_Z8mpu_initP11int_param_s+0x142>
      st->chip_cfg.accel_half = 0;
    2e50:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2e54:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    else if (rev == 2)
    2e58:	82 30       	cpi	r24, 0x02	; 2
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <_Z8mpu_initP11int_param_s+0xec>
    2e5c:	81 c0       	rjmp	.+258    	; 0x2f60 <_Z8mpu_initP11int_param_s+0x1ee>
      return -4;
    2e5e:	0c ef       	ldi	r16, 0xFC	; 252
    2e60:	1f ef       	ldi	r17, 0xFF	; 255
    2e62:	72 c0       	rjmp	.+228    	; 0x2f48 <_Z8mpu_initP11int_param_s+0x1d6>
    if (i2c_read(st->hw->addr, st->reg->prod_id, 1, data))
    2e64:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2e68:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2e6c:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_ZN6I2Cdev11readTimeoutE>
    2e70:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_ZN6I2Cdev11readTimeoutE+0x1>
    2e74:	a0 81       	ld	r26, Z
    2e76:	b1 81       	ldd	r27, Z+1	; 0x01
    2e78:	02 80       	ldd	r0, Z+2	; 0x02
    2e7a:	f3 81       	ldd	r31, Z+3	; 0x03
    2e7c:	e0 2d       	mov	r30, r0
    2e7e:	9e 01       	movw	r18, r28
    2e80:	2f 5f       	subi	r18, 0xFF	; 255
    2e82:	3f 4f       	sbci	r19, 0xFF	; 255
    2e84:	41 e0       	ldi	r20, 0x01	; 1
    2e86:	13 96       	adiw	r26, 0x03	; 3
    2e88:	6c 91       	ld	r22, X
    2e8a:	80 81       	ld	r24, Z
    2e8c:	b0 d3       	rcall	.+1888   	; 0x35ee <_ZN6I2Cdev9readBytesEhhhPhj>
      return -5;
    2e8e:	0b ef       	ldi	r16, 0xFB	; 251
    2e90:	1f ef       	ldi	r17, 0xFF	; 255
    if (i2c_read(st->hw->addr, st->reg->prod_id, 1, data))
    2e92:	88 23       	and	r24, r24
    2e94:	09 f4       	brne	.+2      	; 0x2e98 <_Z8mpu_initP11int_param_s+0x126>
    2e96:	58 c0       	rjmp	.+176    	; 0x2f48 <_Z8mpu_initP11int_param_s+0x1d6>
    rev = data[0] & 0x0F;
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	8f 70       	andi	r24, 0x0F	; 15
      return -6;
    2e9c:	0a ef       	ldi	r16, 0xFA	; 250
    2e9e:	1f ef       	ldi	r17, 0xFF	; 255
    if (!rev) {
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <_Z8mpu_initP11int_param_s+0x132>
    2ea2:	52 c0       	rjmp	.+164    	; 0x2f48 <_Z8mpu_initP11int_param_s+0x1d6>
    } else if (rev == 4) {
    2ea4:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2ea8:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2eac:	84 30       	cpi	r24, 0x04	; 4
    2eae:	09 f0       	breq	.+2      	; 0x2eb2 <_Z8mpu_initP11int_param_s+0x140>
    2eb0:	57 c0       	rjmp	.+174    	; 0x2f60 <_Z8mpu_initP11int_param_s+0x1ee>
      st->chip_cfg.accel_half = 1;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	86 87       	std	Z+14, r24	; 0x0e
  st->chip_cfg.sensors = 0xFF;
    2eb6:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2eba:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2ebe:	8f ef       	ldi	r24, 0xFF	; 255
    2ec0:	86 83       	std	Z+6, r24	; 0x06
  st->chip_cfg.gyro_fsr = 0xFF;
    2ec2:	84 83       	std	Z+4, r24	; 0x04
  st->chip_cfg.accel_fsr = 0xFF;
    2ec4:	85 83       	std	Z+5, r24	; 0x05
  st->chip_cfg.lpf = 0xFF;
    2ec6:	87 83       	std	Z+7, r24	; 0x07
  st->chip_cfg.sample_rate = 0xFFFF;
    2ec8:	2f ef       	ldi	r18, 0xFF	; 255
    2eca:	3f ef       	ldi	r19, 0xFF	; 255
    2ecc:	32 87       	std	Z+10, r19	; 0x0a
    2ece:	21 87       	std	Z+9, r18	; 0x09
  st->chip_cfg.fifo_enable = 0xFF;
    2ed0:	83 87       	std	Z+11, r24	; 0x0b
  st->chip_cfg.bypass_mode = 0xFF;
    2ed2:	85 87       	std	Z+13, r24	; 0x0d
  st->chip_cfg.clk_src = INV_CLK_PLL;
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	80 87       	std	Z+8, r24	; 0x08
  st->chip_cfg.active_low_int = 1;
    2ed8:	83 8f       	std	Z+27, r24	; 0x1b
  st->chip_cfg.latched_int = 0;
    2eda:	14 8e       	std	Z+28, r1	; 0x1c
  st->chip_cfg.int_motion_only = 0;
    2edc:	10 8a       	std	Z+16, r1	; 0x10
  st->chip_cfg.lp_accel_mode = 0;
    2ede:	17 86       	std	Z+15, r1	; 0x0f
  memset(&st->chip_cfg.cache, 0, sizeof(st->chip_cfg.cache));
    2ee0:	9f 01       	movw	r18, r30
    2ee2:	2f 5e       	subi	r18, 0xEF	; 239
    2ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee6:	8a e0       	ldi	r24, 0x0A	; 10
    2ee8:	d9 01       	movw	r26, r18
    2eea:	1d 92       	st	X+, r1
    2eec:	8a 95       	dec	r24
    2eee:	e9 f7       	brne	.-6      	; 0x2eea <_Z8mpu_initP11int_param_s+0x178>
  st->chip_cfg.dmp_on = 0;
    2ef0:	15 8e       	std	Z+29, r1	; 0x1d
  st->chip_cfg.dmp_loaded = 0;
    2ef2:	16 8e       	std	Z+30, r1	; 0x1e
  st->chip_cfg.dmp_sample_rate = 0;
    2ef4:	10 a2       	std	Z+32, r1	; 0x20
  if (mpu_set_gyro_fsr(2000))
    2ef6:	17 8e       	std	Z+31, r1	; 0x1f
    2ef8:	80 ed       	ldi	r24, 0xD0	; 208
    2efa:	97 e0       	ldi	r25, 0x07	; 7
    2efc:	dd db       	rcall	.-2118   	; 0x26b8 <_Z16mpu_set_gyro_fsrt>
    return -10;
    2efe:	06 ef       	ldi	r16, 0xF6	; 246
  if (mpu_set_gyro_fsr(2000))
    2f00:	1f ef       	ldi	r17, 0xFF	; 255
    2f02:	89 2b       	or	r24, r25
  if (mpu_set_accel_fsr(2))
    2f04:	09 f5       	brne	.+66     	; 0x2f48 <_Z8mpu_initP11int_param_s+0x1d6>
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	2a dc       	rcall	.-1964   	; 0x275e <_Z17mpu_set_accel_fsrh>
    return -11;
    2f0a:	05 ef       	ldi	r16, 0xF5	; 245
  if (mpu_set_accel_fsr(2))
    2f0c:	1f ef       	ldi	r17, 0xFF	; 255
    2f0e:	89 2b       	or	r24, r25
  if (mpu_set_lpf(42))
    2f10:	d9 f4       	brne	.+54     	; 0x2f48 <_Z8mpu_initP11int_param_s+0x1d6>
    2f12:	8a e2       	ldi	r24, 0x2A	; 42
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    return -12;
    2f16:	6f dc       	rcall	.-1826   	; 0x27f6 <_Z11mpu_set_lpft>
    2f18:	04 ef       	ldi	r16, 0xF4	; 244
  if (mpu_set_lpf(42))
    2f1a:	1f ef       	ldi	r17, 0xFF	; 255
    2f1c:	89 2b       	or	r24, r25
  if (mpu_set_sample_rate(50))
    2f1e:	a1 f4       	brne	.+40     	; 0x2f48 <_Z8mpu_initP11int_param_s+0x1d6>
    2f20:	82 e3       	ldi	r24, 0x32	; 50
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    return -13;
    2f24:	53 de       	rcall	.-858    	; 0x2bcc <_Z19mpu_set_sample_ratet>
    2f26:	03 ef       	ldi	r16, 0xF3	; 243
  if (mpu_set_sample_rate(50))
    2f28:	1f ef       	ldi	r17, 0xFF	; 255
  if (mpu_configure_fifo(0))
    2f2a:	89 2b       	or	r24, r25
    2f2c:	69 f4       	brne	.+26     	; 0x2f48 <_Z8mpu_initP11int_param_s+0x1d6>
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    return -14;
    2f30:	aa dc       	rcall	.-1708   	; 0x2886 <_Z18mpu_configure_fifoh>
  if (mpu_configure_fifo(0))
    2f32:	02 ef       	ldi	r16, 0xF2	; 242
    2f34:	1f ef       	ldi	r17, 0xFF	; 255
  if (mpu_set_bypass(0))
    2f36:	89 2b       	or	r24, r25
    2f38:	39 f4       	brne	.+14     	; 0x2f48 <_Z8mpu_initP11int_param_s+0x1d6>
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	ee dc       	rcall	.-1572   	; 0x291a <_Z14mpu_set_bypassh>
    2f3e:	8c 01       	movw	r16, r24
    2f40:	89 2b       	or	r24, r25
  mpu_set_sensors(0);
    2f42:	81 f4       	brne	.+32     	; 0x2f64 <_Z8mpu_initP11int_param_s+0x1f2>
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	a2 de       	rcall	.-700    	; 0x2c8c <_Z15mpu_set_sensorsh>
}
    2f48:	c8 01       	movw	r24, r16
    2f4a:	26 96       	adiw	r28, 0x06	; 6
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	1f 91       	pop	r17
    2f5c:	0f 91       	pop	r16
    2f5e:	08 95       	ret
      st->chip_cfg.accel_half = 0;
    2f60:	16 86       	std	Z+14, r1	; 0x0e
    2f62:	a9 cf       	rjmp	.-174    	; 0x2eb6 <_Z8mpu_initP11int_param_s+0x144>
    return -16;
    2f64:	00 ef       	ldi	r16, 0xF0	; 240
    2f66:	1f ef       	ldi	r17, 0xFF	; 255
    2f68:	ef cf       	rjmp	.-34     	; 0x2f48 <_Z8mpu_initP11int_param_s+0x1d6>

00002f6a <_Z13mpu_write_memttPh>:
 *  @param[in]  length      Number of bytes to write.
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
                  unsigned char *data) {
    2f6a:	ef 92       	push	r14
    2f6c:	ff 92       	push	r15
    2f6e:	0f 93       	push	r16
    2f70:	1f 93       	push	r17
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	00 d0       	rcall	.+0      	; 0x2f78 <_Z13mpu_write_memttPh+0xe>
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
    2f7c:	8b 01       	movw	r16, r22
    2f7e:	7a 01       	movw	r14, r20
  unsigned char tmp[2];

  if (!data)
    2f80:	45 2b       	or	r20, r21
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <_Z13mpu_write_memttPh+0x1c>
    2f84:	3f c0       	rjmp	.+126    	; 0x3004 <_Z13mpu_write_memttPh+0x9a>
    return -1;
  if (!st->chip_cfg.sensors)
    2f86:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2f8a:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2f8e:	26 81       	ldd	r18, Z+6	; 0x06
    2f90:	22 23       	and	r18, r18
    2f92:	d9 f1       	breq	.+118    	; 0x300a <_Z13mpu_write_memttPh+0xa0>
    return -2;

  tmp[0] = (unsigned char)(mem_addr >> 8);
    2f94:	38 2f       	mov	r19, r24
    2f96:	29 2f       	mov	r18, r25
    2f98:	3a 83       	std	Y+2, r19	; 0x02
    2f9a:	29 83       	std	Y+1, r18	; 0x01
  tmp[1] = (unsigned char)(mem_addr & 0xFF);

  /* Check bank boundaries. */
  if (tmp[1] + length > st->hw->bank_size)
    2f9c:	a2 81       	ldd	r26, Z+2	; 0x02
    2f9e:	b3 81       	ldd	r27, Z+3	; 0x03
    2fa0:	86 0f       	add	r24, r22
    2fa2:	97 2f       	mov	r25, r23
    2fa4:	91 1d       	adc	r25, r1
    2fa6:	18 96       	adiw	r26, 0x08	; 8
    2fa8:	2d 91       	ld	r18, X+
    2faa:	3c 91       	ld	r19, X
    2fac:	19 97       	sbiw	r26, 0x09	; 9
    2fae:	28 17       	cp	r18, r24
    2fb0:	39 07       	cpc	r19, r25
    2fb2:	70 f1       	brcs	.+92     	; 0x3010 <_Z13mpu_write_memttPh+0xa6>
    return -3;

  if (i2c_write(st->hw->addr, st->reg->bank_sel, 2, tmp))
    2fb4:	01 90       	ld	r0, Z+
    2fb6:	f0 81       	ld	r31, Z
    2fb8:	e0 2d       	mov	r30, r0
    2fba:	9e 01       	movw	r18, r28
    2fbc:	2f 5f       	subi	r18, 0xFF	; 255
    2fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc0:	42 e0       	ldi	r20, 0x02	; 2
    2fc2:	63 8d       	ldd	r22, Z+27	; 0x1b
    2fc4:	8c 91       	ld	r24, X
    2fc6:	2f d3       	rcall	.+1630   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2fc8:	88 23       	and	r24, r24
    2fca:	29 f1       	breq	.+74     	; 0x3016 <_Z13mpu_write_memttPh+0xac>
    return -4;
  if (i2c_write(st->hw->addr, st->reg->mem_r_w, length, data))
    2fcc:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    2fd0:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    2fd4:	a0 81       	ld	r26, Z
    2fd6:	b1 81       	ldd	r27, Z+1	; 0x01
    2fd8:	02 80       	ldd	r0, Z+2	; 0x02
    2fda:	f3 81       	ldd	r31, Z+3	; 0x03
    2fdc:	e0 2d       	mov	r30, r0
    2fde:	97 01       	movw	r18, r14
    2fe0:	40 2f       	mov	r20, r16
    2fe2:	58 96       	adiw	r26, 0x18	; 24
    2fe4:	6c 91       	ld	r22, X
    2fe6:	80 81       	ld	r24, Z
    2fe8:	1e d3       	rcall	.+1596   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    2fea:	81 11       	cpse	r24, r1
    2fec:	17 c0       	rjmp	.+46     	; 0x301c <_Z13mpu_write_memttPh+0xb2>
    return -5;
    2fee:	8b ef       	ldi	r24, 0xFB	; 251
    2ff0:	9f ef       	ldi	r25, 0xFF	; 255
  return 0;
}
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	df 91       	pop	r29
    2ff8:	cf 91       	pop	r28
    2ffa:	1f 91       	pop	r17
    2ffc:	0f 91       	pop	r16
    2ffe:	ff 90       	pop	r15
    3000:	ef 90       	pop	r14
    3002:	08 95       	ret
    return -1;
    3004:	8f ef       	ldi	r24, 0xFF	; 255
    3006:	9f ef       	ldi	r25, 0xFF	; 255
    3008:	f4 cf       	rjmp	.-24     	; 0x2ff2 <_Z13mpu_write_memttPh+0x88>
    return -2;
    300a:	8e ef       	ldi	r24, 0xFE	; 254
    300c:	9f ef       	ldi	r25, 0xFF	; 255
    300e:	f1 cf       	rjmp	.-30     	; 0x2ff2 <_Z13mpu_write_memttPh+0x88>
    return -3;
    3010:	8d ef       	ldi	r24, 0xFD	; 253
    3012:	9f ef       	ldi	r25, 0xFF	; 255
    3014:	ee cf       	rjmp	.-36     	; 0x2ff2 <_Z13mpu_write_memttPh+0x88>
    return -4;
    3016:	8c ef       	ldi	r24, 0xFC	; 252
    3018:	9f ef       	ldi	r25, 0xFF	; 255
    301a:	eb cf       	rjmp	.-42     	; 0x2ff2 <_Z13mpu_write_memttPh+0x88>
  return 0;
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	e8 cf       	rjmp	.-48     	; 0x2ff2 <_Z13mpu_write_memttPh+0x88>

00003022 <_Z12mpu_read_memttPh>:
 *  @param[in]  length      Number of bytes to read.
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
                 unsigned char *data) {
    3022:	cf 92       	push	r12
    3024:	df 92       	push	r13
    3026:	ef 92       	push	r14
    3028:	ff 92       	push	r15
    302a:	0f 93       	push	r16
    302c:	1f 93       	push	r17
    302e:	cf 93       	push	r28
    3030:	df 93       	push	r29
    3032:	00 d0       	rcall	.+0      	; 0x3034 <_Z12mpu_read_memttPh+0x12>
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
    3038:	7b 01       	movw	r14, r22
    303a:	6a 01       	movw	r12, r20
  unsigned char tmp[2];

  if (!data)
    303c:	45 2b       	or	r20, r21
    303e:	69 f4       	brne	.+26     	; 0x305a <_Z12mpu_read_memttPh+0x38>
    return -1;
    3040:	8f ef       	ldi	r24, 0xFF	; 255
    3042:	9f ef       	ldi	r25, 0xFF	; 255
  if (i2c_write(st->hw->addr, st->reg->bank_sel, 2, tmp))
    return -1;
  if (i2c_read(st->hw->addr, st->reg->mem_r_w, length, data))
    return -1;
  return 0;
}
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	1f 91       	pop	r17
    304e:	0f 91       	pop	r16
    3050:	ff 90       	pop	r15
    3052:	ef 90       	pop	r14
    3054:	df 90       	pop	r13
    3056:	cf 90       	pop	r12
    3058:	08 95       	ret
  if (!st->chip_cfg.sensors)
    305a:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    305e:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    3062:	26 81       	ldd	r18, Z+6	; 0x06
    3064:	22 23       	and	r18, r18
    3066:	61 f3       	breq	.-40     	; 0x3040 <_Z12mpu_read_memttPh+0x1e>
  tmp[0] = (unsigned char)(mem_addr >> 8);
    3068:	38 2f       	mov	r19, r24
    306a:	29 2f       	mov	r18, r25
    306c:	3a 83       	std	Y+2, r19	; 0x02
    306e:	29 83       	std	Y+1, r18	; 0x01
  if (tmp[1] + length > st->hw->bank_size)
    3070:	a2 81       	ldd	r26, Z+2	; 0x02
    3072:	b3 81       	ldd	r27, Z+3	; 0x03
    3074:	86 0f       	add	r24, r22
    3076:	97 2f       	mov	r25, r23
    3078:	91 1d       	adc	r25, r1
    307a:	18 96       	adiw	r26, 0x08	; 8
    307c:	2d 91       	ld	r18, X+
    307e:	3c 91       	ld	r19, X
    3080:	19 97       	sbiw	r26, 0x09	; 9
    3082:	28 17       	cp	r18, r24
    3084:	39 07       	cpc	r19, r25
    3086:	e0 f2       	brcs	.-72     	; 0x3040 <_Z12mpu_read_memttPh+0x1e>
  if (i2c_write(st->hw->addr, st->reg->bank_sel, 2, tmp))
    3088:	01 90       	ld	r0, Z+
    308a:	f0 81       	ld	r31, Z
    308c:	e0 2d       	mov	r30, r0
    308e:	9e 01       	movw	r18, r28
    3090:	2f 5f       	subi	r18, 0xFF	; 255
    3092:	3f 4f       	sbci	r19, 0xFF	; 255
    3094:	42 e0       	ldi	r20, 0x02	; 2
    3096:	63 8d       	ldd	r22, Z+27	; 0x1b
    3098:	8c 91       	ld	r24, X
    309a:	c5 d2       	rcall	.+1418   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    309c:	88 23       	and	r24, r24
    309e:	81 f2       	breq	.-96     	; 0x3040 <_Z12mpu_read_memttPh+0x1e>
  if (i2c_read(st->hw->addr, st->reg->mem_r_w, length, data))
    30a0:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    30a4:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    30a8:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_ZN6I2Cdev11readTimeoutE>
    30ac:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_ZN6I2Cdev11readTimeoutE+0x1>
    30b0:	a0 81       	ld	r26, Z
    30b2:	b1 81       	ldd	r27, Z+1	; 0x01
    30b4:	02 80       	ldd	r0, Z+2	; 0x02
    30b6:	f3 81       	ldd	r31, Z+3	; 0x03
    30b8:	e0 2d       	mov	r30, r0
    30ba:	96 01       	movw	r18, r12
    30bc:	4e 2d       	mov	r20, r14
    30be:	58 96       	adiw	r26, 0x18	; 24
    30c0:	6c 91       	ld	r22, X
    30c2:	80 81       	ld	r24, Z
    30c4:	94 d2       	rcall	.+1320   	; 0x35ee <_ZN6I2Cdev9readBytesEhhhPhj>
    30c6:	21 e0       	ldi	r18, 0x01	; 1
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	88 23       	and	r24, r24
    30cc:	11 f0       	breq	.+4      	; 0x30d2 <_Z12mpu_read_memttPh+0xb0>
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	88 27       	eor	r24, r24
    30d4:	99 27       	eor	r25, r25
    30d6:	82 1b       	sub	r24, r18
    30d8:	93 0b       	sbc	r25, r19
    30da:	b4 cf       	rjmp	.-152    	; 0x3044 <_Z12mpu_read_memttPh+0x22>

000030dc <_Z17mpu_load_firmwaretPKhtt>:
 *  @param[in]  start_addr  Starting address of DMP code memory.
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
                      unsigned short start_addr, unsigned short sample_rate) {
    30dc:	4f 92       	push	r4
    30de:	5f 92       	push	r5
    30e0:	6f 92       	push	r6
    30e2:	7f 92       	push	r7
    30e4:	8f 92       	push	r8
    30e6:	9f 92       	push	r9
    30e8:	af 92       	push	r10
    30ea:	bf 92       	push	r11
    30ec:	cf 92       	push	r12
    30ee:	df 92       	push	r13
    30f0:	ef 92       	push	r14
    30f2:	ff 92       	push	r15
    30f4:	0f 93       	push	r16
    30f6:	1f 93       	push	r17
    30f8:	cf 93       	push	r28
    30fa:	df 93       	push	r29
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	62 97       	sbiw	r28, 0x12	; 18
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	5c 01       	movw	r10, r24
    310e:	4b 01       	movw	r8, r22
    3110:	3a 01       	movw	r6, r20
    3112:	29 01       	movw	r4, r18
  uint8_t *progBuffer;
  /* Must divide evenly into st->hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK (16)
  unsigned char cur[LOAD_CHUNK], tmp[2];

  if (st->chip_cfg.dmp_loaded)
    3114:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    3118:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    311c:	86 8d       	ldd	r24, Z+30	; 0x1e
    311e:	81 11       	cpse	r24, r1
    3120:	81 c0       	rjmp	.+258    	; 0x3224 <_Z17mpu_load_firmwaretPKhtt+0x148>
    /* DMP should only be loaded once. */
    return -1;

  if (!firmware)
    return -2;
    3122:	8e ef       	ldi	r24, 0xFE	; 254
    3124:	9f ef       	ldi	r25, 0xFF	; 255
  if (!firmware)
    3126:	67 2b       	or	r22, r23
    3128:	09 f4       	brne	.+2      	; 0x312c <_Z17mpu_load_firmwaretPKhtt+0x50>
    312a:	65 c0       	rjmp	.+202    	; 0x31f6 <_Z17mpu_load_firmwaretPKhtt+0x11a>

  progBuffer = (uint8_t *)malloc(LOAD_CHUNK);
    312c:	80 e1       	ldi	r24, 0x10	; 16
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <malloc>
    3134:	6c 01       	movw	r12, r24
  for (ii = 0; ii < length; ii += this_write) {
    3136:	10 e0       	ldi	r17, 0x00	; 0
    3138:	00 e0       	ldi	r16, 0x00	; 0
    313a:	0a 15       	cp	r16, r10
    313c:	1b 05       	cpc	r17, r11
    313e:	c8 f5       	brcc	.+114    	; 0x31b2 <_Z17mpu_load_firmwaretPKhtt+0xd6>
    this_write = min(LOAD_CHUNK, length - ii);
    3140:	75 01       	movw	r14, r10
    3142:	e0 1a       	sub	r14, r16
    3144:	f1 0a       	sbc	r15, r17
    3146:	81 e1       	ldi	r24, 0x11	; 17
    3148:	e8 16       	cp	r14, r24
    314a:	f1 04       	cpc	r15, r1
    314c:	18 f0       	brcs	.+6      	; 0x3154 <_Z17mpu_load_firmwaretPKhtt+0x78>
    314e:	80 e1       	ldi	r24, 0x10	; 16
    3150:	e8 2e       	mov	r14, r24
    3152:	f1 2c       	mov	r15, r1

    for (uint8_t progIndex = 0; progIndex < this_write; progIndex++)
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	82 2f       	mov	r24, r18
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	8e 15       	cp	r24, r14
    315c:	9f 05       	cpc	r25, r15
    315e:	60 f4       	brcc	.+24     	; 0x3178 <_Z17mpu_load_firmwaretPKhtt+0x9c>
#ifdef __SAM3X8E__
      progBuffer[progIndex] = firmware[ii + progIndex];
#else
      progBuffer[progIndex] = pgm_read_byte(firmware + ii + progIndex);
    3160:	fc 01       	movw	r30, r24
    3162:	e0 0f       	add	r30, r16
    3164:	f1 1f       	adc	r31, r17
    3166:	e8 0d       	add	r30, r8
    3168:	f9 1d       	adc	r31, r9
    316a:	e4 91       	lpm	r30, Z
    316c:	8c 0d       	add	r24, r12
    316e:	9d 1d       	adc	r25, r13
    3170:	dc 01       	movw	r26, r24
    3172:	ec 93       	st	X, r30
    for (uint8_t progIndex = 0; progIndex < this_write; progIndex++)
    3174:	2f 5f       	subi	r18, 0xFF	; 255
    3176:	ef cf       	rjmp	.-34     	; 0x3156 <_Z17mpu_load_firmwaretPKhtt+0x7a>
#endif

    if ((errCode = mpu_write_mem(ii, this_write, progBuffer))) {
    3178:	a6 01       	movw	r20, r12
    317a:	b7 01       	movw	r22, r14
    317c:	c8 01       	movw	r24, r16
    317e:	f5 de       	rcall	.-534    	; 0x2f6a <_Z13mpu_write_memttPh>
    3180:	89 2b       	or	r24, r25
    3182:	09 f0       	breq	.+2      	; 0x3186 <_Z17mpu_load_firmwaretPKhtt+0xaa>
    3184:	52 c0       	rjmp	.+164    	; 0x322a <_Z17mpu_load_firmwaretPKhtt+0x14e>
      Serial.printf(errCode);
#endif
      return -3;
    }

    if (mpu_read_mem(ii, this_write, cur))
    3186:	ae 01       	movw	r20, r28
    3188:	4f 5f       	subi	r20, 0xFF	; 255
    318a:	5f 4f       	sbci	r21, 0xFF	; 255
    318c:	b7 01       	movw	r22, r14
    318e:	c8 01       	movw	r24, r16
    3190:	48 df       	rcall	.-368    	; 0x3022 <_Z12mpu_read_memttPh>
    3192:	89 2b       	or	r24, r25
    3194:	09 f0       	breq	.+2      	; 0x3198 <_Z17mpu_load_firmwaretPKhtt+0xbc>
    3196:	4c c0       	rjmp	.+152    	; 0x3230 <_Z17mpu_load_firmwaretPKhtt+0x154>
      return -4;

    if (memcmp(progBuffer, cur, this_write)) {
    3198:	a7 01       	movw	r20, r14
    319a:	be 01       	movw	r22, r28
    319c:	6f 5f       	subi	r22, 0xFF	; 255
    319e:	7f 4f       	sbci	r23, 0xFF	; 255
    31a0:	c6 01       	movw	r24, r12
    31a2:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <memcmp>
    31a6:	89 2b       	or	r24, r25
    31a8:	09 f0       	breq	.+2      	; 0x31ac <_Z17mpu_load_firmwaretPKhtt+0xd0>
    31aa:	45 c0       	rjmp	.+138    	; 0x3236 <_Z17mpu_load_firmwaretPKhtt+0x15a>
  for (ii = 0; ii < length; ii += this_write) {
    31ac:	0e 0d       	add	r16, r14
    31ae:	1f 1d       	adc	r17, r15
    31b0:	c4 cf       	rjmp	.-120    	; 0x313a <_Z17mpu_load_firmwaretPKhtt+0x5e>
      return -5;
    }
  }

  /* Set program start address. */
  tmp[0] = start_addr >> 8;
    31b2:	76 24       	eor	r7, r6
    31b4:	67 24       	eor	r6, r7
    31b6:	76 24       	eor	r7, r6
    31b8:	7a 8a       	std	Y+18, r7	; 0x12
    31ba:	69 8a       	std	Y+17, r6	; 0x11
  tmp[1] = start_addr & 0xFF;
  if (i2c_write(st->hw->addr, st->reg->prgm_start_h, 2, tmp))
    31bc:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    31c0:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    31c4:	a0 81       	ld	r26, Z
    31c6:	b1 81       	ldd	r27, Z+1	; 0x01
    31c8:	02 80       	ldd	r0, Z+2	; 0x02
    31ca:	f3 81       	ldd	r31, Z+3	; 0x03
    31cc:	e0 2d       	mov	r30, r0
    31ce:	9e 01       	movw	r18, r28
    31d0:	2f 5e       	subi	r18, 0xEF	; 239
    31d2:	3f 4f       	sbci	r19, 0xFF	; 255
    31d4:	42 e0       	ldi	r20, 0x02	; 2
    31d6:	5d 96       	adiw	r26, 0x1d	; 29
    31d8:	6c 91       	ld	r22, X
    31da:	80 81       	ld	r24, Z
    31dc:	24 d2       	rcall	.+1096   	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    31de:	88 23       	and	r24, r24
    31e0:	69 f1       	breq	.+90     	; 0x323c <_Z17mpu_load_firmwaretPKhtt+0x160>
    return -6;

  st->chip_cfg.dmp_loaded = 1;
    31e2:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    31e6:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	86 8f       	std	Z+30, r24	; 0x1e
  st->chip_cfg.dmp_sample_rate = sample_rate;
    31ee:	50 a2       	std	Z+32, r5	; 0x20
    31f0:	47 8e       	std	Z+31, r4	; 0x1f
#ifdef MPU_DEBUG
  Serial.printf("Firmware loaded");
#endif
  return 0;
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	80 e0       	ldi	r24, 0x00	; 0
}
    31f6:	62 96       	adiw	r28, 0x12	; 18
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	ff 90       	pop	r15
    320c:	ef 90       	pop	r14
    320e:	df 90       	pop	r13
    3210:	cf 90       	pop	r12
    3212:	bf 90       	pop	r11
    3214:	af 90       	pop	r10
    3216:	9f 90       	pop	r9
    3218:	8f 90       	pop	r8
    321a:	7f 90       	pop	r7
    321c:	6f 90       	pop	r6
    321e:	5f 90       	pop	r5
    3220:	4f 90       	pop	r4
    3222:	08 95       	ret
    return -1;
    3224:	8f ef       	ldi	r24, 0xFF	; 255
    3226:	9f ef       	ldi	r25, 0xFF	; 255
    3228:	e6 cf       	rjmp	.-52     	; 0x31f6 <_Z17mpu_load_firmwaretPKhtt+0x11a>
      return -3;
    322a:	8d ef       	ldi	r24, 0xFD	; 253
    322c:	9f ef       	ldi	r25, 0xFF	; 255
    322e:	e3 cf       	rjmp	.-58     	; 0x31f6 <_Z17mpu_load_firmwaretPKhtt+0x11a>
      return -4;
    3230:	8c ef       	ldi	r24, 0xFC	; 252
    3232:	9f ef       	ldi	r25, 0xFF	; 255
    3234:	e0 cf       	rjmp	.-64     	; 0x31f6 <_Z17mpu_load_firmwaretPKhtt+0x11a>
      return -5;
    3236:	8b ef       	ldi	r24, 0xFB	; 251
    3238:	9f ef       	ldi	r25, 0xFF	; 255
    323a:	dd cf       	rjmp	.-70     	; 0x31f6 <_Z17mpu_load_firmwaretPKhtt+0x11a>
    return -6;
    323c:	8a ef       	ldi	r24, 0xFA	; 250
    323e:	9f ef       	ldi	r25, 0xFF	; 255
    3240:	da cf       	rjmp	.-76     	; 0x31f6 <_Z17mpu_load_firmwaretPKhtt+0x11a>

00003242 <_Z17mpu_set_dmp_stateh>:
/**
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable) {
    3242:	cf 93       	push	r28
    3244:	df 93       	push	r29
    3246:	0f 92       	push	r0
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
  unsigned char tmp;
  if (st->chip_cfg.dmp_on == enable)
    324c:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    3250:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    3254:	95 8d       	ldd	r25, Z+29	; 0x1d
    3256:	98 17       	cp	r25, r24
    3258:	51 f1       	breq	.+84     	; 0x32ae <_Z17mpu_set_dmp_stateh+0x6c>
    return 0;

  if (enable) {
    325a:	88 23       	and	r24, r24
    325c:	71 f1       	breq	.+92     	; 0x32ba <_Z17mpu_set_dmp_stateh+0x78>
    if (!st->chip_cfg.dmp_loaded)
    325e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3260:	88 23       	and	r24, r24
    3262:	09 f4       	brne	.+2      	; 0x3266 <_Z17mpu_set_dmp_stateh+0x24>
    3264:	43 c0       	rjmp	.+134    	; 0x32ec <_Z17mpu_set_dmp_stateh+0xaa>
      return -1;
    /* Disable data ready interrupt. */
    set_int_enable(0);
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <_ZL14set_int_enableh>
    /* Disable bypass mode. */
    mpu_set_bypass(0);
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	55 db       	rcall	.-2390   	; 0x291a <_Z14mpu_set_bypassh>
    /* Keep constant sample rate, FIFO rate controlled by DMP. */
    mpu_set_sample_rate(st->chip_cfg.dmp_sample_rate);
    3270:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    3274:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    3278:	87 8d       	ldd	r24, Z+31	; 0x1f
    327a:	90 a1       	ldd	r25, Z+32	; 0x20
    327c:	a7 dc       	rcall	.-1714   	; 0x2bcc <_Z19mpu_set_sample_ratet>
    /* Remove FIFO elements. */
    tmp = 0;
    327e:	19 82       	std	Y+1, r1	; 0x01
    i2c_write(st->hw->addr, 0x23, 1, &tmp);
    3280:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    3284:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    3288:	02 80       	ldd	r0, Z+2	; 0x02
    328a:	f3 81       	ldd	r31, Z+3	; 0x03
    328c:	e0 2d       	mov	r30, r0
    328e:	9e 01       	movw	r18, r28
    3290:	2f 5f       	subi	r18, 0xFF	; 255
    3292:	3f 4f       	sbci	r19, 0xFF	; 255
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	63 e2       	ldi	r22, 0x23	; 35
    3298:	80 81       	ld	r24, Z
    329a:	c5 d1       	rcall	.+906    	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    st->chip_cfg.dmp_on = 1;
    329c:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    32a0:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    /* Enable DMP interrupt. */
    set_int_enable(1);
    32a6:	85 8f       	std	Z+29, r24	; 0x1d
    32a8:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <_ZL14set_int_enableh>
    set_int_enable(0);
    /* Restore FIFO settings. */
    tmp = st->chip_cfg.fifo_enable;
    i2c_write(st->hw->addr, 0x23, 1, &tmp);
    st->chip_cfg.dmp_on = 0;
    mpu_reset_fifo();
    32ac:	ef d8       	rcall	.-3618   	; 0x248c <_Z14mpu_reset_fifov>
    return 0;
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 0;
}
    32b2:	0f 90       	pop	r0
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	08 95       	ret
    set_int_enable(0);
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <_ZL14set_int_enableh>
    tmp = st->chip_cfg.fifo_enable;
    32c0:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    32c4:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    32c8:	83 85       	ldd	r24, Z+11	; 0x0b
    32ca:	89 83       	std	Y+1, r24	; 0x01
    i2c_write(st->hw->addr, 0x23, 1, &tmp);
    32cc:	02 80       	ldd	r0, Z+2	; 0x02
    32ce:	f3 81       	ldd	r31, Z+3	; 0x03
    32d0:	e0 2d       	mov	r30, r0
    32d2:	9e 01       	movw	r18, r28
    32d4:	2f 5f       	subi	r18, 0xFF	; 255
    32d6:	3f 4f       	sbci	r19, 0xFF	; 255
    32d8:	41 e0       	ldi	r20, 0x01	; 1
    32da:	63 e2       	ldi	r22, 0x23	; 35
    32dc:	80 81       	ld	r24, Z
    32de:	a3 d1       	rcall	.+838    	; 0x3626 <_ZN6I2Cdev10writeBytesEhhhPh>
    st->chip_cfg.dmp_on = 0;
    32e0:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <st>
    32e4:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <st+0x1>
    32e8:	15 8e       	std	Z+29, r1	; 0x1d
    32ea:	e0 cf       	rjmp	.-64     	; 0x32ac <_Z17mpu_set_dmp_stateh+0x6a>
      return -1;
    32ec:	8f ef       	ldi	r24, 0xFF	; 255
    32ee:	9f ef       	ldi	r25, 0xFF	; 255
    32f0:	e0 cf       	rjmp	.-64     	; 0x32b2 <_Z17mpu_set_dmp_stateh+0x70>

000032f2 <_Z10mympu_openj>:

static int ret;
static short gyro[3];
static short sensors;
static unsigned char fifoCount;
int mympu_open(unsigned int rate) {
    32f2:	cf 93       	push	r28
    32f4:	df 93       	push	r29
    32f6:	ec 01       	movw	r28, r24
  mpu_select_device(0);
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	0e 94 2f 11 	call	0x225e	; 0x225e <_Z17mpu_select_devicei>
  mpu_init_structures();
    3300:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <_Z19mpu_init_structuresv>

  ret = mpu_init(NULL);
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	34 dd       	rcall	.-1432   	; 0x2d72 <_Z8mpu_initP11int_param_s>
    330a:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <_ZL3ret+0x1>
    330e:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZL3ret>
#ifdef MPU_DEBUG
  if (ret)
    return 10 + ret;
#endif

  ret = mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
    3312:	88 e7       	ldi	r24, 0x78	; 120
    3314:	bb dc       	rcall	.-1674   	; 0x2c8c <_Z15mpu_set_sensorsh>
    3316:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <_ZL3ret+0x1>
    331a:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZL3ret>
#ifdef MPU_DEBUG
  if (ret)
    return 20 + ret;
#endif

  ret = mpu_set_gyro_fsr(FSR);
    331e:	80 ed       	ldi	r24, 0xD0	; 208
    3320:	97 e0       	ldi	r25, 0x07	; 7
    3322:	ca d9       	rcall	.-3180   	; 0x26b8 <_Z16mpu_set_gyro_fsrt>
    3324:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <_ZL3ret+0x1>
    3328:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZL3ret>
#ifdef MPU_DEBUG
  if (ret)
    return 30 + ret;
#endif

  ret = mpu_set_accel_fsr(2);
    332c:	82 e0       	ldi	r24, 0x02	; 2
    332e:	17 da       	rcall	.-3026   	; 0x275e <_Z17mpu_set_accel_fsrh>
    3330:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <_ZL3ret+0x1>
    3334:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZL3ret>
#ifdef MPU_DEBUG
  if (ret)
    return 40 + ret;
#endif

  mpu_get_power_state((unsigned char *)&ret);
    3338:	8b ee       	ldi	r24, 0xEB	; 235
    333a:	92 e0       	ldi	r25, 0x02	; 2
#ifdef MPU_DEBUG
  if (!ret)
    return 50 + ret;
#endif

  ret = mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
    333c:	de da       	rcall	.-2628   	; 0x28fa <_Z19mpu_get_power_statePh>
    333e:	88 e7       	ldi	r24, 0x78	; 120
    3340:	a2 da       	rcall	.-2748   	; 0x2886 <_Z18mpu_configure_fifoh>
    3342:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <_ZL3ret+0x1>
    3346:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZL3ret>
#ifdef MPU_DEBUG
  if (ret)
    return 60 + ret;
#endif

  dmp_select_device(0);
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_Z17dmp_select_devicei>
  dmp_init_structures();
    3352:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_Z19dmp_init_structuresv>

  ret = dmp_load_motion_driver_firmware();
    3356:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <_Z31dmp_load_motion_driver_firmwarev>
    335a:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <_ZL3ret+0x1>
    335e:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZL3ret>
#ifdef MPU_DEBUG
  if (ret)
    return 80 + ret;
#endif

  ret = dmp_set_fifo_rate(rate);
    3362:	ce 01       	movw	r24, r28
    3364:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_Z17dmp_set_fifo_ratet>
    3368:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <_ZL3ret+0x1>
    336c:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZL3ret>
#ifdef MPU_DEBUG
  if (ret)
    return 90 + ret;
#endif

  ret = mpu_set_dmp_state(1);
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	67 df       	rcall	.-306    	; 0x3242 <_Z17mpu_set_dmp_stateh>
    3374:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <_ZL3ret+0x1>
    3378:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZL3ret>
#ifdef MPU_DEBUG
  if (ret)
    return 100 + ret;
#endif

  ret = dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_CAL_GYRO |
    337c:	80 e3       	ldi	r24, 0x30	; 48
    337e:	91 e0       	ldi	r25, 0x01	; 1
    3380:	0e 94 2f 10 	call	0x205e	; 0x205e <_Z18dmp_enable_featuret>
    3384:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <_ZL3ret+0x1>
    3388:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZL3ret>
  if (ret)
    return 110 + ret;
#endif

  return 0;
}
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	df 91       	pop	r29
    3392:	cf 91       	pop	r28
    3394:	08 95       	ret

00003396 <_ZN6I2Cdev7TWIInitEv>:
uint8_t I2Cdev::TWITransmitBuffer[TXMAXBUFLEN];
/** Default constructor.
 */
I2Cdev::I2Cdev() {}
void I2Cdev::TWIInit() {
  TWIInfo.mode = Ready;
    3396:	e5 e3       	ldi	r30, 0x35	; 53
    3398:	f3 e0       	ldi	r31, 0x03	; 3
    339a:	10 82       	st	Z, r1
  TWIInfo.errorCode = 0xFF;
    339c:	8f ef       	ldi	r24, 0xFF	; 255
    339e:	81 83       	std	Z+1, r24	; 0x01
  TWIInfo.repStart = 0;
    33a0:	12 82       	std	Z+2, r1	; 0x02
  // Set pre-scalers (no pre-scaling)
  TWSR = 0;
    33a2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  // Set bit rate
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    33a6:	83 e0       	ldi	r24, 0x03	; 3
    33a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  // Enable TWI and interrupt
  TWCR = (1 << TWIE) | (1 << TWEN);
    33ac:	85 e0       	ldi	r24, 0x05	; 5
    33ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    33b2:	08 95       	ret

000033b4 <_ZN6I2Cdev10isTWIReadyEv>:

uint8_t I2Cdev::isTWIReady() {
  return (TWIInfo.mode == Ready) || (TWIInfo.mode == RepeatedStartSent);
    33b4:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <_ZN6I2Cdev7TWIInfoE>
    33b8:	9d 7f       	andi	r25, 0xFD	; 253
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	09 f0       	breq	.+2      	; 0x33c0 <_ZN6I2Cdev10isTWIReadyEv+0xc>
    33be:	80 e0       	ldi	r24, 0x00	; 0
}
    33c0:	08 95       	ret

000033c2 <_ZN6I2Cdev15TWITransmitDataEPvhh>:
  TWIReadData(device, bytesToRead, 0);
  WAIT_TWI;
  return 1;
}
uint8_t I2Cdev::TWITransmitData(void *const TXdata, uint8_t dataLen,
                                uint8_t repStart) {
    33c2:	0f 93       	push	r16
    33c4:	1f 93       	push	r17
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	18 2f       	mov	r17, r24
    33cc:	d9 2f       	mov	r29, r25
    33ce:	c6 2f       	mov	r28, r22
    33d0:	04 2f       	mov	r16, r20
    {
      TWIInfo.mode = Initializing;
      TWISendStart();
    }
  } else {
    return 1; // return an error if data length is longer than buffer
    33d2:	81 e0       	ldi	r24, 0x01	; 1
  if (dataLen <= TXMAXBUFLEN) {
    33d4:	61 32       	cpi	r22, 0x21	; 33
    33d6:	08 f0       	brcs	.+2      	; 0x33da <_ZN6I2Cdev15TWITransmitDataEPvhh+0x18>
    33d8:	3e c0       	rjmp	.+124    	; 0x3456 <_ZN6I2Cdev15TWITransmitDataEPvhh+0x94>
    WAIT_TWI;
    33da:	ec df       	rcall	.-40     	; 0x33b4 <_ZN6I2Cdev10isTWIReadyEv>
    33dc:	81 11       	cpse	r24, r1
    33de:	07 c0       	rjmp	.+14     	; 0x33ee <_ZN6I2Cdev15TWITransmitDataEPvhh+0x2c>
    33e0:	8f ec       	ldi	r24, 0xCF	; 207
    33e2:	97 e0       	ldi	r25, 0x07	; 7
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	f1 f7       	brne	.-4      	; 0x33e4 <_ZN6I2Cdev15TWITransmitDataEPvhh+0x22>
    33e8:	00 c0       	rjmp	.+0      	; 0x33ea <_ZN6I2Cdev15TWITransmitDataEPvhh+0x28>
    33ea:	00 00       	nop
    33ec:	f6 cf       	rjmp	.-20     	; 0x33da <_ZN6I2Cdev15TWITransmitDataEPvhh+0x18>
    TWIInfo.repStart = repStart;
    33ee:	00 93 37 03 	sts	0x0337, r16	; 0x800337 <_ZN6I2Cdev7TWIInfoE+0x2>
    for (int i = 0; i < dataLen; i++) {
    33f2:	e1 2f       	mov	r30, r17
    33f4:	fd 2f       	mov	r31, r29
    33f6:	ad ee       	ldi	r26, 0xED	; 237
    33f8:	b2 e0       	ldi	r27, 0x02	; 2
    33fa:	d0 e0       	ldi	r29, 0x00	; 0
    33fc:	9e 01       	movw	r18, r28
    33fe:	23 51       	subi	r18, 0x13	; 19
    3400:	3d 4f       	sbci	r19, 0xFD	; 253
    3402:	a2 17       	cp	r26, r18
    3404:	b3 07       	cpc	r27, r19
    3406:	19 f0       	breq	.+6      	; 0x340e <_ZN6I2Cdev15TWITransmitDataEPvhh+0x4c>
      TWITransmitBuffer[i] = data[i];
    3408:	81 91       	ld	r24, Z+
    340a:	8d 93       	st	X+, r24
    for (int i = 0; i < dataLen; i++) {
    340c:	fa cf       	rjmp	.-12     	; 0x3402 <_ZN6I2Cdev15TWITransmitDataEPvhh+0x40>
    TXBuffLen = dataLen;
    340e:	d0 93 32 03 	sts	0x0332, r29	; 0x800332 <_ZN6I2Cdev9TXBuffLenE+0x1>
    3412:	c0 93 31 03 	sts	0x0331, r28	; 0x800331 <_ZN6I2Cdev9TXBuffLenE>
    TXBuffIndex = 0;
    3416:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <_ZN6I2Cdev11TXBuffIndexE+0x1>
    341a:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <_ZN6I2Cdev11TXBuffIndexE>
    if (TWIInfo.mode == RepeatedStartSent) {
    341e:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <_ZN6I2Cdev7TWIInfoE>
    3422:	82 30       	cpi	r24, 0x02	; 2
    3424:	e9 f4       	brne	.+58     	; 0x3460 <_ZN6I2Cdev15TWITransmitDataEPvhh+0x9e>
      TWIInfo.mode = Initializing;
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <_ZN6I2Cdev7TWIInfoE>
      TWDR = TWITransmitBuffer[TXBuffIndex++]; // Load data to transmit buffer
    342c:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <_ZN6I2Cdev11TXBuffIndexE>
    3430:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <_ZN6I2Cdev11TXBuffIndexE+0x1>
    3434:	9c 01       	movw	r18, r24
    3436:	2f 5f       	subi	r18, 0xFF	; 255
    3438:	3f 4f       	sbci	r19, 0xFF	; 255
    343a:	30 93 2e 03 	sts	0x032E, r19	; 0x80032e <_ZN6I2Cdev11TXBuffIndexE+0x1>
    343e:	20 93 2d 03 	sts	0x032D, r18	; 0x80032d <_ZN6I2Cdev11TXBuffIndexE>
    3442:	83 51       	subi	r24, 0x13	; 19
    3444:	9d 4f       	sbci	r25, 0xFD	; 253
    3446:	fc 01       	movw	r30, r24
    3448:	80 81       	ld	r24, Z
    344a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      TWISendTransmit();                       // Send the data
    344e:	85 e8       	ldi	r24, 0x85	; 133
      TWISendStart();
    3450:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  }
  return 0;
    3454:	80 e0       	ldi	r24, 0x00	; 0
}
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	1f 91       	pop	r17
    345c:	0f 91       	pop	r16
    345e:	08 95       	ret
      TWIInfo.mode = Initializing;
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <_ZN6I2Cdev7TWIInfoE>
      TWISendStart();
    3466:	85 ea       	ldi	r24, 0xA5	; 165
    3468:	f3 cf       	rjmp	.-26     	; 0x3450 <_ZN6I2Cdev15TWITransmitDataEPvhh+0x8e>

0000346a <_ZN6I2Cdev16TWIWriteRegisterEhhh>:
uint8_t I2Cdev::TWIWriteRegister(uint8_t device, uint8_t addr, uint8_t value) {
    346a:	cf 93       	push	r28
    346c:	df 93       	push	r29
    346e:	00 d0       	rcall	.+0      	; 0x3470 <_ZN6I2Cdev16TWIWriteRegisterEhhh+0x6>
    3470:	0f 92       	push	r0
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
  uint8_t msg[] = {(device << 1) & 0xFE, addr, value};
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	89 83       	std	Y+1, r24	; 0x01
    347e:	6a 83       	std	Y+2, r22	; 0x02
    3480:	4b 83       	std	Y+3, r20	; 0x03
  TWITransmitData(msg, 3, 0);
    3482:	40 e0       	ldi	r20, 0x00	; 0
    3484:	63 e0       	ldi	r22, 0x03	; 3
    3486:	ce 01       	movw	r24, r28
    3488:	01 96       	adiw	r24, 0x01	; 1
    348a:	9b df       	rcall	.-202    	; 0x33c2 <_ZN6I2Cdev15TWITransmitDataEPvhh>
  WAIT_TWI;
    348c:	93 df       	rcall	.-218    	; 0x33b4 <_ZN6I2Cdev10isTWIReadyEv>
    348e:	81 11       	cpse	r24, r1
    3490:	07 c0       	rjmp	.+14     	; 0x34a0 <_ZN6I2Cdev16TWIWriteRegisterEhhh+0x36>
    3492:	8f ec       	ldi	r24, 0xCF	; 207
    3494:	97 e0       	ldi	r25, 0x07	; 7
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	f1 f7       	brne	.-4      	; 0x3496 <_ZN6I2Cdev16TWIWriteRegisterEhhh+0x2c>
    349a:	00 c0       	rjmp	.+0      	; 0x349c <_ZN6I2Cdev16TWIWriteRegisterEhhh+0x32>
    349c:	00 00       	nop
    349e:	f6 cf       	rjmp	.-20     	; 0x348c <_ZN6I2Cdev16TWIWriteRegisterEhhh+0x22>
    34a0:	81 e0       	ldi	r24, 0x01	; 1
}
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	df 91       	pop	r29
    34aa:	cf 91       	pop	r28
    34ac:	08 95       	ret

000034ae <_ZN6I2Cdev24TWIWriteRegisterMultipleEhhPhh>:
    34ae:	ef 92       	push	r14
                                         uint8_t *value, uint8_t bytesToWrite) {
    34b0:	ff 92       	push	r15
    34b2:	0f 93       	push	r16
    34b4:	1f 93       	push	r17
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	cd b7       	in	r28, 0x3d	; 61
    34bc:	de b7       	in	r29, 0x3e	; 62
    34be:	e8 2f       	mov	r30, r24
}
    34c0:	0d b7       	in	r16, 0x3d	; 61
    34c2:	1e b7       	in	r17, 0x3e	; 62
  uint8_t msg[2 + bytesToWrite];
    34c4:	a2 2f       	mov	r26, r18
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	cd 01       	movw	r24, r26
    34ca:	02 96       	adiw	r24, 0x02	; 2
    34cc:	ed b6       	in	r14, 0x3d	; 61
    34ce:	fe b6       	in	r15, 0x3e	; 62
    34d0:	e8 1a       	sub	r14, r24
    34d2:	f9 0a       	sbc	r15, r25
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	f8 94       	cli
    34d8:	fe be       	out	0x3e, r15	; 62
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	ed be       	out	0x3d, r14	; 61
    34de:	8d b7       	in	r24, 0x3d	; 61
    34e0:	9e b7       	in	r25, 0x3e	; 62
    34e2:	01 96       	adiw	r24, 0x01	; 1
  msg[0] = (device << 1) & 0xFE;
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	7f 01       	movw	r14, r30
    34e8:	ee 0c       	add	r14, r14
    34ea:	ff 1c       	adc	r15, r15
    34ec:	ed b7       	in	r30, 0x3d	; 61
    34ee:	fe b7       	in	r31, 0x3e	; 62
    34f0:	e1 82       	std	Z+1, r14	; 0x01
  msg[1] = addr;
    34f2:	fc 01       	movw	r30, r24
    34f4:	61 83       	std	Z+1, r22	; 0x01
  for (int i = 0; i < bytesToWrite; i++) {
    34f6:	fa 01       	movw	r30, r20
    34f8:	4d b7       	in	r20, 0x3d	; 61
    34fa:	5e b7       	in	r21, 0x3e	; 62
    34fc:	4d 5f       	subi	r20, 0xFD	; 253
    34fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3500:	bd 01       	movw	r22, r26
    3502:	6e 0f       	add	r22, r30
    3504:	7f 1f       	adc	r23, r31
    3506:	e6 17       	cp	r30, r22
    3508:	f7 07       	cpc	r31, r23
    350a:	29 f0       	breq	.+10     	; 0x3516 <_ZN6I2Cdev24TWIWriteRegisterMultipleEhhPhh+0x68>
    msg[i + 2] = value[i];
    350c:	31 91       	ld	r19, Z+
    350e:	da 01       	movw	r26, r20
    3510:	3d 93       	st	X+, r19
    3512:	ad 01       	movw	r20, r26
  for (int i = 0; i < bytesToWrite; i++) {
    3514:	f8 cf       	rjmp	.-16     	; 0x3506 <_ZN6I2Cdev24TWIWriteRegisterMultipleEhhPhh+0x58>
  TWITransmitData(msg, bytesToWrite + 2, 0);
    3516:	62 e0       	ldi	r22, 0x02	; 2
    3518:	62 0f       	add	r22, r18
    351a:	40 e0       	ldi	r20, 0x00	; 0
    351c:	52 df       	rcall	.-348    	; 0x33c2 <_ZN6I2Cdev15TWITransmitDataEPvhh>
  WAIT_TWI;
    351e:	4a df       	rcall	.-364    	; 0x33b4 <_ZN6I2Cdev10isTWIReadyEv>
    3520:	81 11       	cpse	r24, r1
    3522:	07 c0       	rjmp	.+14     	; 0x3532 <_ZN6I2Cdev24TWIWriteRegisterMultipleEhhPhh+0x84>
    3524:	ef ec       	ldi	r30, 0xCF	; 207
    3526:	f7 e0       	ldi	r31, 0x07	; 7
    3528:	31 97       	sbiw	r30, 0x01	; 1
    352a:	f1 f7       	brne	.-4      	; 0x3528 <_ZN6I2Cdev24TWIWriteRegisterMultipleEhhPhh+0x7a>
    352c:	00 c0       	rjmp	.+0      	; 0x352e <_ZN6I2Cdev24TWIWriteRegisterMultipleEhhPhh+0x80>
    352e:	00 00       	nop
    3530:	f6 cf       	rjmp	.-20     	; 0x351e <_ZN6I2Cdev24TWIWriteRegisterMultipleEhhPhh+0x70>
    3532:	81 e0       	ldi	r24, 0x01	; 1
}
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	1e bf       	out	0x3e, r17	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	0d bf       	out	0x3d, r16	; 61
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	1f 91       	pop	r17
    3544:	0f 91       	pop	r16
    3546:	ff 90       	pop	r15
    3548:	ef 90       	pop	r14
    354a:	08 95       	ret

0000354c <_ZN6I2Cdev11TWIReadDataEhhh>:
    354c:	cf 93       	push	r28

uint8_t I2Cdev::TWIReadData(uint8_t TWIaddr, uint8_t bytesToRead,
                            uint8_t repStart) {
    354e:	df 93       	push	r29
    3550:	0f 92       	push	r0
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
  // Check if number of bytes to read can fit in the RXbuffer
  if (bytesToRead < RXMAXBUFLEN) {
    3556:	60 32       	cpi	r22, 0x20	; 32
    3558:	a8 f4       	brcc	.+42     	; 0x3584 <_ZN6I2Cdev11TWIReadDataEhhh+0x38>
    // Reset buffer index and set RXBuffLen to the number of bytes to read
    RXBuffIndex = 0;
    355a:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <_ZN6I2Cdev11RXBuffIndexE+0x1>
    355e:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <_ZN6I2Cdev11RXBuffIndexE>
    RXBuffLen = bytesToRead;
    3562:	70 e0       	ldi	r23, 0x00	; 0
    3564:	70 93 34 03 	sts	0x0334, r23	; 0x800334 <_ZN6I2Cdev9RXBuffLenE+0x1>
    3568:	60 93 33 03 	sts	0x0333, r22	; 0x800333 <_ZN6I2Cdev9RXBuffLenE>
    // Create the one value array for the address to be transmitted
    uint8_t TXdata[1];
    // Shift the address and AND a 1 into the read write bit (set to write mode)
    TXdata[0] = (TWIaddr << 1) | 0x01;
    356c:	88 0f       	add	r24, r24
    356e:	81 60       	ori	r24, 0x01	; 1
    3570:	89 83       	std	Y+1, r24	; 0x01
    // Use the TWITransmitData function to initialize the transfer and address
    // the slave
    TWITransmitData(TXdata, 1, repStart);
    3572:	61 e0       	ldi	r22, 0x01	; 1
    3574:	ce 01       	movw	r24, r28
    3576:	01 96       	adiw	r24, 0x01	; 1
    3578:	24 df       	rcall	.-440    	; 0x33c2 <_ZN6I2Cdev15TWITransmitDataEPvhh>
  } else {
    return 0;
  }
  return 1;
    357a:	81 e0       	ldi	r24, 0x01	; 1
}
    357c:	0f 90       	pop	r0
    357e:	df 91       	pop	r29
    3580:	cf 91       	pop	r28
    3582:	08 95       	ret
    return 0;
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	fa cf       	rjmp	.-12     	; 0x357c <_ZN6I2Cdev11TWIReadDataEhhh+0x30>

00003588 <_ZN6I2Cdev15TWIReadRegisterEhhh>:
                                uint8_t bytesToRead) {
    3588:	0f 93       	push	r16
    358a:	1f 93       	push	r17
    358c:	cf 93       	push	r28
    358e:	df 93       	push	r29
    3590:	00 d0       	rcall	.+0      	; 0x3592 <_ZN6I2Cdev15TWIReadRegisterEhhh+0xa>
    3592:	cd b7       	in	r28, 0x3d	; 61
    3594:	de b7       	in	r29, 0x3e	; 62
    3596:	18 2f       	mov	r17, r24
    3598:	04 2f       	mov	r16, r20
  uint8_t msg[] = {(device << 1) & 0xFE, address};
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	88 0f       	add	r24, r24
    359e:	99 1f       	adc	r25, r25
    35a0:	89 83       	std	Y+1, r24	; 0x01
    35a2:	6a 83       	std	Y+2, r22	; 0x02
  TWITransmitData(msg, 2, 0);
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	62 e0       	ldi	r22, 0x02	; 2
    35a8:	ce 01       	movw	r24, r28
    35aa:	01 96       	adiw	r24, 0x01	; 1
    35ac:	0a df       	rcall	.-492    	; 0x33c2 <_ZN6I2Cdev15TWITransmitDataEPvhh>
  WAIT_TWI;
    35ae:	02 df       	rcall	.-508    	; 0x33b4 <_ZN6I2Cdev10isTWIReadyEv>
    35b0:	81 11       	cpse	r24, r1
    35b2:	07 c0       	rjmp	.+14     	; 0x35c2 <_ZN6I2Cdev15TWIReadRegisterEhhh+0x3a>
    35b4:	8f ec       	ldi	r24, 0xCF	; 207
    35b6:	97 e0       	ldi	r25, 0x07	; 7
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <_ZN6I2Cdev15TWIReadRegisterEhhh+0x30>
    35bc:	00 c0       	rjmp	.+0      	; 0x35be <_ZN6I2Cdev15TWIReadRegisterEhhh+0x36>
    35be:	00 00       	nop
    35c0:	f6 cf       	rjmp	.-20     	; 0x35ae <_ZN6I2Cdev15TWIReadRegisterEhhh+0x26>
    35c2:	40 e0       	ldi	r20, 0x00	; 0
  TWIReadData(device, bytesToRead, 0);
    35c4:	60 2f       	mov	r22, r16
    35c6:	81 2f       	mov	r24, r17
    35c8:	c1 df       	rcall	.-126    	; 0x354c <_ZN6I2Cdev11TWIReadDataEhhh>
  WAIT_TWI;
    35ca:	f4 de       	rcall	.-536    	; 0x33b4 <_ZN6I2Cdev10isTWIReadyEv>
    35cc:	81 11       	cpse	r24, r1
    35ce:	07 c0       	rjmp	.+14     	; 0x35de <_ZN6I2Cdev15TWIReadRegisterEhhh+0x56>
    35d0:	8f ec       	ldi	r24, 0xCF	; 207
    35d2:	97 e0       	ldi	r25, 0x07	; 7
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <_ZN6I2Cdev15TWIReadRegisterEhhh+0x4c>
    35d8:	00 c0       	rjmp	.+0      	; 0x35da <_ZN6I2Cdev15TWIReadRegisterEhhh+0x52>
    35da:	00 00       	nop
    35dc:	f6 cf       	rjmp	.-20     	; 0x35ca <_ZN6I2Cdev15TWIReadRegisterEhhh+0x42>
    35de:	81 e0       	ldi	r24, 0x01	; 1
}
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	1f 91       	pop	r17
    35ea:	0f 91       	pop	r16
    35ec:	08 95       	ret

000035ee <_ZN6I2Cdev9readBytesEhhhPhj>:
    35ee:	1f 93       	push	r17
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off
 * to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                         uint8_t *data, uint16_t timeout) {
    35f0:	cf 93       	push	r28
    35f2:	df 93       	push	r29
    35f4:	c4 2f       	mov	r28, r20
    35f6:	12 2f       	mov	r17, r18
    35f8:	d3 2f       	mov	r29, r19
  TWIReadRegister(devAddr, regAddr, length);
    35fa:	c6 df       	rcall	.-116    	; 0x3588 <_ZN6I2Cdev15TWIReadRegisterEhhh>
  for (int i = 0; i < length; i++) {
    35fc:	e1 2f       	mov	r30, r17
    35fe:	fd 2f       	mov	r31, r29
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	4c 2f       	mov	r20, r28
    3606:	50 e0       	ldi	r21, 0x00	; 0
    3608:	84 17       	cp	r24, r20
    360a:	95 07       	cpc	r25, r21
    360c:	3c f4       	brge	.+14     	; 0x361c <_ZN6I2Cdev9readBytesEhhhPhj+0x2e>
    data[i] = TWIReceiveBuffer[i];
    360e:	dc 01       	movw	r26, r24
    3610:	a3 5f       	subi	r26, 0xF3	; 243
    3612:	bc 4f       	sbci	r27, 0xFC	; 252
    3614:	2c 91       	ld	r18, X
    3616:	21 93       	st	Z+, r18
  for (int i = 0; i < length; i++) {
    3618:	01 96       	adiw	r24, 0x01	; 1
    361a:	f6 cf       	rjmp	.-20     	; 0x3608 <_ZN6I2Cdev9readBytesEhhhPhj+0x1a>
  }
  return length;
}
    361c:	8c 2f       	mov	r24, r28
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	1f 91       	pop	r17
    3624:	08 95       	ret

00003626 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length,
                        uint8_t *data) {
    3626:	94 2f       	mov	r25, r20
    3628:	a9 01       	movw	r20, r18
  return TWIWriteRegisterMultiple(devAddr, regAddr, data, length);
    362a:	29 2f       	mov	r18, r25
    362c:	40 df       	rcall	.-384    	; 0x34ae <_ZN6I2Cdev24TWIWriteRegisterMultipleEhhPhh>
    362e:	91 e0       	ldi	r25, 0x01	; 1
    3630:	81 11       	cpse	r24, r1
    3632:	01 c0       	rjmp	.+2      	; 0x3636 <_ZN6I2Cdev10writeBytesEhhhPh+0x10>
    3634:	90 e0       	ldi	r25, 0x00	; 0
}
    3636:	89 2f       	mov	r24, r25
    3638:	08 95       	ret

0000363a <_ZN6I2Cdev9interruptEv>:
                        uint16_t *data) {
  return TWIWriteRegisterMultiple(devAddr, regAddr, (uint8_t *)data,
                                  length * 2);
}
void I2Cdev::interrupt() {
  switch (TWI_STATUS) {
    363a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    363e:	88 7f       	andi	r24, 0xF8	; 248
    3640:	88 32       	cpi	r24, 0x28	; 40
    3642:	61 f1       	breq	.+88     	; 0x369c <_ZN6I2Cdev9interruptEv+0x62>
    3644:	b8 f4       	brcc	.+46     	; 0x3674 <_ZN6I2Cdev9interruptEv+0x3a>
    3646:	80 31       	cpi	r24, 0x10	; 16
    3648:	09 f4       	brne	.+2      	; 0x364c <_ZN6I2Cdev9interruptEv+0x12>
    364a:	a1 c0       	rjmp	.+322    	; 0x378e <_ZN6I2Cdev9interruptEv+0x154>
    364c:	30 f4       	brcc	.+12     	; 0x365a <_ZN6I2Cdev9interruptEv+0x20>
    364e:	88 23       	and	r24, r24
    3650:	09 f4       	brne	.+2      	; 0x3654 <_ZN6I2Cdev9interruptEv+0x1a>
    3652:	a1 c0       	rjmp	.+322    	; 0x3796 <_ZN6I2Cdev9interruptEv+0x15c>
    3654:	88 30       	cpi	r24, 0x08	; 8
    3656:	11 f1       	breq	.+68     	; 0x369c <_ZN6I2Cdev9interruptEv+0x62>
    3658:	08 95       	ret
    365a:	88 31       	cpi	r24, 0x18	; 24
    365c:	e1 f0       	breq	.+56     	; 0x3696 <_ZN6I2Cdev9interruptEv+0x5c>
    365e:	80 32       	cpi	r24, 0x20	; 32
    3660:	81 f4       	brne	.+32     	; 0x3682 <_ZN6I2Cdev9interruptEv+0x48>
  case TWI_MR_SLAR_NACK: // SLA+R transmitted, NACK received
  case TWI_MT_SLAW_NACK: // SLA+W transmitted, NACK received
  case TWI_MT_DATA_NACK: // Data byte has been transmitted, NACK received
  case TWI_LOST_ARBIT:   // Arbitration has been lost
    // Return error and send stop and set mode to ready
    if (TWIInfo.repStart) {
    3662:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN6I2Cdev7TWIInfoE+0x2>
    3666:	88 23       	and	r24, r24
    3668:	09 f4       	brne	.+2      	; 0x366c <_ZN6I2Cdev9interruptEv+0x32>
    366a:	8b c0       	rjmp	.+278    	; 0x3782 <_ZN6I2Cdev9interruptEv+0x148>
      TWIInfo.errorCode = TWI_STATUS;
    366c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3670:	88 7f       	andi	r24, 0xF8	; 248
    3672:	7c c0       	rjmp	.+248    	; 0x376c <_ZN6I2Cdev9interruptEv+0x132>
    3674:	80 34       	cpi	r24, 0x40	; 64
    3676:	a1 f1       	breq	.+104    	; 0x36e0 <_ZN6I2Cdev9interruptEv+0xa6>
    3678:	28 f4       	brcc	.+10     	; 0x3684 <_ZN6I2Cdev9interruptEv+0x4a>
    367a:	80 33       	cpi	r24, 0x30	; 48
    367c:	91 f3       	breq	.-28     	; 0x3662 <_ZN6I2Cdev9interruptEv+0x28>
    367e:	88 33       	cpi	r24, 0x38	; 56
    3680:	81 f3       	breq	.-32     	; 0x3662 <_ZN6I2Cdev9interruptEv+0x28>
    TWIInfo.errorCode = TWI_ILLEGAL_START_STOP;
    TWIInfo.mode = Ready;
    TWISendStop();
    break;
  }
}
    3682:	08 95       	ret
    3684:	80 35       	cpi	r24, 0x50	; 80
    3686:	09 f4       	brne	.+2      	; 0x368a <_ZN6I2Cdev9interruptEv+0x50>
    3688:	41 c0       	rjmp	.+130    	; 0x370c <_ZN6I2Cdev9interruptEv+0xd2>
    368a:	88 35       	cpi	r24, 0x58	; 88
    368c:	09 f4       	brne	.+2      	; 0x3690 <_ZN6I2Cdev9interruptEv+0x56>
    368e:	58 c0       	rjmp	.+176    	; 0x3740 <_ZN6I2Cdev9interruptEv+0x106>
    3690:	88 34       	cpi	r24, 0x48	; 72
    3692:	b9 f7       	brne	.-18     	; 0x3682 <_ZN6I2Cdev9interruptEv+0x48>
    3694:	e6 cf       	rjmp	.-52     	; 0x3662 <_ZN6I2Cdev9interruptEv+0x28>
    TWIInfo.mode = MasterTransmitter;
    3696:	83 e0       	ldi	r24, 0x03	; 3
    3698:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <_ZN6I2Cdev7TWIInfoE>
    if (TXBuffIndex < TXBuffLen) // If there is more data to send
    369c:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <_ZN6I2Cdev11TXBuffIndexE>
    36a0:	30 91 2e 03 	lds	r19, 0x032E	; 0x80032e <_ZN6I2Cdev11TXBuffIndexE+0x1>
    36a4:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <_ZN6I2Cdev9TXBuffLenE>
    36a8:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <_ZN6I2Cdev9TXBuffLenE+0x1>
    36ac:	28 17       	cp	r18, r24
    36ae:	39 07       	cpc	r19, r25
    36b0:	0c f0       	brlt	.+2      	; 0x36b4 <_ZN6I2Cdev9interruptEv+0x7a>
    36b2:	57 c0       	rjmp	.+174    	; 0x3762 <_ZN6I2Cdev9interruptEv+0x128>
      TWDR = TWITransmitBuffer[TXBuffIndex++]; // Load data to transmit buffer
    36b4:	80 91 2d 03 	lds	r24, 0x032D	; 0x80032d <_ZN6I2Cdev11TXBuffIndexE>
    36b8:	90 91 2e 03 	lds	r25, 0x032E	; 0x80032e <_ZN6I2Cdev11TXBuffIndexE+0x1>
    36bc:	9c 01       	movw	r18, r24
    36be:	2f 5f       	subi	r18, 0xFF	; 255
    36c0:	3f 4f       	sbci	r19, 0xFF	; 255
    36c2:	30 93 2e 03 	sts	0x032E, r19	; 0x80032e <_ZN6I2Cdev11TXBuffIndexE+0x1>
    36c6:	20 93 2d 03 	sts	0x032D, r18	; 0x80032d <_ZN6I2Cdev11TXBuffIndexE>
    36ca:	83 51       	subi	r24, 0x13	; 19
    36cc:	9d 4f       	sbci	r25, 0xFD	; 253
    36ce:	fc 01       	movw	r30, r24
    36d0:	80 81       	ld	r24, Z
    36d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      TWIInfo.errorCode = TWI_NO_RELEVANT_INFO;
    36d6:	88 ef       	ldi	r24, 0xF8	; 248
    36d8:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <_ZN6I2Cdev7TWIInfoE+0x1>
      TWISendNACK();
    36dc:	85 e8       	ldi	r24, 0x85	; 133
    36de:	13 c0       	rjmp	.+38     	; 0x3706 <_ZN6I2Cdev9interruptEv+0xcc>
    TWIInfo.mode = MasterReceiver;
    36e0:	84 e0       	ldi	r24, 0x04	; 4
    36e2:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <_ZN6I2Cdev7TWIInfoE>
    if (RXBuffIndex < RXBuffLen - 1) {
    36e6:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZN6I2Cdev9RXBuffLenE>
    36ea:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <_ZN6I2Cdev9RXBuffLenE+0x1>
    36ee:	01 97       	sbiw	r24, 0x01	; 1
    36f0:	20 91 2f 03 	lds	r18, 0x032F	; 0x80032f <_ZN6I2Cdev11RXBuffIndexE>
    36f4:	30 91 30 03 	lds	r19, 0x0330	; 0x800330 <_ZN6I2Cdev11RXBuffIndexE+0x1>
    36f8:	28 17       	cp	r18, r24
    36fa:	39 07       	cpc	r19, r25
    36fc:	64 f7       	brge	.-40     	; 0x36d6 <_ZN6I2Cdev9interruptEv+0x9c>
      TWIInfo.errorCode = TWI_NO_RELEVANT_INFO;
    36fe:	88 ef       	ldi	r24, 0xF8	; 248
    3700:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <_ZN6I2Cdev7TWIInfoE+0x1>
      TWISendACK();
    3704:	85 ec       	ldi	r24, 0xC5	; 197
    TWISendStop();
    3706:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    370a:	bb cf       	rjmp	.-138    	; 0x3682 <_ZN6I2Cdev9interruptEv+0x48>
    TWIReceiveBuffer[RXBuffIndex++] = TWDR;
    370c:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <_ZN6I2Cdev11RXBuffIndexE>
    3710:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <_ZN6I2Cdev11RXBuffIndexE+0x1>
    3714:	9c 01       	movw	r18, r24
    3716:	2f 5f       	subi	r18, 0xFF	; 255
    3718:	3f 4f       	sbci	r19, 0xFF	; 255
    371a:	30 93 30 03 	sts	0x0330, r19	; 0x800330 <_ZN6I2Cdev11RXBuffIndexE+0x1>
    371e:	20 93 2f 03 	sts	0x032F, r18	; 0x80032f <_ZN6I2Cdev11RXBuffIndexE>
    3722:	40 91 bb 00 	lds	r20, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3726:	83 5f       	subi	r24, 0xF3	; 243
    3728:	9c 4f       	sbci	r25, 0xFC	; 252
    372a:	fc 01       	movw	r30, r24
    372c:	40 83       	st	Z, r20
    if (RXBuffIndex < RXBuffLen - 1) {
    372e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <_ZN6I2Cdev9RXBuffLenE>
    3732:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <_ZN6I2Cdev9RXBuffLenE+0x1>
    3736:	01 97       	sbiw	r24, 0x01	; 1
    3738:	28 17       	cp	r18, r24
    373a:	39 07       	cpc	r19, r25
    373c:	64 f6       	brge	.-104    	; 0x36d6 <_ZN6I2Cdev9interruptEv+0x9c>
    373e:	df cf       	rjmp	.-66     	; 0x36fe <_ZN6I2Cdev9interruptEv+0xc4>
    TWIReceiveBuffer[RXBuffIndex++] = TWDR;
    3740:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <_ZN6I2Cdev11RXBuffIndexE>
    3744:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <_ZN6I2Cdev11RXBuffIndexE+0x1>
    3748:	9c 01       	movw	r18, r24
    374a:	2f 5f       	subi	r18, 0xFF	; 255
    374c:	3f 4f       	sbci	r19, 0xFF	; 255
    374e:	30 93 30 03 	sts	0x0330, r19	; 0x800330 <_ZN6I2Cdev11RXBuffIndexE+0x1>
    3752:	20 93 2f 03 	sts	0x032F, r18	; 0x80032f <_ZN6I2Cdev11RXBuffIndexE>
    3756:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    375a:	83 5f       	subi	r24, 0xF3	; 243
    375c:	9c 4f       	sbci	r25, 0xFC	; 252
    375e:	fc 01       	movw	r30, r24
    3760:	20 83       	st	Z, r18
    if (TWIInfo.repStart) {
    3762:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN6I2Cdev7TWIInfoE+0x2>
    3766:	88 23       	and	r24, r24
    3768:	29 f0       	breq	.+10     	; 0x3774 <_ZN6I2Cdev9interruptEv+0x13a>
      TWIInfo.errorCode = 0xFF;
    376a:	8f ef       	ldi	r24, 0xFF	; 255
      TWIInfo.errorCode = TWI_STATUS;
    376c:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <_ZN6I2Cdev7TWIInfoE+0x1>
      TWISendStart();
    3770:	85 ea       	ldi	r24, 0xA5	; 165
    3772:	c9 cf       	rjmp	.-110    	; 0x3706 <_ZN6I2Cdev9interruptEv+0xcc>
      TWIInfo.mode = Ready;
    3774:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <_ZN6I2Cdev7TWIInfoE>
      TWIInfo.errorCode = 0xFF;
    3778:	8f ef       	ldi	r24, 0xFF	; 255
      TWIInfo.errorCode = TWI_STATUS;
    377a:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <_ZN6I2Cdev7TWIInfoE+0x1>
    TWISendStop();
    377e:	85 e9       	ldi	r24, 0x95	; 149
    3780:	c2 cf       	rjmp	.-124    	; 0x3706 <_ZN6I2Cdev9interruptEv+0xcc>
      TWIInfo.mode = Ready;
    3782:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <_ZN6I2Cdev7TWIInfoE>
      TWIInfo.errorCode = TWI_STATUS;
    3786:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    378a:	88 7f       	andi	r24, 0xF8	; 248
    378c:	f6 cf       	rjmp	.-20     	; 0x377a <_ZN6I2Cdev9interruptEv+0x140>
    TWIInfo.mode = RepeatedStartSent;
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <_ZN6I2Cdev7TWIInfoE>
    break;
    3794:	08 95       	ret
    TWIInfo.errorCode = TWI_ILLEGAL_START_STOP;
    3796:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <_ZN6I2Cdev7TWIInfoE+0x1>
    TWIInfo.mode = Ready;
    379a:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <_ZN6I2Cdev7TWIInfoE>
    379e:	ef cf       	rjmp	.-34     	; 0x377e <_ZN6I2Cdev9interruptEv+0x144>

000037a0 <__vector_36>:
/** Default timeout value for read operations.
 * Set this to 0 to disable timeout detection.
 */
uint16_t I2Cdev::readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;
ISR(TWI_vect) { I2Cdev::interrupt(); }
    37a0:	1f 92       	push	r1
    37a2:	0f 92       	push	r0
    37a4:	0f b6       	in	r0, 0x3f	; 63
    37a6:	0f 92       	push	r0
    37a8:	11 24       	eor	r1, r1
    37aa:	2f 93       	push	r18
    37ac:	3f 93       	push	r19
    37ae:	4f 93       	push	r20
    37b0:	5f 93       	push	r21
    37b2:	6f 93       	push	r22
    37b4:	7f 93       	push	r23
    37b6:	8f 93       	push	r24
    37b8:	9f 93       	push	r25
    37ba:	af 93       	push	r26
    37bc:	bf 93       	push	r27
    37be:	ef 93       	push	r30
    37c0:	ff 93       	push	r31
    37c2:	3b df       	rcall	.-394    	; 0x363a <_ZN6I2Cdev9interruptEv>
    37c4:	ff 91       	pop	r31
    37c6:	ef 91       	pop	r30
    37c8:	bf 91       	pop	r27
    37ca:	af 91       	pop	r26
    37cc:	9f 91       	pop	r25
    37ce:	8f 91       	pop	r24
    37d0:	7f 91       	pop	r23
    37d2:	6f 91       	pop	r22
    37d4:	5f 91       	pop	r21
    37d6:	4f 91       	pop	r20
    37d8:	3f 91       	pop	r19
    37da:	2f 91       	pop	r18
    37dc:	0f 90       	pop	r0
    37de:	0f be       	out	0x3f, r0	; 63
    37e0:	0f 90       	pop	r0
    37e2:	1f 90       	pop	r1
    37e4:	18 95       	reti

000037e6 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    37e6:	af 92       	push	r10
    37e8:	bf 92       	push	r11
    37ea:	cf 92       	push	r12
    37ec:	df 92       	push	r13
    37ee:	ff 92       	push	r15
    37f0:	0f 93       	push	r16
    37f2:	1f 93       	push	r17
    37f4:	cf 93       	push	r28
    37f6:	df 93       	push	r29
    37f8:	6c 01       	movw	r12, r24
    37fa:	eb 01       	movw	r28, r22
    37fc:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    37fe:	59 d1       	rcall	.+690    	; 0x3ab2 <Endpoint_WaitUntilReady>
    3800:	f8 2e       	mov	r15, r24
    3802:	81 11       	cpse	r24, r1
    3804:	24 c0       	rjmp	.+72     	; 0x384e <Endpoint_Write_Stream_LE+0x68>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3806:	01 15       	cp	r16, r1
    3808:	11 05       	cpc	r17, r1
    380a:	39 f0       	breq	.+14     	; 0x381a <Endpoint_Write_Stream_LE+0x34>
	{
		Length -= *BytesProcessed;
    380c:	f8 01       	movw	r30, r16
    380e:	80 81       	ld	r24, Z
    3810:	91 81       	ldd	r25, Z+1	; 0x01
    3812:	c8 1b       	sub	r28, r24
    3814:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    3816:	c8 0e       	add	r12, r24
    3818:	d9 1e       	adc	r13, r25
{
    381a:	b1 2c       	mov	r11, r1
    381c:	a1 2c       	mov	r10, r1
	}

	while (Length)
    381e:	20 97       	sbiw	r28, 0x00	; 0
    3820:	b1 f0       	breq	.+44     	; 0x384e <Endpoint_Write_Stream_LE+0x68>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3822:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3826:	85 fd       	sbrc	r24, 5
    3828:	22 c0       	rjmp	.+68     	; 0x386e <Endpoint_Write_Stream_LE+0x88>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    382a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    382e:	8e 77       	andi	r24, 0x7E	; 126
    3830:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    3834:	a1 d3       	rcall	.+1858   	; 0x3f78 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    3836:	01 15       	cp	r16, r1
    3838:	11 05       	cpc	r17, r1
    383a:	a1 f0       	breq	.+40     	; 0x3864 <Endpoint_Write_Stream_LE+0x7e>
			{
				*BytesProcessed += BytesInTransfer;
    383c:	f8 01       	movw	r30, r16
    383e:	80 81       	ld	r24, Z
    3840:	91 81       	ldd	r25, Z+1	; 0x01
    3842:	a8 0e       	add	r10, r24
    3844:	b9 1e       	adc	r11, r25
    3846:	b1 82       	std	Z+1, r11	; 0x01
    3848:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    384a:	85 e0       	ldi	r24, 0x05	; 5
    384c:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    384e:	8f 2d       	mov	r24, r15
    3850:	df 91       	pop	r29
    3852:	cf 91       	pop	r28
    3854:	1f 91       	pop	r17
    3856:	0f 91       	pop	r16
    3858:	ff 90       	pop	r15
    385a:	df 90       	pop	r13
    385c:	cf 90       	pop	r12
    385e:	bf 90       	pop	r11
    3860:	af 90       	pop	r10
			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3862:	08 95       	ret
    3864:	26 d1       	rcall	.+588    	; 0x3ab2 <Endpoint_WaitUntilReady>
    3866:	88 23       	and	r24, r24
    3868:	d1 f2       	breq	.-76     	; 0x381e <Endpoint_Write_Stream_LE+0x38>
    386a:	f8 2e       	mov	r15, r24
    386c:	f0 cf       	rjmp	.-32     	; 0x384e <Endpoint_Write_Stream_LE+0x68>
			TEMPLATE_TRANSFER_BYTE(DataStream);
    386e:	f6 01       	movw	r30, r12
    3870:	81 91       	ld	r24, Z+
    3872:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3874:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			Length--;
    3878:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    387a:	ff ef       	ldi	r31, 0xFF	; 255
    387c:	af 1a       	sub	r10, r31
    387e:	bf 0a       	sbc	r11, r31
    3880:	ce cf       	rjmp	.-100    	; 0x381e <Endpoint_Write_Stream_LE+0x38>

00003882 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    3882:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3884:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <USB_ControlRequest+0x6>
    3888:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <USB_ControlRequest+0x7>
    388c:	86 17       	cp	r24, r22
    388e:	97 07       	cpc	r25, r23
    3890:	a0 f0       	brcs	.+40     	; 0x38ba <Endpoint_Write_Control_Stream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3892:	61 15       	cp	r22, r1
    3894:	71 05       	cpc	r23, r1
    3896:	29 f4       	brne	.+10     	; 0x38a2 <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3898:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    389c:	9e 77       	andi	r25, 0x7E	; 126
    389e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    38a2:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    38a4:	61 15       	cp	r22, r1
    38a6:	71 05       	cpc	r23, r1
    38a8:	51 f4       	brne	.+20     	; 0x38be <Endpoint_Write_Control_Stream_LE+0x3c>
    38aa:	91 11       	cpse	r25, r1
    38ac:	08 c0       	rjmp	.+16     	; 0x38be <Endpoint_Write_Control_Stream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    38ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    38b2:	82 ff       	sbrs	r24, 2
    38b4:	37 c0       	rjmp	.+110    	; 0x3924 <Endpoint_Write_Control_Stream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	08 95       	ret
    38ba:	bc 01       	movw	r22, r24
    38bc:	f2 cf       	rjmp	.-28     	; 0x38a2 <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    38be:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    38c2:	88 23       	and	r24, r24
    38c4:	d9 f1       	breq	.+118    	; 0x393c <Endpoint_Write_Control_Stream_LE+0xba>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    38c6:	85 30       	cpi	r24, 0x05	; 5
    38c8:	d9 f1       	breq	.+118    	; 0x3940 <Endpoint_Write_Control_Stream_LE+0xbe>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    38ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    38ce:	83 fd       	sbrc	r24, 3
    38d0:	33 c0       	rjmp	.+102    	; 0x3938 <Endpoint_Write_Control_Stream_LE+0xb6>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    38d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    38d6:	82 fd       	sbrc	r24, 2
    38d8:	ea cf       	rjmp	.-44     	; 0x38ae <Endpoint_Write_Control_Stream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    38da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    38de:	80 ff       	sbrs	r24, 0
    38e0:	e1 cf       	rjmp	.-62     	; 0x38a4 <Endpoint_Write_Control_Stream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    38e2:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    38e6:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    38ea:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    38ec:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <USB_Device_ControlEndpointSize>
    38f0:	50 e0       	ldi	r21, 0x00	; 0
    38f2:	61 15       	cp	r22, r1
    38f4:	71 05       	cpc	r23, r1
    38f6:	19 f0       	breq	.+6      	; 0x38fe <Endpoint_Write_Control_Stream_LE+0x7c>
    38f8:	24 17       	cp	r18, r20
    38fa:	35 07       	cpc	r19, r21
    38fc:	58 f0       	brcs	.+22     	; 0x3914 <Endpoint_Write_Control_Stream_LE+0x92>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    38fe:	91 e0       	ldi	r25, 0x01	; 1
    3900:	42 17       	cp	r20, r18
    3902:	53 07       	cpc	r21, r19
    3904:	09 f0       	breq	.+2      	; 0x3908 <Endpoint_Write_Control_Stream_LE+0x86>
    3906:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3908:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    390c:	2e 77       	andi	r18, 0x7E	; 126
    390e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3912:	c8 cf       	rjmp	.-112    	; 0x38a4 <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3914:	81 91       	ld	r24, Z+
				UEDATX = Data;
    3916:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Length--;
    391a:	61 50       	subi	r22, 0x01	; 1
    391c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    391e:	2f 5f       	subi	r18, 0xFF	; 255
    3920:	3f 4f       	sbci	r19, 0xFF	; 255
    3922:	e4 cf       	rjmp	.-56     	; 0x38ec <Endpoint_Write_Control_Stream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3924:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3928:	88 23       	and	r24, r24
    392a:	41 f0       	breq	.+16     	; 0x393c <Endpoint_Write_Control_Stream_LE+0xba>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    392c:	85 30       	cpi	r24, 0x05	; 5
    392e:	41 f0       	breq	.+16     	; 0x3940 <Endpoint_Write_Control_Stream_LE+0xbe>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3930:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    3934:	83 ff       	sbrs	r24, 3
    3936:	bb cf       	rjmp	.-138    	; 0x38ae <Endpoint_Write_Control_Stream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3938:	81 e0       	ldi	r24, 0x01	; 1
}
    393a:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    393c:	82 e0       	ldi	r24, 0x02	; 2
    393e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3940:	83 e0       	ldi	r24, 0x03	; 3
    3942:	08 95       	ret

00003944 <Endpoint_Write_Control_PStream_LE>:
{
    3944:	fc 01       	movw	r30, r24
	if (Length > USB_ControlRequest.wLength)
    3946:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <USB_ControlRequest+0x6>
    394a:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <USB_ControlRequest+0x7>
    394e:	86 17       	cp	r24, r22
    3950:	97 07       	cpc	r25, r23
    3952:	a0 f0       	brcs	.+40     	; 0x397c <Endpoint_Write_Control_PStream_LE+0x38>
	else if (!(Length))
    3954:	61 15       	cp	r22, r1
    3956:	71 05       	cpc	r23, r1
    3958:	29 f4       	brne	.+10     	; 0x3964 <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    395a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    395e:	8e 77       	andi	r24, 0x7E	; 126
    3960:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3964:	90 e0       	ldi	r25, 0x00	; 0
	while (Length || LastPacketFull)
    3966:	61 15       	cp	r22, r1
    3968:	71 05       	cpc	r23, r1
    396a:	51 f4       	brne	.+20     	; 0x3980 <Endpoint_Write_Control_PStream_LE+0x3c>
    396c:	91 11       	cpse	r25, r1
    396e:	08 c0       	rjmp	.+16     	; 0x3980 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3970:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsOUTReceived()))
    3974:	82 ff       	sbrs	r24, 2
    3976:	3a c0       	rjmp	.+116    	; 0x39ec <Endpoint_Write_Control_PStream_LE+0xa8>
	return ENDPOINT_RWCSTREAM_NoError;
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	08 95       	ret
    397c:	bc 01       	movw	r22, r24
    397e:	f2 cf       	rjmp	.-28     	; 0x3964 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3980:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3984:	88 23       	and	r24, r24
    3986:	09 f4       	brne	.+2      	; 0x398a <Endpoint_Write_Control_PStream_LE+0x46>
    3988:	3d c0       	rjmp	.+122    	; 0x3a04 <Endpoint_Write_Control_PStream_LE+0xc0>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    398a:	85 30       	cpi	r24, 0x05	; 5
    398c:	09 f4       	brne	.+2      	; 0x3990 <Endpoint_Write_Control_PStream_LE+0x4c>
    398e:	3c c0       	rjmp	.+120    	; 0x3a08 <Endpoint_Write_Control_PStream_LE+0xc4>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3990:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    3994:	83 fd       	sbrc	r24, 3
    3996:	34 c0       	rjmp	.+104    	; 0x3a00 <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3998:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    399c:	82 fd       	sbrc	r24, 2
    399e:	e8 cf       	rjmp	.-48     	; 0x3970 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    39a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    39a4:	80 ff       	sbrs	r24, 0
    39a6:	df cf       	rjmp	.-66     	; 0x3966 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    39a8:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    39ac:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    39b0:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    39b2:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <USB_Device_ControlEndpointSize>
    39b6:	50 e0       	ldi	r21, 0x00	; 0
    39b8:	61 15       	cp	r22, r1
    39ba:	71 05       	cpc	r23, r1
    39bc:	19 f0       	breq	.+6      	; 0x39c4 <Endpoint_Write_Control_PStream_LE+0x80>
    39be:	24 17       	cp	r18, r20
    39c0:	35 07       	cpc	r19, r21
    39c2:	58 f0       	brcs	.+22     	; 0x39da <Endpoint_Write_Control_PStream_LE+0x96>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    39c4:	91 e0       	ldi	r25, 0x01	; 1
    39c6:	42 17       	cp	r20, r18
    39c8:	53 07       	cpc	r21, r19
    39ca:	09 f0       	breq	.+2      	; 0x39ce <Endpoint_Write_Control_PStream_LE+0x8a>
    39cc:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    39ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    39d2:	8e 77       	andi	r24, 0x7E	; 126
    39d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    39d8:	c6 cf       	rjmp	.-116    	; 0x3966 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    39da:	84 91       	lpm	r24, Z
				UEDATX = Data;
    39dc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    39e0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    39e2:	61 50       	subi	r22, 0x01	; 1
    39e4:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    39e6:	2f 5f       	subi	r18, 0xFF	; 255
    39e8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ea:	e3 cf       	rjmp	.-58     	; 0x39b2 <Endpoint_Write_Control_PStream_LE+0x6e>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    39ec:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    39f0:	88 23       	and	r24, r24
    39f2:	41 f0       	breq	.+16     	; 0x3a04 <Endpoint_Write_Control_PStream_LE+0xc0>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    39f4:	85 30       	cpi	r24, 0x05	; 5
    39f6:	41 f0       	breq	.+16     	; 0x3a08 <Endpoint_Write_Control_PStream_LE+0xc4>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    39f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    39fc:	83 ff       	sbrs	r24, 3
    39fe:	b8 cf       	rjmp	.-144    	; 0x3970 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3a00:	81 e0       	ldi	r24, 0x01	; 1
}
    3a02:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3a04:	82 e0       	ldi	r24, 0x02	; 2
    3a06:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3a08:	83 e0       	ldi	r24, 0x03	; 3
    3a0a:	08 95       	ret

00003a0c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    3a0c:	98 2f       	mov	r25, r24
    3a0e:	97 30       	cpi	r25, 0x07	; 7
    3a10:	28 f0       	brcs	.+10     	; 0x3a1c <Endpoint_ConfigureEndpoint_Prv+0x10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3a12:	8f 70       	andi	r24, 0x0F	; 15
    3a14:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	08 95       	ret
    3a1c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UECFG1XTemp = UECFG1XData;
    3a20:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
    3a22:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
    3a24:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
    3a26:	98 17       	cp	r25, r24
    3a28:	31 f0       	breq	.+12     	; 0x3a36 <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
    3a2a:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			UECFG1XTemp = UECFG1X;
    3a2e:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			UEIENXTemp  = UEIENX;
    3a32:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
    3a36:	21 fd       	sbrc	r18, 1
    3a38:	02 c0       	rjmp	.+4      	; 0x3a3e <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    3a3a:	9f 5f       	subi	r25, 0xFF	; 255
    3a3c:	e8 cf       	rjmp	.-48     	; 0x3a0e <Endpoint_ConfigureEndpoint_Prv+0x2>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    3a3e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3a42:	3e 7f       	andi	r19, 0xFE	; 254
    3a44:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG1X &= ~(1 << ALLOC);
    3a48:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    3a4c:	3d 7f       	andi	r19, 0xFD	; 253
    3a4e:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
				UECONX |= (1 << EPEN);
    3a52:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3a56:	31 60       	ori	r19, 0x01	; 1
    3a58:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = UECFG0XTemp;
    3a5c:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = UECFG1XTemp;
    3a60:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX  = UEIENXTemp;
    3a64:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    3a68:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		if (!(Endpoint_IsConfigured()))
    3a6c:	27 fd       	sbrc	r18, 7
    3a6e:	e5 cf       	rjmp	.-54     	; 0x3a3a <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
    3a70:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    3a72:	08 95       	ret

00003a74 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3a74:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <USB_ControlRequest>
    3a78:	87 ff       	sbrs	r24, 7
    3a7a:	13 c0       	rjmp	.+38     	; 0x3aa2 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3a7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    3a80:	82 ff       	sbrs	r24, 2
    3a82:	06 c0       	rjmp	.+12     	; 0x3a90 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3a84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3a88:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3a8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3a8e:	04 c0       	rjmp	.+8      	; 0x3a98 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3a90:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <USB_DeviceState>
    3a94:	81 11       	cpse	r24, r1
    3a96:	f2 cf       	rjmp	.-28     	; 0x3a7c <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    3a98:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3a9a:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <USB_DeviceState>
    3a9e:	88 23       	and	r24, r24
    3aa0:	d9 f3       	breq	.-10     	; 0x3a98 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3aa2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    3aa6:	80 ff       	sbrs	r24, 0
    3aa8:	f8 cf       	rjmp	.-16     	; 0x3a9a <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3aaa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3aae:	8e 77       	andi	r24, 0x7E	; 126
    3ab0:	ec cf       	rjmp	.-40     	; 0x3a8a <Endpoint_ClearStatusStage+0x16>

00003ab2 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    3ab2:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    3ab6:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    3aba:	85 e6       	ldi	r24, 0x65	; 101
    3abc:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3abe:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    3ac2:	90 ff       	sbrs	r25, 0
    3ac4:	06 c0       	rjmp	.+12     	; 0x3ad2 <Endpoint_WaitUntilReady+0x20>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3ac6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    3aca:	90 ff       	sbrs	r25, 0
    3acc:	06 c0       	rjmp	.+12     	; 0x3ada <Endpoint_WaitUntilReady+0x28>
			  return ENDPOINT_READYWAIT_NoError;
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3ad2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    3ad6:	92 fd       	sbrc	r25, 2
    3ad8:	fa cf       	rjmp	.-12     	; 0x3ace <Endpoint_WaitUntilReady+0x1c>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3ada:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3ade:	99 23       	and	r25, r25
    3ae0:	89 f0       	breq	.+34     	; 0x3b04 <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3ae2:	95 30       	cpi	r25, 0x05	; 5
    3ae4:	89 f0       	breq	.+34     	; 0x3b08 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3ae6:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    3aea:	95 fd       	sbrc	r25, 5
    3aec:	0f c0       	rjmp	.+30     	; 0x3b0c <Endpoint_WaitUntilReady+0x5a>
    3aee:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    3af2:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    3af6:	42 17       	cp	r20, r18
    3af8:	53 07       	cpc	r21, r19
    3afa:	09 f3       	breq	.-62     	; 0x3abe <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    3afc:	81 50       	subi	r24, 0x01	; 1
    3afe:	f1 f6       	brne	.-68     	; 0x3abc <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    3b00:	84 e0       	ldi	r24, 0x04	; 4
    3b02:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    3b04:	82 e0       	ldi	r24, 0x02	; 2
    3b06:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    3b08:	83 e0       	ldi	r24, 0x03	; 3
    3b0a:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    3b0e:	08 95       	ret

00003b10 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3b10:	1f 92       	push	r1
    3b12:	0f 92       	push	r0
    3b14:	0f b6       	in	r0, 0x3f	; 63
    3b16:	0f 92       	push	r0
    3b18:	11 24       	eor	r1, r1
    3b1a:	2f 93       	push	r18
    3b1c:	3f 93       	push	r19
    3b1e:	4f 93       	push	r20
    3b20:	5f 93       	push	r21
    3b22:	6f 93       	push	r22
    3b24:	7f 93       	push	r23
    3b26:	8f 93       	push	r24
    3b28:	9f 93       	push	r25
    3b2a:	af 93       	push	r26
    3b2c:	bf 93       	push	r27
    3b2e:	ef 93       	push	r30
    3b30:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    3b32:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3b36:	82 ff       	sbrs	r24, 2
    3b38:	0a c0       	rjmp	.+20     	; 0x3b4e <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
    3b3a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3b3e:	82 ff       	sbrs	r24, 2
    3b40:	06 c0       	rjmp	.+12     	; 0x3b4e <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
    3b42:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3b46:	8b 7f       	andi	r24, 0xFB	; 251
    3b48:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    3b4c:	14 d2       	rcall	.+1064   	; 0x3f76 <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
    3b4e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    3b52:	80 ff       	sbrs	r24, 0
    3b54:	18 c0       	rjmp	.+48     	; 0x3b86 <__vector_10+0x76>
						return (USBCON & (1 << VBUSTE));
    3b56:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    3b5a:	80 ff       	sbrs	r24, 0
    3b5c:	14 c0       	rjmp	.+40     	; 0x3b86 <__vector_10+0x76>
						USBINT &= ~(1 << VBUSTI);
    3b5e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    3b62:	8e 7f       	andi	r24, 0xFE	; 254
    3b64:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    3b68:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3b6c:	19 bc       	out	0x29, r1	; 41
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    3b6e:	80 ff       	sbrs	r24, 0
    3b70:	93 c0       	rjmp	.+294    	; 0x3c98 <__vector_10+0x188>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3b72:	82 e0       	ldi	r24, 0x02	; 2
    3b74:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    3b76:	09 b4       	in	r0, 0x29	; 41
    3b78:	00 fe       	sbrs	r0, 0
    3b7a:	fd cf       	rjmp	.-6      	; 0x3b76 <__vector_10+0x66>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    3b82:	0e 94 8e 07 	call	0xf1c	; 0xf1c <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    3b86:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3b8a:	80 ff       	sbrs	r24, 0
    3b8c:	18 c0       	rjmp	.+48     	; 0x3bbe <__vector_10+0xae>
						return (UDIEN  & (1 << SUSPE));
    3b8e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3b92:	80 ff       	sbrs	r24, 0
    3b94:	14 c0       	rjmp	.+40     	; 0x3bbe <__vector_10+0xae>
						UDIEN  &= ~(1 << SUSPE);
    3b96:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3b9a:	8e 7f       	andi	r24, 0xFE	; 254
    3b9c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    3ba0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3ba4:	80 61       	ori	r24, 0x10	; 16
    3ba6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    3baa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    3bae:	80 62       	ori	r24, 0x20	; 32
    3bb0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    3bb4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3bb6:	85 e0       	ldi	r24, 0x05	; 5
    3bb8:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    3bbc:	dc d1       	rcall	.+952    	; 0x3f76 <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
    3bbe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3bc2:	84 ff       	sbrs	r24, 4
    3bc4:	27 c0       	rjmp	.+78     	; 0x3c14 <__vector_10+0x104>
						return (UDIEN  & (1 << WAKEUPE));
    3bc6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3bca:	84 ff       	sbrs	r24, 4
    3bcc:	23 c0       	rjmp	.+70     	; 0x3c14 <__vector_10+0x104>
				PLLCSR = USB_PLL_PSC;
    3bce:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3bd0:	82 e0       	ldi	r24, 0x02	; 2
    3bd2:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3bd4:	09 b4       	in	r0, 0x29	; 41
    3bd6:	00 fe       	sbrs	r0, 0
    3bd8:	fd cf       	rjmp	.-6      	; 0x3bd4 <__vector_10+0xc4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3bda:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    3bde:	8f 7d       	andi	r24, 0xDF	; 223
    3be0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    3be4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3be8:	8f 7e       	andi	r24, 0xEF	; 239
    3bea:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    3bee:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3bf2:	8f 7e       	andi	r24, 0xEF	; 239
    3bf4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    3bf8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3bfc:	81 60       	ori	r24, 0x01	; 1
    3bfe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3c02:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <USB_Device_ConfigurationNumber>
    3c06:	88 23       	and	r24, r24
    3c08:	09 f4       	brne	.+2      	; 0x3c0c <__vector_10+0xfc>
    3c0a:	4b c0       	rjmp	.+150    	; 0x3ca2 <__vector_10+0x192>
		  USB_DeviceState = DEVICE_STATE_Configured;
    3c0c:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3c0e:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3c12:	b1 d1       	rcall	.+866    	; 0x3f76 <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
    3c14:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3c18:	83 ff       	sbrs	r24, 3
    3c1a:	2d c0       	rjmp	.+90     	; 0x3c76 <__vector_10+0x166>
						return (UDIEN  & (1 << EORSTE));
    3c1c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3c20:	83 ff       	sbrs	r24, 3
    3c22:	29 c0       	rjmp	.+82     	; 0x3c76 <__vector_10+0x166>
						UDINT  &= ~(1 << EORSTI);
    3c24:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3c28:	87 7f       	andi	r24, 0xF7	; 247
    3c2a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3c2e:	82 e0       	ldi	r24, 0x02	; 2
    3c30:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    3c34:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    3c38:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3c3c:	8e 7f       	andi	r24, 0xFE	; 254
    3c3e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    3c42:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3c46:	8e 7f       	andi	r24, 0xFE	; 254
    3c48:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    3c4c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3c50:	80 61       	ori	r24, 0x10	; 16
    3c52:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		USB_INT_Clear(USB_INT_SUSPI);
		USB_INT_Disable(USB_INT_SUSPI);
		USB_INT_Enable(USB_INT_WAKEUPI);

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    3c56:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <USB_Device_ControlEndpointSize>
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    3c5c:	88 e0       	ldi	r24, 0x08	; 8
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
				uint8_t  MaskVal    = 0;
    3c60:	40 e0       	ldi	r20, 0x00	; 0

				while (CheckBytes < Bytes)
    3c62:	82 17       	cp	r24, r18
    3c64:	93 07       	cpc	r25, r19
    3c66:	28 f1       	brcs	.+74     	; 0x3cb2 <__vector_10+0x1a2>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    3c68:	42 95       	swap	r20
    3c6a:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3c6c:	42 60       	ori	r20, 0x02	; 2
    3c6e:	60 e0       	ldi	r22, 0x00	; 0
    3c70:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3c72:	cc de       	rcall	.-616    	; 0x3a0c <Endpoint_ConfigureEndpoint_Prv>
    3c74:	80 d1       	rcall	.+768    	; 0x3f76 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3c76:	ff 91       	pop	r31
    3c78:	ef 91       	pop	r30
    3c7a:	bf 91       	pop	r27
    3c7c:	af 91       	pop	r26
    3c7e:	9f 91       	pop	r25
    3c80:	8f 91       	pop	r24
    3c82:	7f 91       	pop	r23
    3c84:	6f 91       	pop	r22
    3c86:	5f 91       	pop	r21
    3c88:	4f 91       	pop	r20
    3c8a:	3f 91       	pop	r19
    3c8c:	2f 91       	pop	r18
    3c8e:	0f 90       	pop	r0
    3c90:	0f be       	out	0x3f, r0	; 63
    3c92:	0f 90       	pop	r0
    3c94:	1f 90       	pop	r1
    3c96:	18 95       	reti
			USB_DeviceState = DEVICE_STATE_Unattached;
    3c98:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    3c9c:	0e 94 96 07 	call	0xf2c	; 0xf2c <EVENT_USB_Device_Disconnect>
    3ca0:	72 cf       	rjmp	.-284    	; 0x3b86 <__vector_10+0x76>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3ca2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3ca6:	87 fd       	sbrc	r24, 7
    3ca8:	02 c0       	rjmp	.+4      	; 0x3cae <__vector_10+0x19e>
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	b0 cf       	rjmp	.-160    	; 0x3c0e <__vector_10+0xfe>
    3cae:	83 e0       	ldi	r24, 0x03	; 3
    3cb0:	ae cf       	rjmp	.-164    	; 0x3c0e <__vector_10+0xfe>
					MaskVal++;
    3cb2:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    3cb4:	88 0f       	add	r24, r24
    3cb6:	99 1f       	adc	r25, r25
    3cb8:	d4 cf       	rjmp	.-88     	; 0x3c62 <__vector_10+0x152>

00003cba <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3cba:	1f 93       	push	r17
    3cbc:	cf 93       	push	r28
    3cbe:	df 93       	push	r29
    3cc0:	cd b7       	in	r28, 0x3d	; 61
    3cc2:	de b7       	in	r29, 0x3e	; 62
    3cc4:	aa 97       	sbiw	r28, 0x2a	; 42
    3cc6:	0f b6       	in	r0, 0x3f	; 63
    3cc8:	f8 94       	cli
    3cca:	de bf       	out	0x3e, r29	; 62
    3ccc:	0f be       	out	0x3f, r0	; 63
    3cce:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    3cd0:	81 e5       	ldi	r24, 0x51	; 81
    3cd2:	93 e0       	ldi	r25, 0x03	; 3
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3cd4:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3cd8:	fc 01       	movw	r30, r24
    3cda:	21 93       	st	Z+, r18
    3cdc:	cf 01       	movw	r24, r30
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3cde:	f3 e0       	ldi	r31, 0x03	; 3
    3ce0:	89 35       	cpi	r24, 0x59	; 89
    3ce2:	9f 07       	cpc	r25, r31
    3ce4:	b9 f7       	brne	.-18     	; 0x3cd4 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    3ce6:	0e 94 a8 07 	call	0xf50	; 0xf50 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3cea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    3cee:	83 ff       	sbrs	r24, 3
    3cf0:	11 c0       	rjmp	.+34     	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3cf2:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    3cf6:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <USB_ControlRequest+0x1>
    3cfa:	85 30       	cpi	r24, 0x05	; 5
    3cfc:	09 f4       	brne	.+2      	; 0x3d00 <USB_Device_ProcessControlRequest+0x46>
    3cfe:	c3 c0       	rjmp	.+390    	; 0x3e86 <USB_Device_ProcessControlRequest+0x1cc>
    3d00:	08 f5       	brcc	.+66     	; 0x3d44 <USB_Device_ProcessControlRequest+0x8a>
    3d02:	81 30       	cpi	r24, 0x01	; 1
    3d04:	09 f4       	brne	.+2      	; 0x3d08 <USB_Device_ProcessControlRequest+0x4e>
    3d06:	8c c0       	rjmp	.+280    	; 0x3e20 <USB_Device_ProcessControlRequest+0x166>
    3d08:	88 23       	and	r24, r24
    3d0a:	09 f4       	brne	.+2      	; 0x3d0e <USB_Device_ProcessControlRequest+0x54>
    3d0c:	61 c0       	rjmp	.+194    	; 0x3dd0 <USB_Device_ProcessControlRequest+0x116>
    3d0e:	83 30       	cpi	r24, 0x03	; 3
    3d10:	09 f4       	brne	.+2      	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
    3d12:	86 c0       	rjmp	.+268    	; 0x3e20 <USB_Device_ProcessControlRequest+0x166>
    3d14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3d18:	83 ff       	sbrs	r24, 3
    3d1a:	0a c0       	rjmp	.+20     	; 0x3d30 <USB_Device_ProcessControlRequest+0x76>
				UEINTX &= ~(1 << RXSTPI);
    3d1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3d20:	87 7f       	andi	r24, 0xF7	; 247
    3d22:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    3d26:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3d2a:	80 62       	ori	r24, 0x20	; 32
    3d2c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    3d30:	aa 96       	adiw	r28, 0x2a	; 42
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	f8 94       	cli
    3d36:	de bf       	out	0x3e, r29	; 62
    3d38:	0f be       	out	0x3f, r0	; 63
    3d3a:	cd bf       	out	0x3d, r28	; 61
    3d3c:	df 91       	pop	r29
    3d3e:	cf 91       	pop	r28
    3d40:	1f 91       	pop	r17
    3d42:	08 95       	ret
    3d44:	88 30       	cpi	r24, 0x08	; 8
    3d46:	09 f4       	brne	.+2      	; 0x3d4a <USB_Device_ProcessControlRequest+0x90>
    3d48:	d6 c0       	rjmp	.+428    	; 0x3ef6 <USB_Device_ProcessControlRequest+0x23c>
    3d4a:	89 30       	cpi	r24, 0x09	; 9
    3d4c:	09 f4       	brne	.+2      	; 0x3d50 <USB_Device_ProcessControlRequest+0x96>
    3d4e:	e0 c0       	rjmp	.+448    	; 0x3f10 <USB_Device_ProcessControlRequest+0x256>
    3d50:	86 30       	cpi	r24, 0x06	; 6
    3d52:	01 f7       	brne	.-64     	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3d54:	90 58       	subi	r25, 0x80	; 128
    3d56:	92 30       	cpi	r25, 0x02	; 2
    3d58:	e8 f6       	brcc	.-70     	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3d5a:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <USB_ControlRequest+0x2>
    3d5e:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <USB_ControlRequest+0x3>
    3d62:	8c 3d       	cpi	r24, 0xDC	; 220
    3d64:	23 e0       	ldi	r18, 0x03	; 3
    3d66:	92 07       	cpc	r25, r18
    3d68:	09 f0       	breq	.+2      	; 0x3d6c <USB_Device_ProcessControlRequest+0xb2>
    3d6a:	af c0       	rjmp	.+350    	; 0x3eca <USB_Device_ProcessControlRequest+0x210>
	SignatureDescriptor.Header.Type = DTYPE_String;
    3d6c:	83 e0       	ldi	r24, 0x03	; 3
    3d6e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3d70:	8a e2       	ldi	r24, 0x2A	; 42
    3d72:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3d74:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3d76:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3d78:	de 01       	movw	r26, r28
    3d7a:	13 96       	adiw	r26, 0x03	; 3
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3d7e:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3d80:	51 e2       	ldi	r21, 0x21	; 33
    3d82:	e3 2f       	mov	r30, r19
    3d84:	f0 e0       	ldi	r31, 0x00	; 0
    3d86:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    3d8a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    3d8c:	20 ff       	sbrs	r18, 0
    3d8e:	03 c0       	rjmp	.+6      	; 0x3d96 <USB_Device_ProcessControlRequest+0xdc>
					{
						SerialByte >>= 4;
    3d90:	e2 95       	swap	r30
    3d92:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    3d94:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    3d96:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3d98:	8e 2f       	mov	r24, r30
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	ea 30       	cpi	r30, 0x0A	; 10
    3d9e:	08 f4       	brcc	.+2      	; 0x3da2 <USB_Device_ProcessControlRequest+0xe8>
    3da0:	92 c0       	rjmp	.+292    	; 0x3ec6 <USB_Device_ProcessControlRequest+0x20c>
    3da2:	c7 96       	adiw	r24, 0x37	; 55
    3da4:	8d 93       	st	X+, r24
    3da6:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3da8:	2f 5f       	subi	r18, 0xFF	; 255
    3daa:	24 31       	cpi	r18, 0x14	; 20
    3dac:	51 f7       	brne	.-44     	; 0x3d82 <USB_Device_ProcessControlRequest+0xc8>
				SREG = GlobalIntState;
    3dae:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    3db0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3db4:	87 7f       	andi	r24, 0xF7	; 247
    3db6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3dba:	6a e2       	ldi	r22, 0x2A	; 42
    3dbc:	70 e0       	ldi	r23, 0x00	; 0
    3dbe:	ce 01       	movw	r24, r28
    3dc0:	01 96       	adiw	r24, 0x01	; 1
    3dc2:	5f dd       	rcall	.-1346   	; 0x3882 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3dc4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3dc8:	8b 77       	andi	r24, 0x7B	; 123
    3dca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3dce:	a2 cf       	rjmp	.-188    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3dd0:	90 38       	cpi	r25, 0x80	; 128
    3dd2:	99 f0       	breq	.+38     	; 0x3dfa <USB_Device_ProcessControlRequest+0x140>
    3dd4:	92 38       	cpi	r25, 0x82	; 130
    3dd6:	09 f0       	breq	.+2      	; 0x3dda <USB_Device_ProcessControlRequest+0x120>
    3dd8:	9d cf       	rjmp	.-198    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3dda:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <USB_ControlRequest+0x4>
    3dde:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    3de0:	87 30       	cpi	r24, 0x07	; 7
    3de2:	08 f0       	brcs	.+2      	; 0x3de6 <USB_Device_ProcessControlRequest+0x12c>
    3de4:	97 cf       	rjmp	.-210    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3de6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3dea:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3dee:	85 fb       	bst	r24, 5
    3df0:	88 27       	eor	r24, r24
    3df2:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3df4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3df8:	06 c0       	rjmp	.+12     	; 0x3e06 <USB_Device_ProcessControlRequest+0x14c>
	uint8_t CurrentStatus = 0;
    3dfa:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    3dfe:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <USB_Device_RemoteWakeupEnabled>
    3e02:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3e04:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    3e06:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3e0a:	97 7f       	andi	r25, 0xF7	; 247
    3e0c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3e10:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    3e14:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3e18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3e1c:	8e 77       	andi	r24, 0x7E	; 126
    3e1e:	a7 c0       	rjmp	.+334    	; 0x3f6e <USB_Device_ProcessControlRequest+0x2b4>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3e20:	99 23       	and	r25, r25
    3e22:	09 f4       	brne	.+2      	; 0x3e26 <USB_Device_ProcessControlRequest+0x16c>
    3e24:	94 c0       	rjmp	.+296    	; 0x3f4e <USB_Device_ProcessControlRequest+0x294>
    3e26:	92 30       	cpi	r25, 0x02	; 2
    3e28:	09 f0       	breq	.+2      	; 0x3e2c <USB_Device_ProcessControlRequest+0x172>
    3e2a:	74 cf       	rjmp	.-280    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    3e2c:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <USB_ControlRequest+0x2>
    3e30:	91 11       	cpse	r25, r1
    3e32:	98 c0       	rjmp	.+304    	; 0x3f64 <USB_Device_ProcessControlRequest+0x2aa>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3e34:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <USB_ControlRequest+0x4>
    3e38:	9f 70       	andi	r25, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    3e3a:	2f ef       	ldi	r18, 0xFF	; 255
    3e3c:	29 0f       	add	r18, r25
    3e3e:	26 30       	cpi	r18, 0x06	; 6
    3e40:	08 f0       	brcs	.+2      	; 0x3e44 <USB_Device_ProcessControlRequest+0x18a>
    3e42:	68 cf       	rjmp	.-304    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e44:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    3e48:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3e4c:	20 ff       	sbrs	r18, 0
    3e4e:	8a c0       	rjmp	.+276    	; 0x3f64 <USB_Device_ProcessControlRequest+0x2aa>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3e50:	83 30       	cpi	r24, 0x03	; 3
    3e52:	31 f4       	brne	.+12     	; 0x3e60 <USB_Device_ProcessControlRequest+0x1a6>
				UECONX |= (1 << STALLRQ);
    3e54:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3e58:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    3e5a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3e5e:	82 c0       	rjmp	.+260    	; 0x3f64 <USB_Device_ProcessControlRequest+0x2aa>
				UECONX |= (1 << STALLRQC);
    3e60:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3e64:	80 61       	ori	r24, 0x10	; 16
    3e66:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    3e6a:	21 e0       	ldi	r18, 0x01	; 1
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	01 c0       	rjmp	.+2      	; 0x3e72 <USB_Device_ProcessControlRequest+0x1b8>
    3e70:	22 0f       	add	r18, r18
    3e72:	9a 95       	dec	r25
    3e74:	ea f7       	brpl	.-6      	; 0x3e70 <USB_Device_ProcessControlRequest+0x1b6>
    3e76:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    3e7a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    3e7e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3e82:	88 60       	ori	r24, 0x08	; 8
    3e84:	ea cf       	rjmp	.-44     	; 0x3e5a <USB_Device_ProcessControlRequest+0x1a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3e86:	91 11       	cpse	r25, r1
    3e88:	45 cf       	rjmp	.-374    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3e8a:	10 91 53 03 	lds	r17, 0x0353	; 0x800353 <USB_ControlRequest+0x2>
    3e8e:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3e90:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3e94:	80 78       	andi	r24, 0x80	; 128
    3e96:	81 2b       	or	r24, r17
    3e98:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    3e9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3ea0:	87 7f       	andi	r24, 0xF7	; 247
    3ea2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    3ea6:	e6 dd       	rcall	.-1076   	; 0x3a74 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3ea8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    3eac:	80 ff       	sbrs	r24, 0
    3eae:	fc cf       	rjmp	.-8      	; 0x3ea8 <USB_Device_ProcessControlRequest+0x1ee>
				UDADDR |= (1 << ADDEN);
    3eb0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3eb4:	80 68       	ori	r24, 0x80	; 128
    3eb6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3eba:	82 e0       	ldi	r24, 0x02	; 2
    3ebc:	11 11       	cpse	r17, r1
    3ebe:	83 e0       	ldi	r24, 0x03	; 3
    3ec0:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <USB_DeviceState>
    3ec4:	27 cf       	rjmp	.-434    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3ec6:	c0 96       	adiw	r24, 0x30	; 48
    3ec8:	6d cf       	rjmp	.-294    	; 0x3da4 <USB_Device_ProcessControlRequest+0xea>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3eca:	60 91 55 03 	lds	r22, 0x0355	; 0x800355 <USB_ControlRequest+0x4>
    3ece:	70 91 56 03 	lds	r23, 0x0356	; 0x800356 <USB_ControlRequest+0x5>
    3ed2:	ae 01       	movw	r20, r28
    3ed4:	4f 5f       	subi	r20, 0xFF	; 255
    3ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed8:	0e 94 57 07 	call	0xeae	; 0xeae <CALLBACK_USB_GetDescriptor>
    3edc:	bc 01       	movw	r22, r24
    3ede:	89 2b       	or	r24, r25
    3ee0:	09 f4       	brne	.+2      	; 0x3ee4 <USB_Device_ProcessControlRequest+0x22a>
    3ee2:	18 cf       	rjmp	.-464    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
				UEINTX &= ~(1 << RXSTPI);
    3ee4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3ee8:	97 7f       	andi	r25, 0xF7	; 247
    3eea:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3eee:	89 81       	ldd	r24, Y+1	; 0x01
    3ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef2:	28 dd       	rcall	.-1456   	; 0x3944 <Endpoint_Write_Control_PStream_LE>
    3ef4:	67 cf       	rjmp	.-306    	; 0x3dc4 <USB_Device_ProcessControlRequest+0x10a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3ef6:	90 38       	cpi	r25, 0x80	; 128
    3ef8:	09 f0       	breq	.+2      	; 0x3efc <USB_Device_ProcessControlRequest+0x242>
    3efa:	0c cf       	rjmp	.-488    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
    3efc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3f00:	87 7f       	andi	r24, 0xF7	; 247
    3f02:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3f06:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    3f0a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3f0e:	84 cf       	rjmp	.-248    	; 0x3e18 <USB_Device_ProcessControlRequest+0x15e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3f10:	91 11       	cpse	r25, r1
    3f12:	00 cf       	rjmp	.-512    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3f14:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <USB_ControlRequest+0x2>
    3f18:	92 30       	cpi	r25, 0x02	; 2
    3f1a:	08 f0       	brcs	.+2      	; 0x3f1e <USB_Device_ProcessControlRequest+0x264>
    3f1c:	fb ce       	rjmp	.-522    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
				UEINTX &= ~(1 << RXSTPI);
    3f1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3f22:	87 7f       	andi	r24, 0xF7	; 247
    3f24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3f28:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    3f2c:	a3 dd       	rcall	.-1210   	; 0x3a74 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    3f2e:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <USB_Device_ConfigurationNumber>
    3f32:	88 23       	and	r24, r24
    3f34:	11 f0       	breq	.+4      	; 0x3f3a <USB_Device_ProcessControlRequest+0x280>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3f36:	84 e0       	ldi	r24, 0x04	; 4
    3f38:	05 c0       	rjmp	.+10     	; 0x3f44 <USB_Device_ProcessControlRequest+0x28a>
				return (UDADDR & (1 << ADDEN));
    3f3a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3f3e:	87 fd       	sbrc	r24, 7
    3f40:	fa cf       	rjmp	.-12     	; 0x3f36 <USB_Device_ProcessControlRequest+0x27c>
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    3f48:	0e 94 9e 07 	call	0xf3c	; 0xf3c <EVENT_USB_Device_ConfigurationChanged>
    3f4c:	e3 ce       	rjmp	.-570    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3f4e:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <USB_ControlRequest+0x2>
    3f52:	91 30       	cpi	r25, 0x01	; 1
    3f54:	09 f0       	breq	.+2      	; 0x3f58 <USB_Device_ProcessControlRequest+0x29e>
    3f56:	de ce       	rjmp	.-580    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3f58:	91 e0       	ldi	r25, 0x01	; 1
    3f5a:	83 30       	cpi	r24, 0x03	; 3
    3f5c:	09 f0       	breq	.+2      	; 0x3f60 <USB_Device_ProcessControlRequest+0x2a6>
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3f64:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    3f68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3f6c:	87 7f       	andi	r24, 0xF7	; 247
    3f6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3f72:	80 dd       	rcall	.-1280   	; 0x3a74 <Endpoint_ClearStatusStage>
    3f74:	cf ce       	rjmp	.-610    	; 0x3d14 <USB_Device_ProcessControlRequest+0x5a>

00003f76 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    3f76:	08 95       	ret

00003f78 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3f78:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3f7a:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <USB_DeviceState>
    3f7e:	88 23       	and	r24, r24
    3f80:	91 f0       	breq	.+36     	; 0x3fa6 <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3f82:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3f86:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3f88:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    3f8c:	80 fd       	sbrc	r24, 0
    3f8e:	0d c0       	rjmp	.+26     	; 0x3faa <USB_USBTask+0x32>
    3f90:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3f92:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3f94:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3f98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    3f9c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    3f9e:	8d de       	rcall	.-742    	; 0x3cba <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3fa0:	cf 70       	andi	r28, 0x0F	; 15
    3fa2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    3fa6:	cf 91       	pop	r28
    3fa8:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3faa:	80 e8       	ldi	r24, 0x80	; 128
    3fac:	f2 cf       	rjmp	.-28     	; 0x3f92 <USB_USBTask+0x1a>

00003fae <__subsf3>:
    3fae:	50 58       	subi	r21, 0x80	; 128

00003fb0 <__addsf3>:
    3fb0:	bb 27       	eor	r27, r27
    3fb2:	aa 27       	eor	r26, r26
    3fb4:	0e d0       	rcall	.+28     	; 0x3fd2 <__addsf3x>
    3fb6:	f7 c1       	rjmp	.+1006   	; 0x43a6 <__fp_round>
    3fb8:	e8 d1       	rcall	.+976    	; 0x438a <__fp_pscA>
    3fba:	30 f0       	brcs	.+12     	; 0x3fc8 <__addsf3+0x18>
    3fbc:	ed d1       	rcall	.+986    	; 0x4398 <__fp_pscB>
    3fbe:	20 f0       	brcs	.+8      	; 0x3fc8 <__addsf3+0x18>
    3fc0:	31 f4       	brne	.+12     	; 0x3fce <__addsf3+0x1e>
    3fc2:	9f 3f       	cpi	r25, 0xFF	; 255
    3fc4:	11 f4       	brne	.+4      	; 0x3fca <__addsf3+0x1a>
    3fc6:	1e f4       	brtc	.+6      	; 0x3fce <__addsf3+0x1e>
    3fc8:	b8 c1       	rjmp	.+880    	; 0x433a <__fp_nan>
    3fca:	0e f4       	brtc	.+2      	; 0x3fce <__addsf3+0x1e>
    3fcc:	e0 95       	com	r30
    3fce:	e7 fb       	bst	r30, 7
    3fd0:	ae c1       	rjmp	.+860    	; 0x432e <__fp_inf>

00003fd2 <__addsf3x>:
    3fd2:	e9 2f       	mov	r30, r25
    3fd4:	f9 d1       	rcall	.+1010   	; 0x43c8 <__fp_split3>
    3fd6:	80 f3       	brcs	.-32     	; 0x3fb8 <__addsf3+0x8>
    3fd8:	ba 17       	cp	r27, r26
    3fda:	62 07       	cpc	r22, r18
    3fdc:	73 07       	cpc	r23, r19
    3fde:	84 07       	cpc	r24, r20
    3fe0:	95 07       	cpc	r25, r21
    3fe2:	18 f0       	brcs	.+6      	; 0x3fea <__addsf3x+0x18>
    3fe4:	71 f4       	brne	.+28     	; 0x4002 <__addsf3x+0x30>
    3fe6:	9e f5       	brtc	.+102    	; 0x404e <__addsf3x+0x7c>
    3fe8:	11 c2       	rjmp	.+1058   	; 0x440c <__fp_zero>
    3fea:	0e f4       	brtc	.+2      	; 0x3fee <__addsf3x+0x1c>
    3fec:	e0 95       	com	r30
    3fee:	0b 2e       	mov	r0, r27
    3ff0:	ba 2f       	mov	r27, r26
    3ff2:	a0 2d       	mov	r26, r0
    3ff4:	0b 01       	movw	r0, r22
    3ff6:	b9 01       	movw	r22, r18
    3ff8:	90 01       	movw	r18, r0
    3ffa:	0c 01       	movw	r0, r24
    3ffc:	ca 01       	movw	r24, r20
    3ffe:	a0 01       	movw	r20, r0
    4000:	11 24       	eor	r1, r1
    4002:	ff 27       	eor	r31, r31
    4004:	59 1b       	sub	r21, r25
    4006:	99 f0       	breq	.+38     	; 0x402e <__addsf3x+0x5c>
    4008:	59 3f       	cpi	r21, 0xF9	; 249
    400a:	50 f4       	brcc	.+20     	; 0x4020 <__addsf3x+0x4e>
    400c:	50 3e       	cpi	r21, 0xE0	; 224
    400e:	68 f1       	brcs	.+90     	; 0x406a <__addsf3x+0x98>
    4010:	1a 16       	cp	r1, r26
    4012:	f0 40       	sbci	r31, 0x00	; 0
    4014:	a2 2f       	mov	r26, r18
    4016:	23 2f       	mov	r18, r19
    4018:	34 2f       	mov	r19, r20
    401a:	44 27       	eor	r20, r20
    401c:	58 5f       	subi	r21, 0xF8	; 248
    401e:	f3 cf       	rjmp	.-26     	; 0x4006 <__addsf3x+0x34>
    4020:	46 95       	lsr	r20
    4022:	37 95       	ror	r19
    4024:	27 95       	ror	r18
    4026:	a7 95       	ror	r26
    4028:	f0 40       	sbci	r31, 0x00	; 0
    402a:	53 95       	inc	r21
    402c:	c9 f7       	brne	.-14     	; 0x4020 <__addsf3x+0x4e>
    402e:	7e f4       	brtc	.+30     	; 0x404e <__addsf3x+0x7c>
    4030:	1f 16       	cp	r1, r31
    4032:	ba 0b       	sbc	r27, r26
    4034:	62 0b       	sbc	r22, r18
    4036:	73 0b       	sbc	r23, r19
    4038:	84 0b       	sbc	r24, r20
    403a:	ba f0       	brmi	.+46     	; 0x406a <__addsf3x+0x98>
    403c:	91 50       	subi	r25, 0x01	; 1
    403e:	a1 f0       	breq	.+40     	; 0x4068 <__addsf3x+0x96>
    4040:	ff 0f       	add	r31, r31
    4042:	bb 1f       	adc	r27, r27
    4044:	66 1f       	adc	r22, r22
    4046:	77 1f       	adc	r23, r23
    4048:	88 1f       	adc	r24, r24
    404a:	c2 f7       	brpl	.-16     	; 0x403c <__addsf3x+0x6a>
    404c:	0e c0       	rjmp	.+28     	; 0x406a <__addsf3x+0x98>
    404e:	ba 0f       	add	r27, r26
    4050:	62 1f       	adc	r22, r18
    4052:	73 1f       	adc	r23, r19
    4054:	84 1f       	adc	r24, r20
    4056:	48 f4       	brcc	.+18     	; 0x406a <__addsf3x+0x98>
    4058:	87 95       	ror	r24
    405a:	77 95       	ror	r23
    405c:	67 95       	ror	r22
    405e:	b7 95       	ror	r27
    4060:	f7 95       	ror	r31
    4062:	9e 3f       	cpi	r25, 0xFE	; 254
    4064:	08 f0       	brcs	.+2      	; 0x4068 <__addsf3x+0x96>
    4066:	b3 cf       	rjmp	.-154    	; 0x3fce <__addsf3+0x1e>
    4068:	93 95       	inc	r25
    406a:	88 0f       	add	r24, r24
    406c:	08 f0       	brcs	.+2      	; 0x4070 <__addsf3x+0x9e>
    406e:	99 27       	eor	r25, r25
    4070:	ee 0f       	add	r30, r30
    4072:	97 95       	ror	r25
    4074:	87 95       	ror	r24
    4076:	08 95       	ret
    4078:	88 d1       	rcall	.+784    	; 0x438a <__fp_pscA>
    407a:	58 f0       	brcs	.+22     	; 0x4092 <__addsf3x+0xc0>
    407c:	80 e8       	ldi	r24, 0x80	; 128
    407e:	91 e0       	ldi	r25, 0x01	; 1
    4080:	09 f4       	brne	.+2      	; 0x4084 <__addsf3x+0xb2>
    4082:	9e ef       	ldi	r25, 0xFE	; 254
    4084:	89 d1       	rcall	.+786    	; 0x4398 <__fp_pscB>
    4086:	28 f0       	brcs	.+10     	; 0x4092 <__addsf3x+0xc0>
    4088:	40 e8       	ldi	r20, 0x80	; 128
    408a:	51 e0       	ldi	r21, 0x01	; 1
    408c:	59 f4       	brne	.+22     	; 0x40a4 <atan2+0xe>
    408e:	5e ef       	ldi	r21, 0xFE	; 254
    4090:	09 c0       	rjmp	.+18     	; 0x40a4 <atan2+0xe>
    4092:	53 c1       	rjmp	.+678    	; 0x433a <__fp_nan>
    4094:	bb c1       	rjmp	.+886    	; 0x440c <__fp_zero>

00004096 <atan2>:
    4096:	e9 2f       	mov	r30, r25
    4098:	e0 78       	andi	r30, 0x80	; 128
    409a:	96 d1       	rcall	.+812    	; 0x43c8 <__fp_split3>
    409c:	68 f3       	brcs	.-38     	; 0x4078 <__addsf3x+0xa6>
    409e:	09 2e       	mov	r0, r25
    40a0:	05 2a       	or	r0, r21
    40a2:	c1 f3       	breq	.-16     	; 0x4094 <__addsf3x+0xc2>
    40a4:	26 17       	cp	r18, r22
    40a6:	37 07       	cpc	r19, r23
    40a8:	48 07       	cpc	r20, r24
    40aa:	59 07       	cpc	r21, r25
    40ac:	38 f0       	brcs	.+14     	; 0x40bc <atan2+0x26>
    40ae:	0e 2e       	mov	r0, r30
    40b0:	07 f8       	bld	r0, 7
    40b2:	e0 25       	eor	r30, r0
    40b4:	69 f0       	breq	.+26     	; 0x40d0 <atan2+0x3a>
    40b6:	e0 25       	eor	r30, r0
    40b8:	e0 64       	ori	r30, 0x40	; 64
    40ba:	0a c0       	rjmp	.+20     	; 0x40d0 <atan2+0x3a>
    40bc:	ef 63       	ori	r30, 0x3F	; 63
    40be:	07 f8       	bld	r0, 7
    40c0:	00 94       	com	r0
    40c2:	07 fa       	bst	r0, 7
    40c4:	db 01       	movw	r26, r22
    40c6:	b9 01       	movw	r22, r18
    40c8:	9d 01       	movw	r18, r26
    40ca:	dc 01       	movw	r26, r24
    40cc:	ca 01       	movw	r24, r20
    40ce:	ad 01       	movw	r20, r26
    40d0:	ef 93       	push	r30
    40d2:	47 d0       	rcall	.+142    	; 0x4162 <__divsf3_pse>
    40d4:	68 d1       	rcall	.+720    	; 0x43a6 <__fp_round>
    40d6:	0a d0       	rcall	.+20     	; 0x40ec <atan>
    40d8:	5f 91       	pop	r21
    40da:	55 23       	and	r21, r21
    40dc:	31 f0       	breq	.+12     	; 0x40ea <atan2+0x54>
    40de:	2b ed       	ldi	r18, 0xDB	; 219
    40e0:	3f e0       	ldi	r19, 0x0F	; 15
    40e2:	49 e4       	ldi	r20, 0x49	; 73
    40e4:	50 fd       	sbrc	r21, 0
    40e6:	49 ec       	ldi	r20, 0xC9	; 201
    40e8:	63 cf       	rjmp	.-314    	; 0x3fb0 <__addsf3>
    40ea:	08 95       	ret

000040ec <atan>:
    40ec:	df 93       	push	r29
    40ee:	dd 27       	eor	r29, r29
    40f0:	b9 2f       	mov	r27, r25
    40f2:	bf 77       	andi	r27, 0x7F	; 127
    40f4:	40 e8       	ldi	r20, 0x80	; 128
    40f6:	5f e3       	ldi	r21, 0x3F	; 63
    40f8:	16 16       	cp	r1, r22
    40fa:	17 06       	cpc	r1, r23
    40fc:	48 07       	cpc	r20, r24
    40fe:	5b 07       	cpc	r21, r27
    4100:	10 f4       	brcc	.+4      	; 0x4106 <atan+0x1a>
    4102:	d9 2f       	mov	r29, r25
    4104:	8e d1       	rcall	.+796    	; 0x4422 <inverse>
    4106:	9f 93       	push	r25
    4108:	8f 93       	push	r24
    410a:	7f 93       	push	r23
    410c:	6f 93       	push	r22
    410e:	3f d2       	rcall	.+1150   	; 0x458e <square>
    4110:	ec ea       	ldi	r30, 0xAC	; 172
    4112:	f0 e0       	ldi	r31, 0x00	; 0
    4114:	15 d1       	rcall	.+554    	; 0x4340 <__fp_powser>
    4116:	47 d1       	rcall	.+654    	; 0x43a6 <__fp_round>
    4118:	2f 91       	pop	r18
    411a:	3f 91       	pop	r19
    411c:	4f 91       	pop	r20
    411e:	5f 91       	pop	r21
    4120:	93 d1       	rcall	.+806    	; 0x4448 <__mulsf3x>
    4122:	dd 23       	and	r29, r29
    4124:	49 f0       	breq	.+18     	; 0x4138 <atan+0x4c>
    4126:	90 58       	subi	r25, 0x80	; 128
    4128:	a2 ea       	ldi	r26, 0xA2	; 162
    412a:	2a ed       	ldi	r18, 0xDA	; 218
    412c:	3f e0       	ldi	r19, 0x0F	; 15
    412e:	49 ec       	ldi	r20, 0xC9	; 201
    4130:	5f e3       	ldi	r21, 0x3F	; 63
    4132:	d0 78       	andi	r29, 0x80	; 128
    4134:	5d 27       	eor	r21, r29
    4136:	4d df       	rcall	.-358    	; 0x3fd2 <__addsf3x>
    4138:	df 91       	pop	r29
    413a:	35 c1       	rjmp	.+618    	; 0x43a6 <__fp_round>

0000413c <__cmpsf2>:
    413c:	d4 d0       	rcall	.+424    	; 0x42e6 <__fp_cmp>
    413e:	08 f4       	brcc	.+2      	; 0x4142 <__cmpsf2+0x6>
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	08 95       	ret

00004144 <__divsf3>:
    4144:	0c d0       	rcall	.+24     	; 0x415e <__divsf3x>
    4146:	2f c1       	rjmp	.+606    	; 0x43a6 <__fp_round>
    4148:	27 d1       	rcall	.+590    	; 0x4398 <__fp_pscB>
    414a:	40 f0       	brcs	.+16     	; 0x415c <__divsf3+0x18>
    414c:	1e d1       	rcall	.+572    	; 0x438a <__fp_pscA>
    414e:	30 f0       	brcs	.+12     	; 0x415c <__divsf3+0x18>
    4150:	21 f4       	brne	.+8      	; 0x415a <__divsf3+0x16>
    4152:	5f 3f       	cpi	r21, 0xFF	; 255
    4154:	19 f0       	breq	.+6      	; 0x415c <__divsf3+0x18>
    4156:	eb c0       	rjmp	.+470    	; 0x432e <__fp_inf>
    4158:	51 11       	cpse	r21, r1
    415a:	59 c1       	rjmp	.+690    	; 0x440e <__fp_szero>
    415c:	ee c0       	rjmp	.+476    	; 0x433a <__fp_nan>

0000415e <__divsf3x>:
    415e:	34 d1       	rcall	.+616    	; 0x43c8 <__fp_split3>
    4160:	98 f3       	brcs	.-26     	; 0x4148 <__divsf3+0x4>

00004162 <__divsf3_pse>:
    4162:	99 23       	and	r25, r25
    4164:	c9 f3       	breq	.-14     	; 0x4158 <__divsf3+0x14>
    4166:	55 23       	and	r21, r21
    4168:	b1 f3       	breq	.-20     	; 0x4156 <__divsf3+0x12>
    416a:	95 1b       	sub	r25, r21
    416c:	55 0b       	sbc	r21, r21
    416e:	bb 27       	eor	r27, r27
    4170:	aa 27       	eor	r26, r26
    4172:	62 17       	cp	r22, r18
    4174:	73 07       	cpc	r23, r19
    4176:	84 07       	cpc	r24, r20
    4178:	38 f0       	brcs	.+14     	; 0x4188 <__divsf3_pse+0x26>
    417a:	9f 5f       	subi	r25, 0xFF	; 255
    417c:	5f 4f       	sbci	r21, 0xFF	; 255
    417e:	22 0f       	add	r18, r18
    4180:	33 1f       	adc	r19, r19
    4182:	44 1f       	adc	r20, r20
    4184:	aa 1f       	adc	r26, r26
    4186:	a9 f3       	breq	.-22     	; 0x4172 <__divsf3_pse+0x10>
    4188:	33 d0       	rcall	.+102    	; 0x41f0 <__divsf3_pse+0x8e>
    418a:	0e 2e       	mov	r0, r30
    418c:	3a f0       	brmi	.+14     	; 0x419c <__divsf3_pse+0x3a>
    418e:	e0 e8       	ldi	r30, 0x80	; 128
    4190:	30 d0       	rcall	.+96     	; 0x41f2 <__divsf3_pse+0x90>
    4192:	91 50       	subi	r25, 0x01	; 1
    4194:	50 40       	sbci	r21, 0x00	; 0
    4196:	e6 95       	lsr	r30
    4198:	00 1c       	adc	r0, r0
    419a:	ca f7       	brpl	.-14     	; 0x418e <__divsf3_pse+0x2c>
    419c:	29 d0       	rcall	.+82     	; 0x41f0 <__divsf3_pse+0x8e>
    419e:	fe 2f       	mov	r31, r30
    41a0:	27 d0       	rcall	.+78     	; 0x41f0 <__divsf3_pse+0x8e>
    41a2:	66 0f       	add	r22, r22
    41a4:	77 1f       	adc	r23, r23
    41a6:	88 1f       	adc	r24, r24
    41a8:	bb 1f       	adc	r27, r27
    41aa:	26 17       	cp	r18, r22
    41ac:	37 07       	cpc	r19, r23
    41ae:	48 07       	cpc	r20, r24
    41b0:	ab 07       	cpc	r26, r27
    41b2:	b0 e8       	ldi	r27, 0x80	; 128
    41b4:	09 f0       	breq	.+2      	; 0x41b8 <__divsf3_pse+0x56>
    41b6:	bb 0b       	sbc	r27, r27
    41b8:	80 2d       	mov	r24, r0
    41ba:	bf 01       	movw	r22, r30
    41bc:	ff 27       	eor	r31, r31
    41be:	93 58       	subi	r25, 0x83	; 131
    41c0:	5f 4f       	sbci	r21, 0xFF	; 255
    41c2:	2a f0       	brmi	.+10     	; 0x41ce <__divsf3_pse+0x6c>
    41c4:	9e 3f       	cpi	r25, 0xFE	; 254
    41c6:	51 05       	cpc	r21, r1
    41c8:	68 f0       	brcs	.+26     	; 0x41e4 <__divsf3_pse+0x82>
    41ca:	b1 c0       	rjmp	.+354    	; 0x432e <__fp_inf>
    41cc:	20 c1       	rjmp	.+576    	; 0x440e <__fp_szero>
    41ce:	5f 3f       	cpi	r21, 0xFF	; 255
    41d0:	ec f3       	brlt	.-6      	; 0x41cc <__divsf3_pse+0x6a>
    41d2:	98 3e       	cpi	r25, 0xE8	; 232
    41d4:	dc f3       	brlt	.-10     	; 0x41cc <__divsf3_pse+0x6a>
    41d6:	86 95       	lsr	r24
    41d8:	77 95       	ror	r23
    41da:	67 95       	ror	r22
    41dc:	b7 95       	ror	r27
    41de:	f7 95       	ror	r31
    41e0:	9f 5f       	subi	r25, 0xFF	; 255
    41e2:	c9 f7       	brne	.-14     	; 0x41d6 <__divsf3_pse+0x74>
    41e4:	88 0f       	add	r24, r24
    41e6:	91 1d       	adc	r25, r1
    41e8:	96 95       	lsr	r25
    41ea:	87 95       	ror	r24
    41ec:	97 f9       	bld	r25, 7
    41ee:	08 95       	ret
    41f0:	e1 e0       	ldi	r30, 0x01	; 1
    41f2:	66 0f       	add	r22, r22
    41f4:	77 1f       	adc	r23, r23
    41f6:	88 1f       	adc	r24, r24
    41f8:	bb 1f       	adc	r27, r27
    41fa:	62 17       	cp	r22, r18
    41fc:	73 07       	cpc	r23, r19
    41fe:	84 07       	cpc	r24, r20
    4200:	ba 07       	cpc	r27, r26
    4202:	20 f0       	brcs	.+8      	; 0x420c <__divsf3_pse+0xaa>
    4204:	62 1b       	sub	r22, r18
    4206:	73 0b       	sbc	r23, r19
    4208:	84 0b       	sbc	r24, r20
    420a:	ba 0b       	sbc	r27, r26
    420c:	ee 1f       	adc	r30, r30
    420e:	88 f7       	brcc	.-30     	; 0x41f2 <__divsf3_pse+0x90>
    4210:	e0 95       	com	r30
    4212:	08 95       	ret

00004214 <__fixunssfsi>:
    4214:	e1 d0       	rcall	.+450    	; 0x43d8 <__fp_splitA>
    4216:	88 f0       	brcs	.+34     	; 0x423a <__fixunssfsi+0x26>
    4218:	9f 57       	subi	r25, 0x7F	; 127
    421a:	90 f0       	brcs	.+36     	; 0x4240 <__fixunssfsi+0x2c>
    421c:	b9 2f       	mov	r27, r25
    421e:	99 27       	eor	r25, r25
    4220:	b7 51       	subi	r27, 0x17	; 23
    4222:	a0 f0       	brcs	.+40     	; 0x424c <__fixunssfsi+0x38>
    4224:	d1 f0       	breq	.+52     	; 0x425a <__fixunssfsi+0x46>
    4226:	66 0f       	add	r22, r22
    4228:	77 1f       	adc	r23, r23
    422a:	88 1f       	adc	r24, r24
    422c:	99 1f       	adc	r25, r25
    422e:	1a f0       	brmi	.+6      	; 0x4236 <__fixunssfsi+0x22>
    4230:	ba 95       	dec	r27
    4232:	c9 f7       	brne	.-14     	; 0x4226 <__fixunssfsi+0x12>
    4234:	12 c0       	rjmp	.+36     	; 0x425a <__fixunssfsi+0x46>
    4236:	b1 30       	cpi	r27, 0x01	; 1
    4238:	81 f0       	breq	.+32     	; 0x425a <__fixunssfsi+0x46>
    423a:	e8 d0       	rcall	.+464    	; 0x440c <__fp_zero>
    423c:	b1 e0       	ldi	r27, 0x01	; 1
    423e:	08 95       	ret
    4240:	e5 c0       	rjmp	.+458    	; 0x440c <__fp_zero>
    4242:	67 2f       	mov	r22, r23
    4244:	78 2f       	mov	r23, r24
    4246:	88 27       	eor	r24, r24
    4248:	b8 5f       	subi	r27, 0xF8	; 248
    424a:	39 f0       	breq	.+14     	; 0x425a <__fixunssfsi+0x46>
    424c:	b9 3f       	cpi	r27, 0xF9	; 249
    424e:	cc f3       	brlt	.-14     	; 0x4242 <__fixunssfsi+0x2e>
    4250:	86 95       	lsr	r24
    4252:	77 95       	ror	r23
    4254:	67 95       	ror	r22
    4256:	b3 95       	inc	r27
    4258:	d9 f7       	brne	.-10     	; 0x4250 <__fixunssfsi+0x3c>
    425a:	3e f4       	brtc	.+14     	; 0x426a <__fixunssfsi+0x56>
    425c:	90 95       	com	r25
    425e:	80 95       	com	r24
    4260:	70 95       	com	r23
    4262:	61 95       	neg	r22
    4264:	7f 4f       	sbci	r23, 0xFF	; 255
    4266:	8f 4f       	sbci	r24, 0xFF	; 255
    4268:	9f 4f       	sbci	r25, 0xFF	; 255
    426a:	08 95       	ret

0000426c <__floatunsisf>:
    426c:	e8 94       	clt
    426e:	09 c0       	rjmp	.+18     	; 0x4282 <__floatsisf+0x12>

00004270 <__floatsisf>:
    4270:	97 fb       	bst	r25, 7
    4272:	3e f4       	brtc	.+14     	; 0x4282 <__floatsisf+0x12>
    4274:	90 95       	com	r25
    4276:	80 95       	com	r24
    4278:	70 95       	com	r23
    427a:	61 95       	neg	r22
    427c:	7f 4f       	sbci	r23, 0xFF	; 255
    427e:	8f 4f       	sbci	r24, 0xFF	; 255
    4280:	9f 4f       	sbci	r25, 0xFF	; 255
    4282:	99 23       	and	r25, r25
    4284:	a9 f0       	breq	.+42     	; 0x42b0 <__floatsisf+0x40>
    4286:	f9 2f       	mov	r31, r25
    4288:	96 e9       	ldi	r25, 0x96	; 150
    428a:	bb 27       	eor	r27, r27
    428c:	93 95       	inc	r25
    428e:	f6 95       	lsr	r31
    4290:	87 95       	ror	r24
    4292:	77 95       	ror	r23
    4294:	67 95       	ror	r22
    4296:	b7 95       	ror	r27
    4298:	f1 11       	cpse	r31, r1
    429a:	f8 cf       	rjmp	.-16     	; 0x428c <__floatsisf+0x1c>
    429c:	fa f4       	brpl	.+62     	; 0x42dc <__floatsisf+0x6c>
    429e:	bb 0f       	add	r27, r27
    42a0:	11 f4       	brne	.+4      	; 0x42a6 <__floatsisf+0x36>
    42a2:	60 ff       	sbrs	r22, 0
    42a4:	1b c0       	rjmp	.+54     	; 0x42dc <__floatsisf+0x6c>
    42a6:	6f 5f       	subi	r22, 0xFF	; 255
    42a8:	7f 4f       	sbci	r23, 0xFF	; 255
    42aa:	8f 4f       	sbci	r24, 0xFF	; 255
    42ac:	9f 4f       	sbci	r25, 0xFF	; 255
    42ae:	16 c0       	rjmp	.+44     	; 0x42dc <__floatsisf+0x6c>
    42b0:	88 23       	and	r24, r24
    42b2:	11 f0       	breq	.+4      	; 0x42b8 <__floatsisf+0x48>
    42b4:	96 e9       	ldi	r25, 0x96	; 150
    42b6:	11 c0       	rjmp	.+34     	; 0x42da <__floatsisf+0x6a>
    42b8:	77 23       	and	r23, r23
    42ba:	21 f0       	breq	.+8      	; 0x42c4 <__floatsisf+0x54>
    42bc:	9e e8       	ldi	r25, 0x8E	; 142
    42be:	87 2f       	mov	r24, r23
    42c0:	76 2f       	mov	r23, r22
    42c2:	05 c0       	rjmp	.+10     	; 0x42ce <__floatsisf+0x5e>
    42c4:	66 23       	and	r22, r22
    42c6:	71 f0       	breq	.+28     	; 0x42e4 <__floatsisf+0x74>
    42c8:	96 e8       	ldi	r25, 0x86	; 134
    42ca:	86 2f       	mov	r24, r22
    42cc:	70 e0       	ldi	r23, 0x00	; 0
    42ce:	60 e0       	ldi	r22, 0x00	; 0
    42d0:	2a f0       	brmi	.+10     	; 0x42dc <__floatsisf+0x6c>
    42d2:	9a 95       	dec	r25
    42d4:	66 0f       	add	r22, r22
    42d6:	77 1f       	adc	r23, r23
    42d8:	88 1f       	adc	r24, r24
    42da:	da f7       	brpl	.-10     	; 0x42d2 <__floatsisf+0x62>
    42dc:	88 0f       	add	r24, r24
    42de:	96 95       	lsr	r25
    42e0:	87 95       	ror	r24
    42e2:	97 f9       	bld	r25, 7
    42e4:	08 95       	ret

000042e6 <__fp_cmp>:
    42e6:	99 0f       	add	r25, r25
    42e8:	00 08       	sbc	r0, r0
    42ea:	55 0f       	add	r21, r21
    42ec:	aa 0b       	sbc	r26, r26
    42ee:	e0 e8       	ldi	r30, 0x80	; 128
    42f0:	fe ef       	ldi	r31, 0xFE	; 254
    42f2:	16 16       	cp	r1, r22
    42f4:	17 06       	cpc	r1, r23
    42f6:	e8 07       	cpc	r30, r24
    42f8:	f9 07       	cpc	r31, r25
    42fa:	c0 f0       	brcs	.+48     	; 0x432c <__fp_cmp+0x46>
    42fc:	12 16       	cp	r1, r18
    42fe:	13 06       	cpc	r1, r19
    4300:	e4 07       	cpc	r30, r20
    4302:	f5 07       	cpc	r31, r21
    4304:	98 f0       	brcs	.+38     	; 0x432c <__fp_cmp+0x46>
    4306:	62 1b       	sub	r22, r18
    4308:	73 0b       	sbc	r23, r19
    430a:	84 0b       	sbc	r24, r20
    430c:	95 0b       	sbc	r25, r21
    430e:	39 f4       	brne	.+14     	; 0x431e <__fp_cmp+0x38>
    4310:	0a 26       	eor	r0, r26
    4312:	61 f0       	breq	.+24     	; 0x432c <__fp_cmp+0x46>
    4314:	23 2b       	or	r18, r19
    4316:	24 2b       	or	r18, r20
    4318:	25 2b       	or	r18, r21
    431a:	21 f4       	brne	.+8      	; 0x4324 <__fp_cmp+0x3e>
    431c:	08 95       	ret
    431e:	0a 26       	eor	r0, r26
    4320:	09 f4       	brne	.+2      	; 0x4324 <__fp_cmp+0x3e>
    4322:	a1 40       	sbci	r26, 0x01	; 1
    4324:	a6 95       	lsr	r26
    4326:	8f ef       	ldi	r24, 0xFF	; 255
    4328:	81 1d       	adc	r24, r1
    432a:	81 1d       	adc	r24, r1
    432c:	08 95       	ret

0000432e <__fp_inf>:
    432e:	97 f9       	bld	r25, 7
    4330:	9f 67       	ori	r25, 0x7F	; 127
    4332:	80 e8       	ldi	r24, 0x80	; 128
    4334:	70 e0       	ldi	r23, 0x00	; 0
    4336:	60 e0       	ldi	r22, 0x00	; 0
    4338:	08 95       	ret

0000433a <__fp_nan>:
    433a:	9f ef       	ldi	r25, 0xFF	; 255
    433c:	80 ec       	ldi	r24, 0xC0	; 192
    433e:	08 95       	ret

00004340 <__fp_powser>:
    4340:	df 93       	push	r29
    4342:	cf 93       	push	r28
    4344:	1f 93       	push	r17
    4346:	0f 93       	push	r16
    4348:	ff 92       	push	r15
    434a:	ef 92       	push	r14
    434c:	df 92       	push	r13
    434e:	7b 01       	movw	r14, r22
    4350:	8c 01       	movw	r16, r24
    4352:	68 94       	set
    4354:	05 c0       	rjmp	.+10     	; 0x4360 <__fp_powser+0x20>
    4356:	da 2e       	mov	r13, r26
    4358:	ef 01       	movw	r28, r30
    435a:	76 d0       	rcall	.+236    	; 0x4448 <__mulsf3x>
    435c:	fe 01       	movw	r30, r28
    435e:	e8 94       	clt
    4360:	a5 91       	lpm	r26, Z+
    4362:	25 91       	lpm	r18, Z+
    4364:	35 91       	lpm	r19, Z+
    4366:	45 91       	lpm	r20, Z+
    4368:	55 91       	lpm	r21, Z+
    436a:	ae f3       	brts	.-22     	; 0x4356 <__fp_powser+0x16>
    436c:	ef 01       	movw	r28, r30
    436e:	31 de       	rcall	.-926    	; 0x3fd2 <__addsf3x>
    4370:	fe 01       	movw	r30, r28
    4372:	97 01       	movw	r18, r14
    4374:	a8 01       	movw	r20, r16
    4376:	da 94       	dec	r13
    4378:	79 f7       	brne	.-34     	; 0x4358 <__fp_powser+0x18>
    437a:	df 90       	pop	r13
    437c:	ef 90       	pop	r14
    437e:	ff 90       	pop	r15
    4380:	0f 91       	pop	r16
    4382:	1f 91       	pop	r17
    4384:	cf 91       	pop	r28
    4386:	df 91       	pop	r29
    4388:	08 95       	ret

0000438a <__fp_pscA>:
    438a:	00 24       	eor	r0, r0
    438c:	0a 94       	dec	r0
    438e:	16 16       	cp	r1, r22
    4390:	17 06       	cpc	r1, r23
    4392:	18 06       	cpc	r1, r24
    4394:	09 06       	cpc	r0, r25
    4396:	08 95       	ret

00004398 <__fp_pscB>:
    4398:	00 24       	eor	r0, r0
    439a:	0a 94       	dec	r0
    439c:	12 16       	cp	r1, r18
    439e:	13 06       	cpc	r1, r19
    43a0:	14 06       	cpc	r1, r20
    43a2:	05 06       	cpc	r0, r21
    43a4:	08 95       	ret

000043a6 <__fp_round>:
    43a6:	09 2e       	mov	r0, r25
    43a8:	03 94       	inc	r0
    43aa:	00 0c       	add	r0, r0
    43ac:	11 f4       	brne	.+4      	; 0x43b2 <__fp_round+0xc>
    43ae:	88 23       	and	r24, r24
    43b0:	52 f0       	brmi	.+20     	; 0x43c6 <__fp_round+0x20>
    43b2:	bb 0f       	add	r27, r27
    43b4:	40 f4       	brcc	.+16     	; 0x43c6 <__fp_round+0x20>
    43b6:	bf 2b       	or	r27, r31
    43b8:	11 f4       	brne	.+4      	; 0x43be <__fp_round+0x18>
    43ba:	60 ff       	sbrs	r22, 0
    43bc:	04 c0       	rjmp	.+8      	; 0x43c6 <__fp_round+0x20>
    43be:	6f 5f       	subi	r22, 0xFF	; 255
    43c0:	7f 4f       	sbci	r23, 0xFF	; 255
    43c2:	8f 4f       	sbci	r24, 0xFF	; 255
    43c4:	9f 4f       	sbci	r25, 0xFF	; 255
    43c6:	08 95       	ret

000043c8 <__fp_split3>:
    43c8:	57 fd       	sbrc	r21, 7
    43ca:	90 58       	subi	r25, 0x80	; 128
    43cc:	44 0f       	add	r20, r20
    43ce:	55 1f       	adc	r21, r21
    43d0:	59 f0       	breq	.+22     	; 0x43e8 <__fp_splitA+0x10>
    43d2:	5f 3f       	cpi	r21, 0xFF	; 255
    43d4:	71 f0       	breq	.+28     	; 0x43f2 <__fp_splitA+0x1a>
    43d6:	47 95       	ror	r20

000043d8 <__fp_splitA>:
    43d8:	88 0f       	add	r24, r24
    43da:	97 fb       	bst	r25, 7
    43dc:	99 1f       	adc	r25, r25
    43de:	61 f0       	breq	.+24     	; 0x43f8 <__fp_splitA+0x20>
    43e0:	9f 3f       	cpi	r25, 0xFF	; 255
    43e2:	79 f0       	breq	.+30     	; 0x4402 <__fp_splitA+0x2a>
    43e4:	87 95       	ror	r24
    43e6:	08 95       	ret
    43e8:	12 16       	cp	r1, r18
    43ea:	13 06       	cpc	r1, r19
    43ec:	14 06       	cpc	r1, r20
    43ee:	55 1f       	adc	r21, r21
    43f0:	f2 cf       	rjmp	.-28     	; 0x43d6 <__fp_split3+0xe>
    43f2:	46 95       	lsr	r20
    43f4:	f1 df       	rcall	.-30     	; 0x43d8 <__fp_splitA>
    43f6:	08 c0       	rjmp	.+16     	; 0x4408 <__fp_splitA+0x30>
    43f8:	16 16       	cp	r1, r22
    43fa:	17 06       	cpc	r1, r23
    43fc:	18 06       	cpc	r1, r24
    43fe:	99 1f       	adc	r25, r25
    4400:	f1 cf       	rjmp	.-30     	; 0x43e4 <__fp_splitA+0xc>
    4402:	86 95       	lsr	r24
    4404:	71 05       	cpc	r23, r1
    4406:	61 05       	cpc	r22, r1
    4408:	08 94       	sec
    440a:	08 95       	ret

0000440c <__fp_zero>:
    440c:	e8 94       	clt

0000440e <__fp_szero>:
    440e:	bb 27       	eor	r27, r27
    4410:	66 27       	eor	r22, r22
    4412:	77 27       	eor	r23, r23
    4414:	cb 01       	movw	r24, r22
    4416:	97 f9       	bld	r25, 7
    4418:	08 95       	ret

0000441a <__gesf2>:
    441a:	65 df       	rcall	.-310    	; 0x42e6 <__fp_cmp>
    441c:	08 f4       	brcc	.+2      	; 0x4420 <__gesf2+0x6>
    441e:	8f ef       	ldi	r24, 0xFF	; 255
    4420:	08 95       	ret

00004422 <inverse>:
    4422:	9b 01       	movw	r18, r22
    4424:	ac 01       	movw	r20, r24
    4426:	60 e0       	ldi	r22, 0x00	; 0
    4428:	70 e0       	ldi	r23, 0x00	; 0
    442a:	80 e8       	ldi	r24, 0x80	; 128
    442c:	9f e3       	ldi	r25, 0x3F	; 63
    442e:	8a ce       	rjmp	.-748    	; 0x4144 <__divsf3>

00004430 <__mulsf3>:
    4430:	0b d0       	rcall	.+22     	; 0x4448 <__mulsf3x>
    4432:	b9 cf       	rjmp	.-142    	; 0x43a6 <__fp_round>
    4434:	aa df       	rcall	.-172    	; 0x438a <__fp_pscA>
    4436:	28 f0       	brcs	.+10     	; 0x4442 <__mulsf3+0x12>
    4438:	af df       	rcall	.-162    	; 0x4398 <__fp_pscB>
    443a:	18 f0       	brcs	.+6      	; 0x4442 <__mulsf3+0x12>
    443c:	95 23       	and	r25, r21
    443e:	09 f0       	breq	.+2      	; 0x4442 <__mulsf3+0x12>
    4440:	76 cf       	rjmp	.-276    	; 0x432e <__fp_inf>
    4442:	7b cf       	rjmp	.-266    	; 0x433a <__fp_nan>
    4444:	11 24       	eor	r1, r1
    4446:	e3 cf       	rjmp	.-58     	; 0x440e <__fp_szero>

00004448 <__mulsf3x>:
    4448:	bf df       	rcall	.-130    	; 0x43c8 <__fp_split3>
    444a:	a0 f3       	brcs	.-24     	; 0x4434 <__mulsf3+0x4>

0000444c <__mulsf3_pse>:
    444c:	95 9f       	mul	r25, r21
    444e:	d1 f3       	breq	.-12     	; 0x4444 <__mulsf3+0x14>
    4450:	95 0f       	add	r25, r21
    4452:	50 e0       	ldi	r21, 0x00	; 0
    4454:	55 1f       	adc	r21, r21
    4456:	62 9f       	mul	r22, r18
    4458:	f0 01       	movw	r30, r0
    445a:	72 9f       	mul	r23, r18
    445c:	bb 27       	eor	r27, r27
    445e:	f0 0d       	add	r31, r0
    4460:	b1 1d       	adc	r27, r1
    4462:	63 9f       	mul	r22, r19
    4464:	aa 27       	eor	r26, r26
    4466:	f0 0d       	add	r31, r0
    4468:	b1 1d       	adc	r27, r1
    446a:	aa 1f       	adc	r26, r26
    446c:	64 9f       	mul	r22, r20
    446e:	66 27       	eor	r22, r22
    4470:	b0 0d       	add	r27, r0
    4472:	a1 1d       	adc	r26, r1
    4474:	66 1f       	adc	r22, r22
    4476:	82 9f       	mul	r24, r18
    4478:	22 27       	eor	r18, r18
    447a:	b0 0d       	add	r27, r0
    447c:	a1 1d       	adc	r26, r1
    447e:	62 1f       	adc	r22, r18
    4480:	73 9f       	mul	r23, r19
    4482:	b0 0d       	add	r27, r0
    4484:	a1 1d       	adc	r26, r1
    4486:	62 1f       	adc	r22, r18
    4488:	83 9f       	mul	r24, r19
    448a:	a0 0d       	add	r26, r0
    448c:	61 1d       	adc	r22, r1
    448e:	22 1f       	adc	r18, r18
    4490:	74 9f       	mul	r23, r20
    4492:	33 27       	eor	r19, r19
    4494:	a0 0d       	add	r26, r0
    4496:	61 1d       	adc	r22, r1
    4498:	23 1f       	adc	r18, r19
    449a:	84 9f       	mul	r24, r20
    449c:	60 0d       	add	r22, r0
    449e:	21 1d       	adc	r18, r1
    44a0:	82 2f       	mov	r24, r18
    44a2:	76 2f       	mov	r23, r22
    44a4:	6a 2f       	mov	r22, r26
    44a6:	11 24       	eor	r1, r1
    44a8:	9f 57       	subi	r25, 0x7F	; 127
    44aa:	50 40       	sbci	r21, 0x00	; 0
    44ac:	8a f0       	brmi	.+34     	; 0x44d0 <__mulsf3_pse+0x84>
    44ae:	e1 f0       	breq	.+56     	; 0x44e8 <__mulsf3_pse+0x9c>
    44b0:	88 23       	and	r24, r24
    44b2:	4a f0       	brmi	.+18     	; 0x44c6 <__mulsf3_pse+0x7a>
    44b4:	ee 0f       	add	r30, r30
    44b6:	ff 1f       	adc	r31, r31
    44b8:	bb 1f       	adc	r27, r27
    44ba:	66 1f       	adc	r22, r22
    44bc:	77 1f       	adc	r23, r23
    44be:	88 1f       	adc	r24, r24
    44c0:	91 50       	subi	r25, 0x01	; 1
    44c2:	50 40       	sbci	r21, 0x00	; 0
    44c4:	a9 f7       	brne	.-22     	; 0x44b0 <__mulsf3_pse+0x64>
    44c6:	9e 3f       	cpi	r25, 0xFE	; 254
    44c8:	51 05       	cpc	r21, r1
    44ca:	70 f0       	brcs	.+28     	; 0x44e8 <__mulsf3_pse+0x9c>
    44cc:	30 cf       	rjmp	.-416    	; 0x432e <__fp_inf>
    44ce:	9f cf       	rjmp	.-194    	; 0x440e <__fp_szero>
    44d0:	5f 3f       	cpi	r21, 0xFF	; 255
    44d2:	ec f3       	brlt	.-6      	; 0x44ce <__mulsf3_pse+0x82>
    44d4:	98 3e       	cpi	r25, 0xE8	; 232
    44d6:	dc f3       	brlt	.-10     	; 0x44ce <__mulsf3_pse+0x82>
    44d8:	86 95       	lsr	r24
    44da:	77 95       	ror	r23
    44dc:	67 95       	ror	r22
    44de:	b7 95       	ror	r27
    44e0:	f7 95       	ror	r31
    44e2:	e7 95       	ror	r30
    44e4:	9f 5f       	subi	r25, 0xFF	; 255
    44e6:	c1 f7       	brne	.-16     	; 0x44d8 <__mulsf3_pse+0x8c>
    44e8:	fe 2b       	or	r31, r30
    44ea:	88 0f       	add	r24, r24
    44ec:	91 1d       	adc	r25, r1
    44ee:	96 95       	lsr	r25
    44f0:	87 95       	ror	r24
    44f2:	97 f9       	bld	r25, 7
    44f4:	08 95       	ret

000044f6 <pow>:
    44f6:	fa 01       	movw	r30, r20
    44f8:	ee 0f       	add	r30, r30
    44fa:	ff 1f       	adc	r31, r31
    44fc:	30 96       	adiw	r30, 0x00	; 0
    44fe:	21 05       	cpc	r18, r1
    4500:	31 05       	cpc	r19, r1
    4502:	99 f1       	breq	.+102    	; 0x456a <pow+0x74>
    4504:	61 15       	cp	r22, r1
    4506:	71 05       	cpc	r23, r1
    4508:	61 f4       	brne	.+24     	; 0x4522 <pow+0x2c>
    450a:	80 38       	cpi	r24, 0x80	; 128
    450c:	bf e3       	ldi	r27, 0x3F	; 63
    450e:	9b 07       	cpc	r25, r27
    4510:	49 f1       	breq	.+82     	; 0x4564 <pow+0x6e>
    4512:	68 94       	set
    4514:	90 38       	cpi	r25, 0x80	; 128
    4516:	81 05       	cpc	r24, r1
    4518:	61 f0       	breq	.+24     	; 0x4532 <pow+0x3c>
    451a:	80 38       	cpi	r24, 0x80	; 128
    451c:	bf ef       	ldi	r27, 0xFF	; 255
    451e:	9b 07       	cpc	r25, r27
    4520:	41 f0       	breq	.+16     	; 0x4532 <pow+0x3c>
    4522:	99 23       	and	r25, r25
    4524:	42 f5       	brpl	.+80     	; 0x4576 <pow+0x80>
    4526:	ff 3f       	cpi	r31, 0xFF	; 255
    4528:	e1 05       	cpc	r30, r1
    452a:	31 05       	cpc	r19, r1
    452c:	21 05       	cpc	r18, r1
    452e:	11 f1       	breq	.+68     	; 0x4574 <pow+0x7e>
    4530:	e8 94       	clt
    4532:	08 94       	sec
    4534:	e7 95       	ror	r30
    4536:	d9 01       	movw	r26, r18
    4538:	aa 23       	and	r26, r26
    453a:	29 f4       	brne	.+10     	; 0x4546 <pow+0x50>
    453c:	ab 2f       	mov	r26, r27
    453e:	be 2f       	mov	r27, r30
    4540:	f8 5f       	subi	r31, 0xF8	; 248
    4542:	d0 f3       	brcs	.-12     	; 0x4538 <pow+0x42>
    4544:	10 c0       	rjmp	.+32     	; 0x4566 <pow+0x70>
    4546:	ff 5f       	subi	r31, 0xFF	; 255
    4548:	70 f4       	brcc	.+28     	; 0x4566 <pow+0x70>
    454a:	a6 95       	lsr	r26
    454c:	e0 f7       	brcc	.-8      	; 0x4546 <pow+0x50>
    454e:	f7 39       	cpi	r31, 0x97	; 151
    4550:	50 f0       	brcs	.+20     	; 0x4566 <pow+0x70>
    4552:	19 f0       	breq	.+6      	; 0x455a <pow+0x64>
    4554:	ff 3a       	cpi	r31, 0xAF	; 175
    4556:	38 f4       	brcc	.+14     	; 0x4566 <pow+0x70>
    4558:	9f 77       	andi	r25, 0x7F	; 127
    455a:	9f 93       	push	r25
    455c:	0c d0       	rcall	.+24     	; 0x4576 <pow+0x80>
    455e:	0f 90       	pop	r0
    4560:	07 fc       	sbrc	r0, 7
    4562:	90 58       	subi	r25, 0x80	; 128
    4564:	08 95       	ret
    4566:	3e f0       	brts	.+14     	; 0x4576 <pow+0x80>
    4568:	e8 ce       	rjmp	.-560    	; 0x433a <__fp_nan>
    456a:	60 e0       	ldi	r22, 0x00	; 0
    456c:	70 e0       	ldi	r23, 0x00	; 0
    456e:	80 e8       	ldi	r24, 0x80	; 128
    4570:	9f e3       	ldi	r25, 0x3F	; 63
    4572:	08 95       	ret
    4574:	4f e7       	ldi	r20, 0x7F	; 127
    4576:	9f 77       	andi	r25, 0x7F	; 127
    4578:	5f 93       	push	r21
    457a:	4f 93       	push	r20
    457c:	3f 93       	push	r19
    457e:	2f 93       	push	r18
    4580:	83 d0       	rcall	.+262    	; 0x4688 <log>
    4582:	2f 91       	pop	r18
    4584:	3f 91       	pop	r19
    4586:	4f 91       	pop	r20
    4588:	5f 91       	pop	r21
    458a:	52 df       	rcall	.-348    	; 0x4430 <__mulsf3>
    458c:	08 c0       	rjmp	.+16     	; 0x459e <exp>

0000458e <square>:
    458e:	9b 01       	movw	r18, r22
    4590:	ac 01       	movw	r20, r24
    4592:	4e cf       	rjmp	.-356    	; 0x4430 <__mulsf3>
    4594:	19 f4       	brne	.+6      	; 0x459c <square+0xe>
    4596:	0e f0       	brts	.+2      	; 0x459a <square+0xc>
    4598:	ca ce       	rjmp	.-620    	; 0x432e <__fp_inf>
    459a:	38 cf       	rjmp	.-400    	; 0x440c <__fp_zero>
    459c:	ce ce       	rjmp	.-612    	; 0x433a <__fp_nan>

0000459e <exp>:
    459e:	1c df       	rcall	.-456    	; 0x43d8 <__fp_splitA>
    45a0:	c8 f3       	brcs	.-14     	; 0x4594 <square+0x6>
    45a2:	96 38       	cpi	r25, 0x86	; 134
    45a4:	c0 f7       	brcc	.-16     	; 0x4596 <square+0x8>
    45a6:	07 f8       	bld	r0, 7
    45a8:	0f 92       	push	r0
    45aa:	e8 94       	clt
    45ac:	2b e3       	ldi	r18, 0x3B	; 59
    45ae:	3a ea       	ldi	r19, 0xAA	; 170
    45b0:	48 eb       	ldi	r20, 0xB8	; 184
    45b2:	5f e7       	ldi	r21, 0x7F	; 127
    45b4:	4b df       	rcall	.-362    	; 0x444c <__mulsf3_pse>
    45b6:	0f 92       	push	r0
    45b8:	0f 92       	push	r0
    45ba:	0f 92       	push	r0
    45bc:	4d b7       	in	r20, 0x3d	; 61
    45be:	5e b7       	in	r21, 0x3e	; 62
    45c0:	0f 92       	push	r0
    45c2:	a2 d0       	rcall	.+324    	; 0x4708 <modf>
    45c4:	e9 ed       	ldi	r30, 0xD9	; 217
    45c6:	f0 e0       	ldi	r31, 0x00	; 0
    45c8:	bb de       	rcall	.-650    	; 0x4340 <__fp_powser>
    45ca:	4f 91       	pop	r20
    45cc:	5f 91       	pop	r21
    45ce:	ef 91       	pop	r30
    45d0:	ff 91       	pop	r31
    45d2:	e5 95       	asr	r30
    45d4:	ee 1f       	adc	r30, r30
    45d6:	ff 1f       	adc	r31, r31
    45d8:	49 f0       	breq	.+18     	; 0x45ec <exp+0x4e>
    45da:	fe 57       	subi	r31, 0x7E	; 126
    45dc:	e0 68       	ori	r30, 0x80	; 128
    45de:	44 27       	eor	r20, r20
    45e0:	ee 0f       	add	r30, r30
    45e2:	44 1f       	adc	r20, r20
    45e4:	fa 95       	dec	r31
    45e6:	e1 f7       	brne	.-8      	; 0x45e0 <exp+0x42>
    45e8:	41 95       	neg	r20
    45ea:	55 0b       	sbc	r21, r21
    45ec:	14 d0       	rcall	.+40     	; 0x4616 <ldexp>
    45ee:	0f 90       	pop	r0
    45f0:	07 fe       	sbrs	r0, 7
    45f2:	17 cf       	rjmp	.-466    	; 0x4422 <inverse>
    45f4:	08 95       	ret

000045f6 <__fp_mpack>:
    45f6:	9f 3f       	cpi	r25, 0xFF	; 255
    45f8:	31 f0       	breq	.+12     	; 0x4606 <__fp_mpack_finite+0xc>

000045fa <__fp_mpack_finite>:
    45fa:	91 50       	subi	r25, 0x01	; 1
    45fc:	20 f4       	brcc	.+8      	; 0x4606 <__fp_mpack_finite+0xc>
    45fe:	87 95       	ror	r24
    4600:	77 95       	ror	r23
    4602:	67 95       	ror	r22
    4604:	b7 95       	ror	r27
    4606:	88 0f       	add	r24, r24
    4608:	91 1d       	adc	r25, r1
    460a:	96 95       	lsr	r25
    460c:	87 95       	ror	r24
    460e:	97 f9       	bld	r25, 7
    4610:	08 95       	ret
    4612:	8d ce       	rjmp	.-742    	; 0x432e <__fp_inf>
    4614:	f0 cf       	rjmp	.-32     	; 0x45f6 <__fp_mpack>

00004616 <ldexp>:
    4616:	e0 de       	rcall	.-576    	; 0x43d8 <__fp_splitA>
    4618:	e8 f3       	brcs	.-6      	; 0x4614 <__fp_mpack_finite+0x1a>
    461a:	99 23       	and	r25, r25
    461c:	d9 f3       	breq	.-10     	; 0x4614 <__fp_mpack_finite+0x1a>
    461e:	94 0f       	add	r25, r20
    4620:	51 1d       	adc	r21, r1
    4622:	bb f3       	brvs	.-18     	; 0x4612 <__fp_mpack_finite+0x18>
    4624:	91 50       	subi	r25, 0x01	; 1
    4626:	50 40       	sbci	r21, 0x00	; 0
    4628:	94 f0       	brlt	.+36     	; 0x464e <ldexp+0x38>
    462a:	59 f0       	breq	.+22     	; 0x4642 <ldexp+0x2c>
    462c:	88 23       	and	r24, r24
    462e:	32 f0       	brmi	.+12     	; 0x463c <ldexp+0x26>
    4630:	66 0f       	add	r22, r22
    4632:	77 1f       	adc	r23, r23
    4634:	88 1f       	adc	r24, r24
    4636:	91 50       	subi	r25, 0x01	; 1
    4638:	50 40       	sbci	r21, 0x00	; 0
    463a:	c1 f7       	brne	.-16     	; 0x462c <ldexp+0x16>
    463c:	9e 3f       	cpi	r25, 0xFE	; 254
    463e:	51 05       	cpc	r21, r1
    4640:	44 f7       	brge	.-48     	; 0x4612 <__fp_mpack_finite+0x18>
    4642:	88 0f       	add	r24, r24
    4644:	91 1d       	adc	r25, r1
    4646:	96 95       	lsr	r25
    4648:	87 95       	ror	r24
    464a:	97 f9       	bld	r25, 7
    464c:	08 95       	ret
    464e:	5f 3f       	cpi	r21, 0xFF	; 255
    4650:	ac f0       	brlt	.+42     	; 0x467c <ldexp+0x66>
    4652:	98 3e       	cpi	r25, 0xE8	; 232
    4654:	9c f0       	brlt	.+38     	; 0x467c <ldexp+0x66>
    4656:	bb 27       	eor	r27, r27
    4658:	86 95       	lsr	r24
    465a:	77 95       	ror	r23
    465c:	67 95       	ror	r22
    465e:	b7 95       	ror	r27
    4660:	08 f4       	brcc	.+2      	; 0x4664 <ldexp+0x4e>
    4662:	b1 60       	ori	r27, 0x01	; 1
    4664:	93 95       	inc	r25
    4666:	c1 f7       	brne	.-16     	; 0x4658 <ldexp+0x42>
    4668:	bb 0f       	add	r27, r27
    466a:	58 f7       	brcc	.-42     	; 0x4642 <ldexp+0x2c>
    466c:	11 f4       	brne	.+4      	; 0x4672 <ldexp+0x5c>
    466e:	60 ff       	sbrs	r22, 0
    4670:	e8 cf       	rjmp	.-48     	; 0x4642 <ldexp+0x2c>
    4672:	6f 5f       	subi	r22, 0xFF	; 255
    4674:	7f 4f       	sbci	r23, 0xFF	; 255
    4676:	8f 4f       	sbci	r24, 0xFF	; 255
    4678:	9f 4f       	sbci	r25, 0xFF	; 255
    467a:	e3 cf       	rjmp	.-58     	; 0x4642 <ldexp+0x2c>
    467c:	c8 ce       	rjmp	.-624    	; 0x440e <__fp_szero>
    467e:	0e f0       	brts	.+2      	; 0x4682 <ldexp+0x6c>
    4680:	ba cf       	rjmp	.-140    	; 0x45f6 <__fp_mpack>
    4682:	5b ce       	rjmp	.-842    	; 0x433a <__fp_nan>
    4684:	68 94       	set
    4686:	53 ce       	rjmp	.-858    	; 0x432e <__fp_inf>

00004688 <log>:
    4688:	a7 de       	rcall	.-690    	; 0x43d8 <__fp_splitA>
    468a:	c8 f3       	brcs	.-14     	; 0x467e <ldexp+0x68>
    468c:	99 23       	and	r25, r25
    468e:	d1 f3       	breq	.-12     	; 0x4684 <ldexp+0x6e>
    4690:	c6 f3       	brts	.-16     	; 0x4682 <ldexp+0x6c>
    4692:	df 93       	push	r29
    4694:	cf 93       	push	r28
    4696:	1f 93       	push	r17
    4698:	0f 93       	push	r16
    469a:	ff 92       	push	r15
    469c:	c9 2f       	mov	r28, r25
    469e:	dd 27       	eor	r29, r29
    46a0:	88 23       	and	r24, r24
    46a2:	2a f0       	brmi	.+10     	; 0x46ae <log+0x26>
    46a4:	21 97       	sbiw	r28, 0x01	; 1
    46a6:	66 0f       	add	r22, r22
    46a8:	77 1f       	adc	r23, r23
    46aa:	88 1f       	adc	r24, r24
    46ac:	da f7       	brpl	.-10     	; 0x46a4 <log+0x1c>
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	40 e8       	ldi	r20, 0x80	; 128
    46b4:	5f eb       	ldi	r21, 0xBF	; 191
    46b6:	9f e3       	ldi	r25, 0x3F	; 63
    46b8:	88 39       	cpi	r24, 0x98	; 152
    46ba:	20 f0       	brcs	.+8      	; 0x46c4 <log+0x3c>
    46bc:	80 3e       	cpi	r24, 0xE0	; 224
    46be:	30 f0       	brcs	.+12     	; 0x46cc <log+0x44>
    46c0:	21 96       	adiw	r28, 0x01	; 1
    46c2:	8f 77       	andi	r24, 0x7F	; 127
    46c4:	75 dc       	rcall	.-1814   	; 0x3fb0 <__addsf3>
    46c6:	e1 e0       	ldi	r30, 0x01	; 1
    46c8:	f1 e0       	ldi	r31, 0x01	; 1
    46ca:	03 c0       	rjmp	.+6      	; 0x46d2 <log+0x4a>
    46cc:	71 dc       	rcall	.-1822   	; 0x3fb0 <__addsf3>
    46ce:	ee e2       	ldi	r30, 0x2E	; 46
    46d0:	f1 e0       	ldi	r31, 0x01	; 1
    46d2:	36 de       	rcall	.-916    	; 0x4340 <__fp_powser>
    46d4:	8b 01       	movw	r16, r22
    46d6:	be 01       	movw	r22, r28
    46d8:	ec 01       	movw	r28, r24
    46da:	fb 2e       	mov	r15, r27
    46dc:	6f 57       	subi	r22, 0x7F	; 127
    46de:	71 09       	sbc	r23, r1
    46e0:	75 95       	asr	r23
    46e2:	77 1f       	adc	r23, r23
    46e4:	88 0b       	sbc	r24, r24
    46e6:	99 0b       	sbc	r25, r25
    46e8:	c3 dd       	rcall	.-1146   	; 0x4270 <__floatsisf>
    46ea:	28 e1       	ldi	r18, 0x18	; 24
    46ec:	32 e7       	ldi	r19, 0x72	; 114
    46ee:	41 e3       	ldi	r20, 0x31	; 49
    46f0:	5f e3       	ldi	r21, 0x3F	; 63
    46f2:	aa de       	rcall	.-684    	; 0x4448 <__mulsf3x>
    46f4:	af 2d       	mov	r26, r15
    46f6:	98 01       	movw	r18, r16
    46f8:	ae 01       	movw	r20, r28
    46fa:	ff 90       	pop	r15
    46fc:	0f 91       	pop	r16
    46fe:	1f 91       	pop	r17
    4700:	cf 91       	pop	r28
    4702:	df 91       	pop	r29
    4704:	66 dc       	rcall	.-1844   	; 0x3fd2 <__addsf3x>
    4706:	4f ce       	rjmp	.-866    	; 0x43a6 <__fp_round>

00004708 <modf>:
    4708:	fa 01       	movw	r30, r20
    470a:	dc 01       	movw	r26, r24
    470c:	aa 0f       	add	r26, r26
    470e:	bb 1f       	adc	r27, r27
    4710:	9b 01       	movw	r18, r22
    4712:	ac 01       	movw	r20, r24
    4714:	bf 57       	subi	r27, 0x7F	; 127
    4716:	28 f4       	brcc	.+10     	; 0x4722 <modf+0x1a>
    4718:	22 27       	eor	r18, r18
    471a:	33 27       	eor	r19, r19
    471c:	44 27       	eor	r20, r20
    471e:	50 78       	andi	r21, 0x80	; 128
    4720:	1f c0       	rjmp	.+62     	; 0x4760 <modf+0x58>
    4722:	b7 51       	subi	r27, 0x17	; 23
    4724:	88 f4       	brcc	.+34     	; 0x4748 <modf+0x40>
    4726:	ab 2f       	mov	r26, r27
    4728:	00 24       	eor	r0, r0
    472a:	46 95       	lsr	r20
    472c:	37 95       	ror	r19
    472e:	27 95       	ror	r18
    4730:	01 1c       	adc	r0, r1
    4732:	a3 95       	inc	r26
    4734:	d2 f3       	brmi	.-12     	; 0x472a <modf+0x22>
    4736:	00 20       	and	r0, r0
    4738:	69 f0       	breq	.+26     	; 0x4754 <modf+0x4c>
    473a:	22 0f       	add	r18, r18
    473c:	33 1f       	adc	r19, r19
    473e:	44 1f       	adc	r20, r20
    4740:	b3 95       	inc	r27
    4742:	da f3       	brmi	.-10     	; 0x473a <modf+0x32>
    4744:	0d d0       	rcall	.+26     	; 0x4760 <modf+0x58>
    4746:	33 cc       	rjmp	.-1946   	; 0x3fae <__subsf3>
    4748:	61 30       	cpi	r22, 0x01	; 1
    474a:	71 05       	cpc	r23, r1
    474c:	a0 e8       	ldi	r26, 0x80	; 128
    474e:	8a 07       	cpc	r24, r26
    4750:	b9 46       	sbci	r27, 0x69	; 105
    4752:	30 f4       	brcc	.+12     	; 0x4760 <modf+0x58>
    4754:	9b 01       	movw	r18, r22
    4756:	ac 01       	movw	r20, r24
    4758:	66 27       	eor	r22, r22
    475a:	77 27       	eor	r23, r23
    475c:	88 27       	eor	r24, r24
    475e:	90 78       	andi	r25, 0x80	; 128
    4760:	30 96       	adiw	r30, 0x00	; 0
    4762:	21 f0       	breq	.+8      	; 0x476c <modf+0x64>
    4764:	20 83       	st	Z, r18
    4766:	31 83       	std	Z+1, r19	; 0x01
    4768:	42 83       	std	Z+2, r20	; 0x02
    476a:	53 83       	std	Z+3, r21	; 0x03
    476c:	08 95       	ret

0000476e <__udivmodhi4>:
    476e:	aa 1b       	sub	r26, r26
    4770:	bb 1b       	sub	r27, r27
    4772:	51 e1       	ldi	r21, 0x11	; 17
    4774:	07 c0       	rjmp	.+14     	; 0x4784 <__udivmodhi4_ep>

00004776 <__udivmodhi4_loop>:
    4776:	aa 1f       	adc	r26, r26
    4778:	bb 1f       	adc	r27, r27
    477a:	a6 17       	cp	r26, r22
    477c:	b7 07       	cpc	r27, r23
    477e:	10 f0       	brcs	.+4      	; 0x4784 <__udivmodhi4_ep>
    4780:	a6 1b       	sub	r26, r22
    4782:	b7 0b       	sbc	r27, r23

00004784 <__udivmodhi4_ep>:
    4784:	88 1f       	adc	r24, r24
    4786:	99 1f       	adc	r25, r25
    4788:	5a 95       	dec	r21
    478a:	a9 f7       	brne	.-22     	; 0x4776 <__udivmodhi4_loop>
    478c:	80 95       	com	r24
    478e:	90 95       	com	r25
    4790:	bc 01       	movw	r22, r24
    4792:	cd 01       	movw	r24, r26
    4794:	08 95       	ret

00004796 <__divmodhi4>:
    4796:	97 fb       	bst	r25, 7
    4798:	07 2e       	mov	r0, r23
    479a:	16 f4       	brtc	.+4      	; 0x47a0 <__divmodhi4+0xa>
    479c:	00 94       	com	r0
    479e:	06 d0       	rcall	.+12     	; 0x47ac <__divmodhi4_neg1>
    47a0:	77 fd       	sbrc	r23, 7
    47a2:	08 d0       	rcall	.+16     	; 0x47b4 <__divmodhi4_neg2>
    47a4:	e4 df       	rcall	.-56     	; 0x476e <__udivmodhi4>
    47a6:	07 fc       	sbrc	r0, 7
    47a8:	05 d0       	rcall	.+10     	; 0x47b4 <__divmodhi4_neg2>
    47aa:	3e f4       	brtc	.+14     	; 0x47ba <__divmodhi4_exit>

000047ac <__divmodhi4_neg1>:
    47ac:	90 95       	com	r25
    47ae:	81 95       	neg	r24
    47b0:	9f 4f       	sbci	r25, 0xFF	; 255
    47b2:	08 95       	ret

000047b4 <__divmodhi4_neg2>:
    47b4:	70 95       	com	r23
    47b6:	61 95       	neg	r22
    47b8:	7f 4f       	sbci	r23, 0xFF	; 255

000047ba <__divmodhi4_exit>:
    47ba:	08 95       	ret

000047bc <__tablejump2__>:
    47bc:	ee 0f       	add	r30, r30
    47be:	ff 1f       	adc	r31, r31
    47c0:	05 90       	lpm	r0, Z+
    47c2:	f4 91       	lpm	r31, Z
    47c4:	e0 2d       	mov	r30, r0
    47c6:	09 94       	ijmp

000047c8 <malloc>:
    47c8:	0f 93       	push	r16
    47ca:	1f 93       	push	r17
    47cc:	cf 93       	push	r28
    47ce:	df 93       	push	r29
    47d0:	82 30       	cpi	r24, 0x02	; 2
    47d2:	91 05       	cpc	r25, r1
    47d4:	10 f4       	brcc	.+4      	; 0x47da <malloc+0x12>
    47d6:	82 e0       	ldi	r24, 0x02	; 2
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	e0 91 5b 03 	lds	r30, 0x035B	; 0x80035b <__flp>
    47de:	f0 91 5c 03 	lds	r31, 0x035C	; 0x80035c <__flp+0x1>
    47e2:	30 e0       	ldi	r19, 0x00	; 0
    47e4:	20 e0       	ldi	r18, 0x00	; 0
    47e6:	b0 e0       	ldi	r27, 0x00	; 0
    47e8:	a0 e0       	ldi	r26, 0x00	; 0
    47ea:	30 97       	sbiw	r30, 0x00	; 0
    47ec:	99 f4       	brne	.+38     	; 0x4814 <malloc+0x4c>
    47ee:	21 15       	cp	r18, r1
    47f0:	31 05       	cpc	r19, r1
    47f2:	09 f4       	brne	.+2      	; 0x47f6 <malloc+0x2e>
    47f4:	47 c0       	rjmp	.+142    	; 0x4884 <malloc+0xbc>
    47f6:	28 1b       	sub	r18, r24
    47f8:	39 0b       	sbc	r19, r25
    47fa:	24 30       	cpi	r18, 0x04	; 4
    47fc:	31 05       	cpc	r19, r1
    47fe:	c0 f5       	brcc	.+112    	; 0x4870 <malloc+0xa8>
    4800:	8a 81       	ldd	r24, Y+2	; 0x02
    4802:	9b 81       	ldd	r25, Y+3	; 0x03
    4804:	61 15       	cp	r22, r1
    4806:	71 05       	cpc	r23, r1
    4808:	71 f1       	breq	.+92     	; 0x4866 <malloc+0x9e>
    480a:	fb 01       	movw	r30, r22
    480c:	93 83       	std	Z+3, r25	; 0x03
    480e:	82 83       	std	Z+2, r24	; 0x02
    4810:	fe 01       	movw	r30, r28
    4812:	11 c0       	rjmp	.+34     	; 0x4836 <malloc+0x6e>
    4814:	40 81       	ld	r20, Z
    4816:	51 81       	ldd	r21, Z+1	; 0x01
    4818:	02 81       	ldd	r16, Z+2	; 0x02
    481a:	13 81       	ldd	r17, Z+3	; 0x03
    481c:	48 17       	cp	r20, r24
    481e:	59 07       	cpc	r21, r25
    4820:	f8 f0       	brcs	.+62     	; 0x4860 <malloc+0x98>
    4822:	48 17       	cp	r20, r24
    4824:	59 07       	cpc	r21, r25
    4826:	99 f4       	brne	.+38     	; 0x484e <malloc+0x86>
    4828:	10 97       	sbiw	r26, 0x00	; 0
    482a:	61 f0       	breq	.+24     	; 0x4844 <malloc+0x7c>
    482c:	12 96       	adiw	r26, 0x02	; 2
    482e:	0c 93       	st	X, r16
    4830:	12 97       	sbiw	r26, 0x02	; 2
    4832:	13 96       	adiw	r26, 0x03	; 3
    4834:	1c 93       	st	X, r17
    4836:	32 96       	adiw	r30, 0x02	; 2
    4838:	cf 01       	movw	r24, r30
    483a:	df 91       	pop	r29
    483c:	cf 91       	pop	r28
    483e:	1f 91       	pop	r17
    4840:	0f 91       	pop	r16
    4842:	08 95       	ret
    4844:	00 93 5b 03 	sts	0x035B, r16	; 0x80035b <__flp>
    4848:	10 93 5c 03 	sts	0x035C, r17	; 0x80035c <__flp+0x1>
    484c:	f4 cf       	rjmp	.-24     	; 0x4836 <malloc+0x6e>
    484e:	21 15       	cp	r18, r1
    4850:	31 05       	cpc	r19, r1
    4852:	19 f0       	breq	.+6      	; 0x485a <malloc+0x92>
    4854:	42 17       	cp	r20, r18
    4856:	53 07       	cpc	r21, r19
    4858:	18 f4       	brcc	.+6      	; 0x4860 <malloc+0x98>
    485a:	9a 01       	movw	r18, r20
    485c:	bd 01       	movw	r22, r26
    485e:	ef 01       	movw	r28, r30
    4860:	df 01       	movw	r26, r30
    4862:	f8 01       	movw	r30, r16
    4864:	c2 cf       	rjmp	.-124    	; 0x47ea <malloc+0x22>
    4866:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <__flp+0x1>
    486a:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <__flp>
    486e:	d0 cf       	rjmp	.-96     	; 0x4810 <malloc+0x48>
    4870:	fe 01       	movw	r30, r28
    4872:	e2 0f       	add	r30, r18
    4874:	f3 1f       	adc	r31, r19
    4876:	81 93       	st	Z+, r24
    4878:	91 93       	st	Z+, r25
    487a:	22 50       	subi	r18, 0x02	; 2
    487c:	31 09       	sbc	r19, r1
    487e:	39 83       	std	Y+1, r19	; 0x01
    4880:	28 83       	st	Y, r18
    4882:	da cf       	rjmp	.-76     	; 0x4838 <malloc+0x70>
    4884:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <__brkval>
    4888:	30 91 5a 03 	lds	r19, 0x035A	; 0x80035a <__brkval+0x1>
    488c:	23 2b       	or	r18, r19
    488e:	41 f4       	brne	.+16     	; 0x48a0 <malloc+0xd8>
    4890:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <__malloc_heap_start>
    4894:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <__malloc_heap_start+0x1>
    4898:	30 93 5a 03 	sts	0x035A, r19	; 0x80035a <__brkval+0x1>
    489c:	20 93 59 03 	sts	0x0359, r18	; 0x800359 <__brkval>
    48a0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__malloc_heap_end>
    48a4:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__malloc_heap_end+0x1>
    48a8:	21 15       	cp	r18, r1
    48aa:	31 05       	cpc	r19, r1
    48ac:	41 f4       	brne	.+16     	; 0x48be <malloc+0xf6>
    48ae:	2d b7       	in	r18, 0x3d	; 61
    48b0:	3e b7       	in	r19, 0x3e	; 62
    48b2:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <__malloc_margin>
    48b6:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <__malloc_margin+0x1>
    48ba:	24 1b       	sub	r18, r20
    48bc:	35 0b       	sbc	r19, r21
    48be:	e0 91 59 03 	lds	r30, 0x0359	; 0x800359 <__brkval>
    48c2:	f0 91 5a 03 	lds	r31, 0x035A	; 0x80035a <__brkval+0x1>
    48c6:	e2 17       	cp	r30, r18
    48c8:	f3 07       	cpc	r31, r19
    48ca:	a0 f4       	brcc	.+40     	; 0x48f4 <malloc+0x12c>
    48cc:	2e 1b       	sub	r18, r30
    48ce:	3f 0b       	sbc	r19, r31
    48d0:	28 17       	cp	r18, r24
    48d2:	39 07       	cpc	r19, r25
    48d4:	78 f0       	brcs	.+30     	; 0x48f4 <malloc+0x12c>
    48d6:	ac 01       	movw	r20, r24
    48d8:	4e 5f       	subi	r20, 0xFE	; 254
    48da:	5f 4f       	sbci	r21, 0xFF	; 255
    48dc:	24 17       	cp	r18, r20
    48de:	35 07       	cpc	r19, r21
    48e0:	48 f0       	brcs	.+18     	; 0x48f4 <malloc+0x12c>
    48e2:	4e 0f       	add	r20, r30
    48e4:	5f 1f       	adc	r21, r31
    48e6:	50 93 5a 03 	sts	0x035A, r21	; 0x80035a <__brkval+0x1>
    48ea:	40 93 59 03 	sts	0x0359, r20	; 0x800359 <__brkval>
    48ee:	81 93       	st	Z+, r24
    48f0:	91 93       	st	Z+, r25
    48f2:	a2 cf       	rjmp	.-188    	; 0x4838 <malloc+0x70>
    48f4:	f0 e0       	ldi	r31, 0x00	; 0
    48f6:	e0 e0       	ldi	r30, 0x00	; 0
    48f8:	9f cf       	rjmp	.-194    	; 0x4838 <malloc+0x70>

000048fa <free>:
    48fa:	cf 93       	push	r28
    48fc:	df 93       	push	r29
    48fe:	00 97       	sbiw	r24, 0x00	; 0
    4900:	e9 f0       	breq	.+58     	; 0x493c <free+0x42>
    4902:	fc 01       	movw	r30, r24
    4904:	32 97       	sbiw	r30, 0x02	; 2
    4906:	13 82       	std	Z+3, r1	; 0x03
    4908:	12 82       	std	Z+2, r1	; 0x02
    490a:	c0 91 5b 03 	lds	r28, 0x035B	; 0x80035b <__flp>
    490e:	d0 91 5c 03 	lds	r29, 0x035C	; 0x80035c <__flp+0x1>
    4912:	de 01       	movw	r26, r28
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	20 97       	sbiw	r28, 0x00	; 0
    491a:	a1 f4       	brne	.+40     	; 0x4944 <free+0x4a>
    491c:	20 81       	ld	r18, Z
    491e:	31 81       	ldd	r19, Z+1	; 0x01
    4920:	82 0f       	add	r24, r18
    4922:	93 1f       	adc	r25, r19
    4924:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <__brkval>
    4928:	30 91 5a 03 	lds	r19, 0x035A	; 0x80035a <__brkval+0x1>
    492c:	28 17       	cp	r18, r24
    492e:	39 07       	cpc	r19, r25
    4930:	09 f0       	breq	.+2      	; 0x4934 <free+0x3a>
    4932:	67 c0       	rjmp	.+206    	; 0x4a02 <free+0x108>
    4934:	f0 93 5a 03 	sts	0x035A, r31	; 0x80035a <__brkval+0x1>
    4938:	e0 93 59 03 	sts	0x0359, r30	; 0x800359 <__brkval>
    493c:	df 91       	pop	r29
    493e:	cf 91       	pop	r28
    4940:	08 95       	ret
    4942:	da 01       	movw	r26, r20
    4944:	ae 17       	cp	r26, r30
    4946:	bf 07       	cpc	r27, r31
    4948:	08 f0       	brcs	.+2      	; 0x494c <free+0x52>
    494a:	40 c0       	rjmp	.+128    	; 0x49cc <free+0xd2>
    494c:	12 96       	adiw	r26, 0x02	; 2
    494e:	4d 91       	ld	r20, X+
    4950:	5c 91       	ld	r21, X
    4952:	13 97       	sbiw	r26, 0x03	; 3
    4954:	9d 01       	movw	r18, r26
    4956:	41 15       	cp	r20, r1
    4958:	51 05       	cpc	r21, r1
    495a:	99 f7       	brne	.-26     	; 0x4942 <free+0x48>
    495c:	d9 01       	movw	r26, r18
    495e:	13 96       	adiw	r26, 0x03	; 3
    4960:	fc 93       	st	X, r31
    4962:	ee 93       	st	-X, r30
    4964:	12 97       	sbiw	r26, 0x02	; 2
    4966:	4d 91       	ld	r20, X+
    4968:	5d 91       	ld	r21, X+
    496a:	a4 0f       	add	r26, r20
    496c:	b5 1f       	adc	r27, r21
    496e:	ea 17       	cp	r30, r26
    4970:	fb 07       	cpc	r31, r27
    4972:	79 f4       	brne	.+30     	; 0x4992 <free+0x98>
    4974:	80 81       	ld	r24, Z
    4976:	91 81       	ldd	r25, Z+1	; 0x01
    4978:	02 96       	adiw	r24, 0x02	; 2
    497a:	84 0f       	add	r24, r20
    497c:	95 1f       	adc	r25, r21
    497e:	d9 01       	movw	r26, r18
    4980:	11 96       	adiw	r26, 0x01	; 1
    4982:	9c 93       	st	X, r25
    4984:	8e 93       	st	-X, r24
    4986:	82 81       	ldd	r24, Z+2	; 0x02
    4988:	93 81       	ldd	r25, Z+3	; 0x03
    498a:	13 96       	adiw	r26, 0x03	; 3
    498c:	9c 93       	st	X, r25
    498e:	8e 93       	st	-X, r24
    4990:	12 97       	sbiw	r26, 0x02	; 2
    4992:	b0 e0       	ldi	r27, 0x00	; 0
    4994:	a0 e0       	ldi	r26, 0x00	; 0
    4996:	8a 81       	ldd	r24, Y+2	; 0x02
    4998:	9b 81       	ldd	r25, Y+3	; 0x03
    499a:	00 97       	sbiw	r24, 0x00	; 0
    499c:	b9 f5       	brne	.+110    	; 0x4a0c <free+0x112>
    499e:	fe 01       	movw	r30, r28
    49a0:	81 91       	ld	r24, Z+
    49a2:	91 91       	ld	r25, Z+
    49a4:	e8 0f       	add	r30, r24
    49a6:	f9 1f       	adc	r31, r25
    49a8:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <__brkval>
    49ac:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <__brkval+0x1>
    49b0:	8e 17       	cp	r24, r30
    49b2:	9f 07       	cpc	r25, r31
    49b4:	19 f6       	brne	.-122    	; 0x493c <free+0x42>
    49b6:	10 97       	sbiw	r26, 0x00	; 0
    49b8:	61 f5       	brne	.+88     	; 0x4a12 <free+0x118>
    49ba:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <__flp+0x1>
    49be:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <__flp>
    49c2:	d0 93 5a 03 	sts	0x035A, r29	; 0x80035a <__brkval+0x1>
    49c6:	c0 93 59 03 	sts	0x0359, r28	; 0x800359 <__brkval>
    49ca:	b8 cf       	rjmp	.-144    	; 0x493c <free+0x42>
    49cc:	b3 83       	std	Z+3, r27	; 0x03
    49ce:	a2 83       	std	Z+2, r26	; 0x02
    49d0:	40 81       	ld	r20, Z
    49d2:	51 81       	ldd	r21, Z+1	; 0x01
    49d4:	84 0f       	add	r24, r20
    49d6:	95 1f       	adc	r25, r21
    49d8:	a8 17       	cp	r26, r24
    49da:	b9 07       	cpc	r27, r25
    49dc:	71 f4       	brne	.+28     	; 0x49fa <free+0x100>
    49de:	4e 5f       	subi	r20, 0xFE	; 254
    49e0:	5f 4f       	sbci	r21, 0xFF	; 255
    49e2:	8d 91       	ld	r24, X+
    49e4:	9c 91       	ld	r25, X
    49e6:	11 97       	sbiw	r26, 0x01	; 1
    49e8:	48 0f       	add	r20, r24
    49ea:	59 1f       	adc	r21, r25
    49ec:	51 83       	std	Z+1, r21	; 0x01
    49ee:	40 83       	st	Z, r20
    49f0:	12 96       	adiw	r26, 0x02	; 2
    49f2:	8d 91       	ld	r24, X+
    49f4:	9c 91       	ld	r25, X
    49f6:	93 83       	std	Z+3, r25	; 0x03
    49f8:	82 83       	std	Z+2, r24	; 0x02
    49fa:	21 15       	cp	r18, r1
    49fc:	31 05       	cpc	r19, r1
    49fe:	09 f0       	breq	.+2      	; 0x4a02 <free+0x108>
    4a00:	ad cf       	rjmp	.-166    	; 0x495c <free+0x62>
    4a02:	f0 93 5c 03 	sts	0x035C, r31	; 0x80035c <__flp+0x1>
    4a06:	e0 93 5b 03 	sts	0x035B, r30	; 0x80035b <__flp>
    4a0a:	98 cf       	rjmp	.-208    	; 0x493c <free+0x42>
    4a0c:	de 01       	movw	r26, r28
    4a0e:	ec 01       	movw	r28, r24
    4a10:	c2 cf       	rjmp	.-124    	; 0x4996 <free+0x9c>
    4a12:	13 96       	adiw	r26, 0x03	; 3
    4a14:	1c 92       	st	X, r1
    4a16:	1e 92       	st	-X, r1
    4a18:	12 97       	sbiw	r26, 0x02	; 2
    4a1a:	d3 cf       	rjmp	.-90     	; 0x49c2 <free+0xc8>

00004a1c <memcmp>:
    4a1c:	fb 01       	movw	r30, r22
    4a1e:	dc 01       	movw	r26, r24
    4a20:	04 c0       	rjmp	.+8      	; 0x4a2a <memcmp+0xe>
    4a22:	8d 91       	ld	r24, X+
    4a24:	01 90       	ld	r0, Z+
    4a26:	80 19       	sub	r24, r0
    4a28:	21 f4       	brne	.+8      	; 0x4a32 <memcmp+0x16>
    4a2a:	41 50       	subi	r20, 0x01	; 1
    4a2c:	50 40       	sbci	r21, 0x00	; 0
    4a2e:	c8 f7       	brcc	.-14     	; 0x4a22 <memcmp+0x6>
    4a30:	88 1b       	sub	r24, r24
    4a32:	99 0b       	sbc	r25, r25
    4a34:	08 95       	ret

00004a36 <memset>:
    4a36:	dc 01       	movw	r26, r24
    4a38:	01 c0       	rjmp	.+2      	; 0x4a3c <memset+0x6>
    4a3a:	6d 93       	st	X+, r22
    4a3c:	41 50       	subi	r20, 0x01	; 1
    4a3e:	50 40       	sbci	r21, 0x00	; 0
    4a40:	e0 f7       	brcc	.-8      	; 0x4a3a <memset+0x4>
    4a42:	08 95       	ret

00004a44 <_exit>:
    4a44:	f8 94       	cli

00004a46 <__stop_program>:
    4a46:	ff cf       	rjmp	.-2      	; 0x4a46 <__stop_program>
