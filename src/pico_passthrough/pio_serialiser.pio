;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program pio_serialiser

; Just serialise a stream of bits. Take 32 bits from each FIFO record. LSB-first.
.wrap_target
top:
wait 0 irq 2 ; We can set this to 1 in the keepalive pio to make this one wait
mov x, !STATUS
jmp !x read
set pindirs 31 [1]
set y 14 ; write 15 out of 16 pairs of bits in a loop, with delays
loop:
out pins, 2 [5] ; write the last bit pair without delays, the check for more data executes instead of the delay
jmp y-- loop
out pins, 2
jmp top
read:
set pindirs 0
push iffull noblock ; we should be able to replace this with autopush if we swap processing incoming data with a interrupt later
in pins, 2 ; use wrap instead of an explicit jump
% c-sdk {
static inline void pio_serialiser_program_init(PIO pio, uint sm, uint offset, uint data_pin, float clk_div) {
    pio_gpio_init(pio, data_pin);
    pio_gpio_init(pio, data_pin + 1);
    pio_sm_config c = pio_serialiser_program_get_default_config(offset);
    sm_config_set_out_pins(&c, data_pin, 2);
    sm_config_set_clkdiv(&c, clk_div);
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_in_pins(&c, data_pin);
    sm_config_set_in_shift(&c, true, false, 32);
    sm_config_set_set_pins(&c, data_pin, 2);
    sm_config_set_mov_status(&c, STATUS_TX_LESSTHAN, 1);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 2, true);
    pio_sm_set_enabled(pio, sm, true);
}
%}
