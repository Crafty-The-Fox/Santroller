;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program pio_serialiser
; TODO while this kinda works, it might actually make more sense to have a second state machine that just handles sending start of frame, and that we interrupt when we want to do normal writing.
; As the SOF for full speed needs 5 bytes, its not really feasible to hardcode it into a state machine, so we will need to use a second statemachine, and just fill it with a timer
; Just serialise a stream of bits. Take 32 bits from each FIFO record. LSB-first.
loopReadInit:
set pindirs 0
loopRead:
    mov x, status
    jmp !x txstart 
    in pins, 2
    jmp loopRead

txstart:
set pindirs 31
loopWrite:
    out pins, 2
    jmp !osre loopWrite [2]
    jmp loopReadInit

% c-sdk {
static inline void pio_serialiser_program_init(PIO pio, uint sm, uint offset, uint data_pin, float clk_div) {
    pio_gpio_init(pio, data_pin);
    pio_gpio_init(pio, data_pin + 1);
    pio_sm_config c = pio_serialiser_program_get_default_config(offset);
    sm_config_set_out_pins(&c, data_pin, 2);
    sm_config_set_clkdiv(&c, clk_div);
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_in_pins(&c, data_pin);
    sm_config_set_in_shift(&c, true, true, 32);
    sm_config_set_set_pins(&c, data_pin, 2);
    sm_config_set_mov_status(&c, STATUS_TX_LESSTHAN, 1);
    pio_sm_init(pio, sm, offset, &c);
    ; pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 2, true);
    pio_sm_set_enabled(pio, sm, true);
}
%}
