;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program pio_keepalive_high

; Just serialise a stream of bits. Take 32 bits from each FIFO record. LSB-first.
pull
mov x, OSR
init:
set y, 2
loop3:
    set pins, 2 [3]
    set pins, 1
    jmp y-- loop3 [2]
set pins, 2 [3]
set pins, 2 [3]
set y, 1
loop4:
    set pins, 2 [3]
    set pins, 1 [3]
    set pins, 1
    jmp y-- loop4 [2]
set pins, 2 [3]
set pins, 2 [2]
set y, 15
loop:
    out pins, 2
    jmp y-- loop [2]
set pins, 0 [3]
set pins, 0 [3]
set pins, 1 [3]
irq set 2
mov y, x
loop2:
    jmp y-- loop2 [2]
    jmp init 
% c-sdk {
static inline void pio_keepalive_high_program_init(PIO pio, uint sm, uint offset, uint data_pin, float clk_div, uint32_t delay) {
    pio_gpio_init(pio, data_pin);
    pio_gpio_init(pio, data_pin + 1);
    pio_sm_config c = pio_keepalive_high_program_get_default_config(offset);
    sm_config_set_out_pins(&c, data_pin, 2);
    sm_config_set_clkdiv(&c, clk_div);
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_in_pins(&c, data_pin);
    sm_config_set_in_shift(&c, true, true, 32);
    sm_config_set_set_pins(&c, data_pin, 2);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 2, true);
    pio_sm_set_enabled(pio, sm, true);
    pio_sm_put_blocking(pio, sm, delay);
}
%}
